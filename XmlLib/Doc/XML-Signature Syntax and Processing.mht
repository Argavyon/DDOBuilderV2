From: <Saved by Microsoft Internet Explorer 5>
Subject: XML-Signature Syntax and Processing
Date: Wed, 9 Apr 2003 10:09:45 +0100
MIME-Version: 1.0
Content-Type: multipart/related;
	boundary="----=_NextPart_000_0000_01C2FE80.25A38E60";
	type="text/html"
X-MimeOLE: Produced By Microsoft MimeOLE V5.00.2919.6700

This is a multi-part message in MIME format.

------=_NextPart_000_0000_01C2FE80.25A38E60
Content-Type: text/html;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.w3.org/TR/xmldsig-core/

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<?xml version=3D"1.0" encoding=3D"iso-8859-1"?><HTML=20
xmlns=3D"http://www.w3.org/1999/xhtml"><HEAD><TITLE>XML-Signature Syntax =
and Processing</TITLE>
<META content=3D"MSHTML 5.00.2920.0" name=3DGENERATOR>
<META content=3D"text/html; charset=3Diso-8859-1" =
http-equiv=3DContent-Type>
<STYLE type=3Dtext/css>U {
	BACKGROUND: white; COLOR: red
}
INS {
	BACKGROUND: white; COLOR: red
}
DEL {
	BACKGROUND: white; COLOR: silver; TEXT-DECORATION: line-through
}
STRIKE {
	BACKGROUND: white; COLOR: silver; TEXT-DECORATION: line-through
}
.strike {
	BACKGROUND: white; COLOR: silver; TEXT-DECORATION: line-through
}
CODE {
	FONT-WEIGHT: normal
}
.link-def {
	BACKGROUND: #ffffff; COLOR: teal; FONT-STYLE: italic
}
.comment {
	BACKGROUND: #fffff5; BORDER-BOTTOM: navy thin solid; BORDER-LEFT: navy =
thin solid; BORDER-RIGHT: navy thin solid; BORDER-TOP: navy thin solid; =
COLOR: black; PADDING-BOTTOM: 0.7em; PADDING-LEFT: 0.7em; PADDING-RIGHT: =
0.7em; PADDING-TOP: 0.7em
}
.discuss {
	BACKGROUND: yellow; COLOR: blue
}
.xml-example {
	BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; BORDER-RIGHT: =
medium none; BORDER-TOP: medium none; MARGIN-LEFT: -1em; PADDING-BOTTOM: =
0.5em; PADDING-LEFT: 0.5em; PADDING-RIGHT: 0.5em; PADDING-TOP: 0.5em; =
WHITE-SPACE: pre
}
.xml-dtd {
	BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; BORDER-RIGHT: =
medium none; BORDER-TOP: medium none; MARGIN-LEFT: -1em; PADDING-BOTTOM: =
0.5em; PADDING-LEFT: 0.5em; PADDING-RIGHT: 0.5em; PADDING-TOP: 0.5em; =
WHITE-SPACE: pre
}
.xml-dtd {
	BACKGROUND: #efeff8; COLOR: black
}
</STYLE>
<LINK href=3D"http://www.w3.org/StyleSheets/TR/W3C-REC.css" =
rel=3Dstylesheet=20
type=3Dtext/css></HEAD>
<BODY lang=3Den xml:lang=3D"en">
<DIV class=3Dhead>
<P><A href=3D"http://www.ietf.org/"><IMG alt=3DIETF height=3D48=20
src=3D"http://ietf.org/images/ietflogo2e.gif" width=3D92></A><A=20
href=3D"http://www.w3.org/"><IMG alt=3DW3C height=3D48=20
src=3D"http://www.w3.org/Icons/w3c_home" width=3D72></A> </P>
<H1 class=3Dnotoc>XML-Signature Syntax and Processing </H1>
<H2 class=3Dnotoc>W3C Recommendation 12 February 2002 </H2>
<DL>
  <DT>This version:=20
  <DD><A=20
  =
href=3D"http://www.w3.org/TR/2002/REC-xmldsig-core-20020212/">http://www.=
w3.org/TR/2002/REC-xmldsig-core-20020212/</A>=20

  <DD><A=20
  =
href=3D"http://www.ietf.org/rfc/rfc3275.txt">http://www.ietf.org/rfc/rfc3=
275.txt</A>=20

  <DT>Latest version:=20
  <DD><A=20
  =
href=3D"http://www.w3.org/TR/xmldsig-core/">http://www.w3.org/TR/xmldsig-=
core/</A>=20

  <DT>Previous version:=20
  <DD><A=20
  =
href=3D"http://www.w3.org/TR/2001/PR-xmldsig-core-20010820/">http://www.w=
3.org/TR/2001/PR-xmldsig-core-20010820/</A>=20

  <DD><A=20
  =
href=3D"http://www.ietf.org/rfc/rfc3075.txt">http://www.ietf.org/rfc/rfc3=
075.txt</A>=20
  [corresponds to <A=20
  =
href=3D"http://www.w3.org/TR/2001/CR-xmldsig-core-20010419/">CR-xmldsig-c=
ore-20001031</A>]<BR>
  <DT>Editors=20
  <DD>Donald Eastlake &lt;<A=20
  =
href=3D"mailto:dee3@torque.pothole.com">dee3@torque.pothole.com</A>&gt;<B=
R>Joseph=20
  Reagle &lt;<A =
href=3D"mailto:reagle@w3.org">reagle@w3.org</A>&gt;<BR>David Solo=20
  &lt;<A href=3D"mailto:dsolo@alum.mit.edu">dsolo@alum.mit.edu</A>&gt;=20
  <DT>Authors=20
  <DD>Mark Bartel &lt;<A=20
  href=3D"mailto:mbartel@accelio.com">mbartel@accelio.com</A>&gt;=20
  <DD>John Boyer &lt;<A=20
  =
href=3D"mailto:jboyer@PureEdge.com">jboyer@PureEdge.com</A>&gt;<BR>Barb =
Fox=20
  &lt;<A=20
  =
href=3D"mailto:bfox@Exchange.Microsoft.com">bfox@Exchange.Microsoft.com</=
A>&gt;=20
  <DD>Brian LaMacchia &lt;<A=20
  href=3D"mailto:bal@microsoft.com">bal@microsoft.com</A>&gt;=20
  <DD>Ed Simon &lt;<A=20
  href=3D"mailto:edsimon@xmlsec.com">edsimon@xmlsec.com</A>&gt;=20
  <DT>Contributors=20
  <DD>See <A=20
  =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-Acknowledgements">Acknowle=
dgements</A>=20
  </DD></DL>
<P class=3Dcopyright><A=20
href=3D"http://www.w3.org/Consortium/Legal/ipr-notice-20000612#Copyright"=
>Copyright</A>=20
=A9 2002 <A href=3D"http://www.ietf.org/">The Internet Society</A> &amp; =
<A=20
href=3D"http://www.w3.org/"><ABBR=20
title=3D"World Wide Web Consortium">W3C</ABBR></A>=AE (<A=20
href=3D"http://www.lcs.mit.edu/"><ABBR=20
title=3D"Massachusetts Institute of Technology">MIT</ABBR></A>, <A=20
href=3D"http://www.inria.fr/"><ABBR lang=3Dfr=20
title=3D"Institut National de Recherche en Informatique et Automatique"=20
xml:lang=3D"fr">INRIA</ABBR></A>, <A =
href=3D"http://www.keio.ac.jp/">Keio</A>), All=20
Rights Reserved. W3C <A=20
href=3D"http://www.w3.org/Consortium/Legal/ipr-notice-20000612#Legal_Disc=
laimer">liability</A>,=20
<A=20
href=3D"http://www.w3.org/Consortium/Legal/ipr-notice-20000612#W3C_Tradem=
arks">trademark</A>,=20
<A =
href=3D"http://www.w3.org/Consortium/Legal/copyright-documents-19990405">=
docum=20
ent use</A> and <A=20
href=3D"http://www.w3.org/Consortium/Legal/copyright-software-19980720">s=
oftware=20
licensing</A> rules apply. </P>
<HR title=3D"Separator from Header">
</DIV>
<H2 class=3Dnotoc>Abstract </H2>
<P>This document specifies XML digital signature processing rules and =
syntax.=20
XML Signatures provide <A class=3Dlink-def=20
href=3D"http://www.w3.org/TR/xmldsig-core/#def-Integrity">integrity</A>, =
<A=20
class=3Dlink-def=20
href=3D"http://www.w3.org/TR/xmldsig-core/#def-AuthenticationMessage">mes=
sage=20
authentication</A>, and/or <A class=3Dlink-def=20
href=3D"http://www.w3.org/TR/xmldsig-core/#def-AuthenticationSigner">sign=
er=20
authentication</A> services for data of any type, whether located within =
the XML=20
that includes the signature or elsewhere. </P>
<H2 class=3Dnotoc><A id=3Dstatus name=3Dstatus></A>Status of this =
document </H2>
<DIV class=3D"">
<P>This document has been reviewed by W3C Members and other interested =
parties=20
and has been endorsed by the Director as a W3C Recommendation. It is a =
stable=20
document and may be used as reference material or cited as a normative =
reference=20
from another document. W3C's role in making the Recommendation is to =
draw=20
attention to the specification and to promote its widespread deployment. =
This=20
enhances the functionality and interoperability of the Web. </P>
<P class=3Dnotoc>This specification was produced by the IETF/W3C <A=20
href=3D"http://www.w3.org/Signature/">XML Signature Working Group</A> =
(<A=20
href=3D"http://www.w3.org/Signature/Activity.html">W3C Activity =
Statement</A>)=20
which believes the specification is sufficient for the creation of =
independent=20
interoperable implementations; the <A=20
href=3D"http://www.w3.org/Signature/2001/04/05-xmldsig-interop.html">Inte=
roperability=20
Report</A> shows at least 10 implementations with at least two =
interoperable=20
implementations over every feature. </P>
<P>Patent disclosures relevant to this specification may be found on the =
Working=20
Group's <A href=3D"http://www.w3.org/Signature/Disclosures.html">patent =
disclosure=20
page</A>, in conformance with W3C policy, and the <A=20
href=3D"http://www.ietf.org/ipr.html">IETF Page of Intellectual Property =
Rights=20
Notices</A>, in conformance with IETF policy. </P>
<P>Please report errors in this document to <A=20
href=3D"mailto:w3c-ietf-xmldsig@w3.org">w3c-ietf-xmldsig@w3.org</A> (<A=20
href=3D"http://lists.w3.org/Archives/Public/xml-encryption/">archive</A>)=
. </P>
<P>The list of known errors in this specification is available at <A=20
href=3D"http://www.w3.org/2001/10/xmldsig-errata">http://www.w3.org/2001/=
10/xmldsig-errata</A>.=20
</P>
<P>The English version of this specification is the only normative =
version.=20
Information about translations of this document (if any) is available <A =

href=3D"http://www.w3.org/Signature/2002/02/xmldsig-translations">http://=
www.w3.org/Signature/2002/02/xmldsig-translations</A>=20
</P>
<P>A list of current W3C Technical Reports can be found at <A=20
href=3D"http://www.w3.org/TR/">http://www.w3.org/TR/</A>. </P></DIV>
<H2>Table of Contents </H2>
<OL>
  <LI><A=20
  =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-Introduction">Introduction=
</A>=20
  <OL>
    <LI><A =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-Editorial">Editorial=20
    Conventions</A>=20
    <LI><A href=3D"http://www.w3.org/TR/xmldsig-core/#sec-Design">Design =

    Philosophy</A>=20
    <LI><A =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-Versions">Versions,=20
    Namespaces and Identifiers</A>=20
    <LI><A=20
    =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-Acknowledgements">Acknowle=
dgements</A>=20
    </LI></OL>
  <LI><A =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-Overview">Signature=20
  Overview and Examples</A>=20
  <OL>
    <LI><A =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-o-Simple">Simple Example=20
    (<CODE>Signature</CODE>, <CODE>SignedInfo</CODE>, =
<CODE>Method</CODE>s, and=20
    <CODE>Reference</CODE>s)</A>=20
    <OL>
      <LI><A =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-o-Reference">More on=20
      <CODE>Reference</CODE></A> </LI></OL>
    <LI><A=20
    =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-o-SignatureProperty">Exten=
ded=20
    Example (<CODE>Object</CODE> and <CODE>SignatureProperty</CODE>)</A> =

    <LI><A =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-o-Manifest">Extended=20
    Example (<CODE>Object</CODE> and <CODE>Manifest</CODE>)</A> =
</LI></OL>
  <LI><A =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-Processing">Processing=20
  Rules</A>=20
  <OL>
    <LI><A=20
    =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-CoreGeneration">Signature =

    Generation</A>=20
    <LI><A=20
    =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-CoreValidation">Signature =

    Validation</A> </LI></OL>
  <LI><A href=3D"http://www.w3.org/TR/xmldsig-core/#sec-CoreSyntax">Core =
Signature=20
  Syntax</A>=20
  <OL>
    <LI><A href=3D"http://www.w3.org/TR/xmldsig-core/#sec-Signature">The =

    <CODE>Signature</CODE> element</A>=20
    <LI><A =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-SignatureValue">The=20
    <CODE>SignatureValue</CODE> Element</A>=20
    <LI><A =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-SignedInfo">The=20
    <CODE>SignedInfo</CODE> Element</A>=20
    <OL>
      <LI><A=20
      =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-CanonicalizationMethod">Th=
e=20
      <CODE>CanonicalizationMethod</CODE> Element</A>=20
      <LI><A =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-SignatureMethod">The=20
      <CODE>SignatureMethod</CODE> Element</A>=20
      <LI><A =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-Reference">The=20
      <CODE>Reference</CODE> Element</A>=20
      <OL>
        <LI><A href=3D"http://www.w3.org/TR/xmldsig-core/#sec-URI">The=20
        <CODE>URI</CODE> Attribute</A>=20
        <LI><A=20
        =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-ReferenceProcessingModel">=
The=20
        Reference Processing Model</A>=20
        <LI><A=20
        =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-Same-Document">Same-Docume=
nt=20
        URI-References</A>=20
        <LI><A =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-Transforms">The=20
        <CODE>Transforms</CODE> Element</A>=20
        <LI><A =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-DigestMethod">The=20
        <CODE>DigestMethod</CODE> Element</A>=20
        <LI><A =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-DigestValue">The=20
        <CODE>DigestValue</CODE> Element</A> </LI></OL></LI></OL>
    <LI><A href=3D"http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo">The=20
    <CODE>KeyInfo</CODE> Element</A>=20
    <OL>
      <LI><A href=3D"http://www.w3.org/TR/xmldsig-core/#sec-KeyName">The =

      <CODE>KeyName</CODE> Element</A>=20
      <LI><A =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-KeyValue">The=20
      <CODE>KeyValue</CODE> Element</A>=20
      <OL>
        <LI><A =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-DSAKeyValue">The=20
        <CODE>DSAKeyValue</CODE> Element</A>=20
        <LI><A =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-RSAKeyValue">The=20
        <CODE>RSAKeyValue</CODE> Element</A> </LI></OL>
      <LI><A =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-RetrievalMethod">The=20
      <CODE>RetrievalMethod</CODE> Element</A>=20
      <LI><A =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-X509Data">The=20
      <CODE>X509Data</CODE> Element</A>=20
      <LI><A href=3D"http://www.w3.org/TR/xmldsig-core/#sec-PGPData">The =

      <CODE>PGPData</CODE> Element</A>=20
      <LI><A =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-SPKIData">The=20
      <CODE>SPKIData</CODE> Element</A>=20
      <LI><A =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-MgmtData">The=20
      <CODE>MgmtData</CODE> Element</A> </LI></OL>
    <LI><A href=3D"http://www.w3.org/TR/xmldsig-core/#sec-Object">The=20
    <CODE>Object</CODE> Element</A> </LI></OL>
  <LI><A=20
  =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-AdditionalSyntax">Addition=
al=20
  Signature Syntax</A>=20
  <OL>
    <LI><A href=3D"http://www.w3.org/TR/xmldsig-core/#sec-Manifest">The=20
    <CODE>Manifest</CODE> Element</A>=20
    <LI><A =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-SignatureProperties">The=20
    <CODE>SignatureProperties</CODE> Element</A>=20
    <LI><A href=3D"http://www.w3.org/TR/xmldsig-core/#sec-PI">Processing =

    Instructions</A>=20
    <LI><A =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-comments">Comments in=20
    dsig Elements</A> </LI></OL>
  <LI><A =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-Algorithms">Algorithms</A>=
=20

  <OL>
    <LI><A =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-AlgID">Algorithm=20
    Identifiers and Implementation Requirements</A>=20
    <LI><A =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-MessageDigests">Message=20
    Digests</A>=20
    <LI><A href=3D"http://www.w3.org/TR/xmldsig-core/#sec-MACs">Message=20
    Authentication Codes</A>=20
    <LI><A =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-SignatureAlg">Signature=20
    Algorithms</A>=20
    <LI><A=20
    =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-c14nAlg">Canonicalization =

    Algorithms</A>=20
    <LI><A =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-TransformAlg">Transform=20
    Algorithms</A>=20
    <OL>
      <LI><A=20
      =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-Canonicalization">Canonica=
lization</A>=20

      <LI><A =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-Base-64">Base64</A>=20
      <LI><A href=3D"http://www.w3.org/TR/xmldsig-core/#sec-XPath">XPath =

      Filtering</A>=20
      <LI><A=20
      =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-EnvelopedSignature">Envelo=
ped=20
      Signature Transform</A>=20
      <LI><A href=3D"http://www.w3.org/TR/xmldsig-core/#sec-XSLT">XSLT=20
      Transform</A> </LI></OL></LI></OL>
  <LI><A =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-XML-Canonicalization">XML =

  Canonicalization and Syntax Constraint Considerations</A>=20
  <OL>
    <LI><A href=3D"http://www.w3.org/TR/xmldsig-core/#sec-XML-1">XML =
1.0, Syntax=20
    Constraints, and Canonicalization</A>=20
    <LI><A =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-DOM-SAX">DOM/SAX=20
    Processing and Canonicalization</A>=20
    <LI><A=20
    =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-NamespaceContext">Namespac=
e=20
    Context and Portable Signatures</A> </LI></OL>
  <LI><A =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-Security">Security=20
  Considerations</A>=20
  <OL>
    <LI><A=20
    =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-Security-Transofrms">Trans=
forms</A>=20

    <OL>
      <LI><A href=3D"http://www.w3.org/TR/xmldsig-core/#sec-Secure">Only =
What is=20
      Signed is Secure</A>=20
      <LI><A href=3D"http://www.w3.org/TR/xmldsig-core/#sec-Seen">Only =
What is=20
      "Seen" Should be Signed</A>=20
      <LI><A href=3D"http://www.w3.org/TR/xmldsig-core/#sec-See">"See" =
What is=20
      Signed</A> </LI></OL>
    <LI><A href=3D"http://www.w3.org/TR/xmldsig-core/#sec-Check">Check =
the=20
    Security Model</A>=20
    <LI><A =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-KeyLength">Algorithms,=20
    Key Lengths, Etc.</A> </LI></OL>
  <LI><A href=3D"http://www.w3.org/TR/xmldsig-core/#sec-Schema">Schema, =
DTD, Data=20
  Model, and Valid Examples</A>=20
  <LI><A=20
  =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-Definitions">Definitions</=
A>=20
  <LI><A =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-References">References</A>=
=20

  <LI><A =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-Authors">Authors'=20
  Address</A> </LI></OL>
<HR>

<H2>1.0 <A id=3Dsec-Introduction =
name=3Dsec-Introduction>Introduction</A> </H2>
<P>This document specifies XML syntax and processing rules for creating =
and=20
representing digital signatures. XML Signatures can be applied to any <A =

class=3Dlink-def =
href=3D"http://www.w3.org/TR/xmldsig-core/#def-DataObject">digital=20
content (data object)</A>, including XML. An XML Signature may be =
applied to the=20
content of one or more resources. <A class=3Dlink-def=20
href=3D"http://www.w3.org/TR/xmldsig-core/#def-SignatureEnveloped">Envelo=
ped</A>=20
or <A class=3Dlink-def=20
href=3D"http://www.w3.org/TR/xmldsig-core/#def-SignatureEnveloping">envel=
oping</A>=20
signatures are over data within the same XML document as the signature; =
<A=20
class=3Dlink-def=20
href=3D"http://www.w3.org/TR/xmldsig-core/#def-SignatureDetached">detache=
d</A>=20
signatures are over data&nbsp;external to the signature element. More=20
specifically, this specification defines an XML signature element type =
and an <A=20
class=3Dlink-def=20
href=3D"http://www.w3.org/TR/xmldsig-core/#def-SignatureApplication">XML =
signature=20
application</A>; conformance requirements for each are specified by way =
of=20
schema definitions and prose respectively. This specification also =
includes=20
other useful types that identify methods for referencing collections of=20
resources, algorithms, and keying and management information. </P>
<P>The XML Signature is a method of associating a key with referenced =
data=20
(octets); it does not normatively specify how keys are associated with =
persons=20
or institutions, nor the meaning of the data being referenced and =
signed.=20
Consequently, while this specification is an important component of =
secure XML=20
applications, it itself is not sufficient to address all application=20
security/trust concerns, particularly with respect to using signed XML =
(or other=20
data formats) as a basis of human-to-human communication and agreement. =
Such an=20
application must specify additional key, algorithm, processing and =
rendering=20
requirements. For further information, please see <A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-Security">Security=20
Considerations</A> (section 8). </P>
<H3>1.1 <A id=3Dsec-Editorial name=3Dsec-Editorial>Editorial</A> and =
Conformance=20
Conventions </H3>
<P>For readability, brevity, and historic reasons this document uses the =
term=20
"signature" to generally refer to digital authentication values of all =
types.=20
Obviously, the term is also strictly used to refer to authentication =
values that=20
are based on public keys and that provide signer authentication. When=20
specifically discussing authentication values based on symmetric secret =
key=20
codes we use the terms authenticators or authentication codes. (See <A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-Check">Check the Security =

Model</A>, section 8.3.) </P>
<P>This specification provides an XML Schema [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XML-schema">XML-schema</A>=
] and DTD=20
[<A href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XML">XML</A>]. The =
schema=20
definition is normative. </P>
<P>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", =
"SHOULD",=20
"SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this specification =
are to=20
be interpreted as described in <A=20
href=3D"http://www.ietf.org/rfc/rfc2119.txt">RFC2119</A> [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-KEYWORDS">KEYWORDS</A>]: =
</P>
<BLOCKQUOTE>
  <P>"they MUST only be used where it is actually required for =
interoperation or=20
  to limit behavior which has potential for causing harm (e.g., limiting =

  retransmissions)" </P></BLOCKQUOTE>
<P>Consequently, we use these capitalized key words to unambiguously =
specify=20
requirements over protocol and application features and behavior that =
affect the=20
interoperability and security of implementations. These key words are =
not used=20
(capitalized) to describe XML grammar; schema definitions unambiguously =
describe=20
such requirements and we wish to reserve the prominence of these terms =
for the=20
natural language descriptions of protocols and features. For instance, =
an XML=20
attribute might be described as being "optional." Compliance with the =
Namespaces=20
in XML specification [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XML-ns">XML-ns</A>] is =
described as=20
"REQUIRED." </P>
<H3>1.2 <A id=3Dsec-Design name=3Dsec-Design>Design</A> Philosophy </H3>
<P>The design philosophy and requirements of this specification are =
addressed in=20
the XML-Signature Requirements document [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XML-Signature-RD">XML-Sign=
ature-RD</A>].=20
</P>
<H3>1.3 <A id=3Dsec-Versions name=3Dsec-Versions>Versions</A>, =
Namespaces and=20
Identifiers </H3>
<P>No provision is made for an explicit version number in this syntax. =
If a=20
future version is needed, it will use a different namespace. The XML =
namespace=20
[<A href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XML-ns">XML-ns</A>] =
URI that=20
MUST be used by implementations of this (dated) specification is: =
</P><PRE class=3Dxml-example>   =
xmlns=3D"http://www.w3.org/2000/09/xmldsig#"
</PRE>
<P>This namespace is also used as the prefix for algorithm identifiers =
used by=20
this specification. While applications MUST support XML and XML =
namespaces, the=20
use of <A =
href=3D"http://www.w3.org/TR/REC-xml#sec-internal-ent">internal=20
entities</A> [<A =
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XML">XML</A>] or=20
our "dsig" XML <A=20
href=3D"http://www.w3.org/TR/1999/REC-xml-names-19990114/#dt-prefix">name=
space=20
prefix</A> and defaulting/scoping conventions are OPTIONAL; we use these =

facilities to provide compact and readable examples. </P>
<P>This specification uses Uniform&nbsp;Resource Identifiers [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-URI">URI</A>] to identify =

resources, algorithms, and semantics. The URI in the namespace =
declaration above=20
is also used as a prefix for URIs under the control of this =
specification. For=20
resources not under the control of this specification, we use the =
designated=20
Uniform Resource Names [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-URN">URN</A>] or Uniform =
Resource=20
Locators [<A =
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-URL">URL</A>] defined=20
by its normative external specification. If an external specification =
has not=20
allocated itself a Uniform Resource Identifier we allocate an identifier =
under=20
our own namespace. For instance: </P>
<DL>
  <DT><CODE>SignatureProperties</CODE> is identified and defined by this =

  specification's namespace=20
  <DD>http://www.w3.org/2000/09/xmldsig#<SPAN=20
  style=3D"FONT-WEIGHT: normal">SignatureProperties</SPAN>=20
  <DT><SPAN style=3D"FONT-WEIGHT: normal">XSLT is identified and defined =
by an=20
  external URI</SPAN>=20
  <DD>http://www.w3.org/TR/1999/REC-xslt-19991116=20
  <DT>SHA1 is identified via this specification's namespace and defined =
via a=20
  normative reference=20
  <DD>http://www.w3.org/2000/09/xmldsig#sha1=20
  <DD>FIPS PUB 180-1. <EM>Secure Hash Standard.</EM> U.S. Department of=20
  Commerce/National Institute of Standards and Technology. </DD></DL>
<P>Finally, in order to provide for terse namespace declarations we =
sometimes=20
use <A href=3D"http://www.w3.org/TR/REC-xml#sec-internal-ent">XML =
internal=20
entities</A> [<A =
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XML">XML</A>]=20
within URIs. For instance: </P><PRE class=3Dxml-example>   &lt;?xml =
version=3D'1.0'?&gt;
   &lt;!DOCTYPE Signature SYSTEM=20
     "xmldsig-core-schema.dtd" [ &lt;!ENTITY dsig
     "http://www.w3.org/2000/09/xmldsig#"&gt; ]&gt;
   &lt;Signature xmlns=3D"&amp;dsig;" Id=3D"MyFirstSignature"&gt;
     &lt;SignedInfo&gt;
     ...
</PRE>
<H3>1.4 <A id=3Dsec-Acknowledgements=20
name=3Dsec-Acknowledgements>Acknowledgements</A> </H3>
<P>The contributions of the following Working Group members to this=20
specification are gratefully acknowledged: </P>
<UL>
  <LI>Mark Bartel, Accelio (Author)=20
  <LI>John Boyer, PureEdge (Author)=20
  <LI>Mariano P. Consens, University of Waterloo=20
  <LI>John Cowan, Reuters Health=20
  <LI>Donald Eastlake 3rd, Motorola&nbsp; (Chair, Author/Editor)=20
  <LI>Barb Fox, Microsoft (Author)=20
  <LI>Christian Geuer-Pollmann, University Siegen=20
  <LI>Tom Gindin, IBM=20
  <LI>Phillip Hallam-Baker, VeriSign Inc=20
  <LI>Richard Himes, US Courts=20
  <LI>Merlin Hughes, Baltimore=20
  <LI>Gregor Karlinger, IAIK TU Graz=20
  <LI>Brian LaMacchia, Microsoft (Author)=20
  <LI>Peter Lipp, IAIK TU Graz=20
  <LI>Joseph Reagle, W3C (Chair, Author/Editor)=20
  <LI>Ed Simon, XMLsec (Author)=20
  <LI>David Solo, Citigroup (Author/Editor)=20
  <LI>Petteri Stenius, Capslock=20
  <LI>Raghavan Srinivas, Sun=20
  <LI>Kent Tamura, IBM=20
  <LI>Winchel Todd Vincent III, GSU=20
  <LI>Carl Wallace, Corsec Security, Inc.=20
  <LI>Greg Whitehead, Signio Inc. </LI></UL>
<P>As are the Last Call comments from the following: </P>
<UL>
  <LI>Dan Connolly, W3C=20
  <LI>Paul Biron, Kaiser Permanente, on behalf of the <A=20
  href=3D"http://www.w3.org/XML/Schema.html">XML Schema WG</A>.=20
  <LI>Martin J. Duerst, W3C; and Masahiro Sekiguchi, Fujitsu; on behalf =
of the=20
  <A href=3D"http://www.w3.org/International/">Internationalization =
WG/IG</A>.=20
  <LI>Jonathan Marsh, Microsoft, on behalf of the <A=20
  href=3D"http://www.w3.org/Style/XSL/">Extensible Stylesheet Language =
WG</A>.=20
  </LI></UL>
<H2>2.0 <A id=3Dsec-Overview name=3Dsec-Overview>Signature Overview</A> =
and Examples=20
</H2>
<P>This section provides an overview and examples of XML digital =
signature=20
syntax. The specific processing is given in <A=20
href=3D"http://www.w3.org/TR/2000/WD-xmldsig-core-20000104/#sec-Processin=
g">Processing=20
Rules</A> (section 3). The formal syntax is found in <A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-CoreSyntax">Core =
Signature=20
Syntax</A> (section 4) and <A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-AdditionalSyntax">Addition=
al=20
Signature Syntax</A> (section 5). </P>
<P>In this section, an&nbsp;informal representation and examples are =
used to=20
describe the structure of the XML signature syntax. This representation =
and=20
examples may omit attributes, details and potential features that are =
fully=20
explained later. </P>
<P>XML Signatures are applied to arbitrary <A class=3Dlink-def=20
href=3D"http://www.w3.org/TR/xmldsig-core/#def-DataObject">digital =
content (data=20
objects)</A> via an indirection. Data objects are digested, the =
resulting value=20
is placed in an element (with other information) and that element is =
then=20
digested and cryptographically signed. XML digital signatures are =
represented by=20
the <CODE>Signature</CODE> element which has the following structure =
(where "?"=20
denotes zero or one occurrence; "+" denotes one or more occurrences; and =
"*"=20
denotes zero or more occurrences): </P><PRE class=3Dxml-example>  =
&lt;Signature ID?&gt;=20
     &lt;SignedInfo&gt;
       &lt;CanonicalizationMethod/&gt;
       &lt;SignatureMethod/&gt;
       (&lt;Reference URI? &gt;
         (&lt;Transforms&gt;)?
         &lt;DigestMethod&gt;
         &lt;DigestValue&gt;
       &lt;/Reference&gt;)+
     &lt;/SignedInfo&gt;
     &lt;SignatureValue&gt;=20
    (&lt;KeyInfo&gt;)?
    (&lt;Object ID?&gt;)*
   &lt;/Signature&gt;
</PRE>
<P>Signatures are related to <A class=3Dlink-def=20
href=3D"http://www.w3.org/TR/xmldsig-core/#def-DataObject">data =
objects</A> via=20
URIs [<A href=3D"http://www.w3.org/TR/xmldsig-core/#ref-URI">URI</A>]. =
Within an=20
XML document, signatures are related to local data objects via fragment=20
identifiers. Such local data can be included within an <A =
class=3Dlink-def=20
href=3D"http://www.w3.org/TR/xmldsig-core/#def-SignatureEnveloping">envel=
oping</A>=20
signature or can enclose an <A class=3Dlink-def=20
href=3D"http://www.w3.org/TR/xmldsig-core/#def-SignatureEnveloped">envelo=
ped</A>=20
signature. <A class=3Dlink-def=20
href=3D"http://www.w3.org/TR/xmldsig-core/#def-SignatureDetached">Detache=
d=20
signatures</A> are over external network resources or local data objects =
that=20
reside within the same XML document as sibling elements; in this case, =
the=20
signature is neither enveloping (signature is parent) nor enveloped =
(signature=20
is child). Since a <CODE>Signature</CODE> element (and its =
<CODE>Id</CODE>=20
attribute value/name) may co-exist or be combined with other elements =
(and their=20
IDs) within a single XML document, care should be taken in choosing =
names such=20
that there are no subsequent collisions that violate the <A=20
href=3D"http://www.w3.org/TR/REC-xml#id">ID uniqueness validity =
constraint</A> [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XML">XML</A>]. </P>
<H3>2.1 <A id=3Dsec-o-Simple name=3Dsec-o-Simple>Simple Example</A>=20
(<CODE>Signature</CODE>, <CODE>SignedInfo</CODE>, <CODE>Methods</CODE>, =
and=20
<CODE>Reference</CODE>)s </H3>
<P>The following example is a detached signature of the content of the =
HTML4 in=20
XML specification. </P><PRE class=3Dxml-example>   [s01] &lt;Signature =
Id=3D"MyFirstSignature"
 xmlns=3D"http://www.w3.org/2000/09/xmldsig#"&gt;=20
   [s02]   &lt;SignedInfo&gt;=20
   [s03]   &lt;CanonicalizationMethod
 Algorithm=3D"http://www.w3.org/TR/2001/REC-xml-c14n-20010315"/&gt;=20
   [s04]   &lt;SignatureMethod
 Algorithm=3D"http://www.w3.org/2000/09/xmldsig#dsa-sha1"/&gt;=20
   [s05]   &lt;Reference
 URI=3D"http://www.w3.org/TR/2000/REC-xhtml1-20000126/"&gt;=20
   [s06]     &lt;Transforms&gt;=20
   [s07]       &lt;Transform =
Algorithm=3D"http://www.w3.org/TR/2001/REC-xml-c14n-20010315"/&gt;=20
   [s08]     &lt;/Transforms&gt;=20
   [s09]     &lt;DigestMethod =
Algorithm=3D"http://www.w3.org/2000/09/xmldsig#sha1"/&gt;=20
   [s10]     =
&lt;DigestValue&gt;j6lwx3rvEPO0vKtMup4NbeVu8nk=3D&lt;/DigestValue&gt;=20
   [s11]   &lt;/Reference&gt;=20
   [s12] &lt;/SignedInfo&gt;=20
   [s13]   =
&lt;SignatureValue&gt;MC0CFFrVLtRlk=3D...&lt;/SignatureValue&gt;=20
   [s14]   &lt;KeyInfo&gt;=20
   [s15a]    &lt;KeyValue&gt;
   [s15b]      &lt;DSAKeyValue&gt;=20
   [s15c]        =
&lt;P&gt;...&lt;/P&gt;&lt;Q&gt;...&lt;/Q&gt;&lt;G&gt;...&lt;/G&gt;&lt;Y&g=
t;...&lt;/Y&gt;=20
   [s15d]      &lt;/DSAKeyValue&gt;=20
   [s15e]    &lt;/KeyValue&gt;=20
   [s16]   &lt;/KeyInfo&gt;=20
   [s17] &lt;/Signature&gt;
</PRE>
<P><CODE>[s02-12]</CODE> The required <CODE>SignedInfo</CODE> element is =
the=20
information that is actually signed. <A class=3Dlink-def=20
href=3D"http://www.w3.org/TR/xmldsig-core/#def-ValidationCore">Core =
validation</A>=20
of <CODE>SignedInfo</CODE> consists of two mandatory processes: <A=20
class=3Dlink-def=20
href=3D"http://www.w3.org/TR/xmldsig-core/#def-ValidationSignature">valid=
ation of=20
the signature</A> over <CODE>SignedInfo</CODE> and <A class=3Dlink-def=20
href=3D"http://www.w3.org/TR/xmldsig-core/#def-ValidationReference">valid=
ation of=20
each <CODE>Reference</CODE></A> digest within <CODE>SignedInfo</CODE>. =
Note that=20
the algorithms used in calculating the <CODE>SignatureValue</CODE> are =
also=20
included in the signed information while the <CODE>SignatureValue</CODE> =
element=20
is outside <CODE>SignedInfo</CODE>. </P>
<P><CODE>[s03]</CODE> The <CODE>CanonicalizationMethod</CODE> is the =
algorithm=20
that is used to canonicalize the <CODE>SignedInfo</CODE> element before =
it is=20
digested as part of the signature operation. Note that this example, and =
all=20
examples in this specification, are not in canonical form. </P>
<P><CODE>[s04]</CODE> The <CODE>SignatureMethod</CODE> is the algorithm =
that is=20
used to convert the canonicalized <CODE>SignedInfo</CODE> into the=20
<CODE>SignatureValue</CODE>. It is a combination of a digest algorithm =
and a key=20
dependent algorithm and possibly other algorithms such as padding, for =
example=20
RSA-SHA1. The algorithm names are signed to resist attacks based on =
substituting=20
a weaker algorithm. To promote application interoperability we specify a =
set of=20
signature algorithms that MUST be implemented, though their use is at =
the=20
discretion of the signature creator. We specify additional algorithms as =

RECOMMENDED or OPTIONAL for implementation; the design also permits =
arbitrary=20
user specified algorithms. </P>
<P><CODE>[s05-11]</CODE> Each <CODE>Reference</CODE> element includes =
the digest=20
method and resulting digest value calculated over the identified data =
object. It=20
also may include transformations that produced the input to the digest=20
operation. A data object is signed by computing its digest value and a =
signature=20
over that value. The signature is later checked via <A class=3Dlink-def=20
href=3D"http://www.w3.org/TR/xmldsig-core/#def-ValidationReference">refer=
ence</A>=20
and <A class=3Dlink-def=20
href=3D"http://www.w3.org/TR/xmldsig-core/#def-ValidationSignature">signa=
ture=20
validation</A>. </P>
<P><CODE>[s14-16]</CODE> <CODE>KeyInfo</CODE> indicates the key to be =
used to=20
validate the signature. Possible forms for identification include =
certificates,=20
key names, and key agreement algorithms and information -- we define =
only a few.=20
<CODE>KeyInfo</CODE> is optional for two reasons. First, the signer may =
not wish=20
to reveal key information to all document processing parties. Second, =
the=20
information may be known within the application's context and need not =
be=20
represented explicitly. Since <CODE>KeyInfo</CODE> is outside of=20
<CODE>SignedInfo</CODE>, if the signer wishes to bind the keying =
information to=20
the signature, a <CODE>Reference</CODE> can easily identify and include =
the=20
<CODE>KeyInfo</CODE> as part of the signature. </P>
<H3>2.1.1 More on <A id=3Dsec-o-Reference=20
name=3Dsec-o-Reference><CODE>Reference</CODE></A> </H3><PRE =
class=3Dxml-example>   [s05]   &lt;Reference =
URI=3D"http://www.w3.org/TR/2000/REC-xhtml1-20000126/"&gt;=20
   [s06]     &lt;Transforms&gt;=20
   [s07]       &lt;Transform =
Algorithm=3D"http://www.w3.org/TR/2001/REC-xml-c14n-20010315"/&gt;=20
   [s08]     &lt;/Transforms&gt;=20
   [s09]     &lt;DigestMethod =
Algorithm=3D"http://www.w3.org/2000/09/xmldsig#sha1"/&gt;=20
   [s10]     =
&lt;DigestValue&gt;j6lwx3rvEPO0vKtMup4NbeVu8nk=3D&lt;/DigestValue&gt;=20
   [s11]   &lt;/Reference&gt;
</PRE>
<P><CODE>[s05]</CODE> The optional <CODE>URI</CODE> attribute of=20
<CODE>Reference</CODE> identifies the data object to be signed. This =
attribute=20
may be omitted on at most one <CODE>Reference</CODE> in a=20
<CODE>Signature</CODE>. (This limitation is imposed in order to ensure =
that=20
references and objects may be matched unambiguously.) </P>
<P><CODE>[s05-08]</CODE> This identification, along with the transforms, =
is a=20
description provided by the signer on how they obtained the signed data =
object=20
in the form it was digested (i.e. the digested content). The verifier =
may obtain=20
the digested content in another method so long as the digest verifies. =
In=20
particular, the verifier may obtain the content from a different =
location such=20
as a local store than that specified in the <CODE>URI</CODE>. </P>
<P><CODE>[s06-08] Transforms</CODE> is an optional ordered list of =
processing=20
steps that were applied to the resource's content before it was =
digested.=20
Transforms can include operations such as canonicalization, =
encoding/decoding=20
(including compression/inflation), XSLT, XPath, XML schema validation, =
or=20
XInclude. XPath transforms permit the signer to derive an XML document =
that=20
omits portions of the source document. Consequently those excluded =
portions can=20
change without affecting signature validity. For example, if the =
resource being=20
signed encloses the signature itself, such a transform must be used to =
exclude=20
the signature value from its own computation. If no =
<CODE>Transforms</CODE>=20
element is present, the resource's content is digested directly. While =
the=20
Working Group has specified mandatory (and optional) canonicalization =
and=20
decoding algorithms, user specified transforms are permitted. </P>
<P><CODE>[s09-10] DigestMethod</CODE> is the algorithm applied to the =
data after=20
<CODE>Transforms</CODE> is applied (if specified) to yield the=20
<CODE>DigestValue</CODE>. The signing of the <CODE>DigestValue</CODE> is =
what=20
binds a resources content to the signer's key. </P>
<H3>2.2 Extended Example (<CODE>Object</CODE> and <A =
id=3Dsec-o-SignatureProperty=20
name=3Dsec-o-SignatureProperty><CODE>SignatureProperty</CODE></A>) </H3>
<P>This specification does not address mechanisms for making statements =
or=20
assertions. Instead, this document defines what it means for something =
to be=20
signed by an XML Signature (<A class=3Dlink-def=20
href=3D"http://www.w3.org/TR/xmldsig-core/#def-Integrity">integrity</A>, =
<A=20
class=3Dlink-def=20
href=3D"http://www.w3.org/TR/xmldsig-core/#def-AuthenticationMessage">mes=
sage=20
authentication</A>, and/or <A class=3Dlink-def=20
href=3D"http://www.w3.org/TR/xmldsig-core/#def-AuthenticationSigner">sign=
er=20
authentication</A>). Applications that wish to represent other semantics =
must=20
rely upon other technologies, such as [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XML">XML</A>, <A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-RDF">RDF</A>]. For =
instance, an=20
application might use a <CODE>foo:assuredby</CODE> attribute within its =
own=20
markup to reference a <CODE>Signature</CODE> element. Consequently, it's =
the=20
application that must understand and know how to make trust decisions =
given the=20
validity of the signature and the meaning of <CODE>assuredby</CODE> =
syntax. We=20
also define a <CODE>SignatureProperties</CODE> element type for the =
inclusion of=20
assertions about the signature itself (e.g., signature semantics, the =
time of=20
signing or the serial number of hardware used in cryptographic =
processes). Such=20
assertions may be signed by including a <CODE>Reference</CODE> for the=20
<CODE>SignatureProperties</CODE> in <CODE>SignedInfo</CODE>. While the =
signing=20
application should be very careful about what it signs (it should =
understand=20
what is in the <CODE>SignatureProperty</CODE>) a receiving application =
has no=20
obligation to understand that semantic (though its parent trust engine =
may wish=20
to). Any content about the signature generation may be located within =
the=20
<CODE>SignatureProperty</CODE> element. The mandatory =
<CODE>Target</CODE>=20
attribute references the <CODE>Signature</CODE> element to which the =
property=20
applies. </P>
<P>Consider the preceding example with an additional reference to a =
local=20
<CODE>Object</CODE> that includes a <CODE>SignatureProperty</CODE> =
element.=20
(Such a signature would not only be <A class=3Dlink-def=20
href=3D"http://www.w3.org/TR/xmldsig-core/#def-SignatureDetached">detache=
d</A>=20
<CODE>[p02]</CODE> but <A class=3Dlink-def=20
href=3D"http://www.w3.org/TR/xmldsig-core/#def-SignatureEnveloping">envel=
oping</A>=20
<CODE>[p03]</CODE>.) </P><PRE class=3Dxml-example>   [   ]  =
&lt;Signature Id=3D"MySecondSignature" ...&gt;
   [p01]  &lt;SignedInfo&gt; =20
   [   ]   ... =20
   [p02]   &lt;Reference =
URI=3D"http://www.w3.org/TR/xml-stylesheet/"&gt;  =20
   [   ]   ...=20
   [p03]   &lt;Reference URI=3D"#AMadeUpTimeStamp" =20
   [p04]         =
Type=3D"http://www.w3.org/2000/09/xmldsig#SignatureProperties"&gt; =20
   [p05]    &lt;DigestMethod =
Algorithm=3D"http://www.w3.org/2000/09/xmldsig#sha1"/&gt;   =20
   [p06]    =
&lt;DigestValue&gt;k3453rvEPO0vKtMup4NbeVu8nk=3D&lt;/DigestValue&gt;
   [p07]   &lt;/Reference&gt;   =20
   [p08]  &lt;/SignedInfo&gt; =20
   [p09]  ... =20
   [p10]  &lt;Object&gt;=20
   [p11]   &lt;SignatureProperties&gt;=20
   [p12]     &lt;SignatureProperty Id=3D"AMadeUpTimeStamp" =
Target=3D"#MySecondSignature"&gt;=20
   [p13]        &lt;timestamp =
xmlns=3D"http://www.ietf.org/rfcXXXX.txt"&gt; =20
   [p14]          &lt;date&gt;19990908&lt;/date&gt; =20
   [p15]          &lt;time&gt;14:34:34:34&lt;/time&gt; =20
   [p16]        &lt;/timestamp&gt; =20
   [p17]     &lt;/SignatureProperty&gt;=20
   [p18]   &lt;/SignatureProperties&gt;=20
   [p19]  &lt;/Object&gt; =20
   [p20]&lt;/Signature&gt;
</PRE>
<P><CODE>[p04]</CODE> The optional <CODE>Type</CODE> attribute of=20
<CODE>Reference</CODE> provides information about the resource =
identified by the=20
<CODE>URI</CODE>. In particular, it can indicate that it is an=20
<CODE>Object</CODE>, <CODE>SignatureProperty</CODE>, or =
<CODE>Manifest</CODE>=20
element. This can be used by applications to initiate special processing =
of some=20
<CODE>Reference</CODE> elements. References to an XML data element =
within an=20
<CODE>Object</CODE> element SHOULD identify the actual element pointed =
to. Where=20
the element content is not XML (perhaps it is binary or encoded data) =
the=20
reference should identify the <CODE>Object</CODE> and the =
<CODE>Reference</CODE>=20
<CODE>Type</CODE>, if given, SHOULD indicate <CODE>Object</CODE>. Note =
that=20
<CODE>Type</CODE> is advisory and no action based on it or checking of =
its=20
correctness is required by core behavior. </P>
<P><CODE>[p10]</CODE> <CODE>Object</CODE> is an optional element for =
including=20
data objects within the signature element or elsewhere. The =
<CODE>Object</CODE>=20
can be optionally typed and/or encoded. </P>
<P><CODE>[p11-18]</CODE> Signature properties, such as time of signing, =
can be=20
optionally signed by identifying them from within a =
<CODE>Reference</CODE>.=20
(These properties are traditionally called signature "attributes" =
although that=20
term has no relationship to the XML term "attribute".) </P>
<H3>2.3 Extended Example (<CODE>Object</CODE> and <A id=3Dsec-o-Manifest =

name=3Dsec-o-Manifest><CODE>Manifest</CODE></A>) </H3>
<P>The <CODE>Manifest</CODE> element is provided to meet additional =
requirements=20
not directly addressed by the mandatory parts of this specification. Two =

requirements and the way the <CODE>Manifest</CODE> satisfies them =
follow. </P>
<P>First, applications frequently need to efficiently sign multiple data =
objects=20
even where the signature operation itself is an expensive public key =
signature.=20
This requirement can be met by including multiple <CODE>Reference</CODE> =

elements within <CODE>SignedInfo</CODE> since the inclusion of each =
digest=20
secures the data digested. However, some applications may not want the =
<A=20
class=3Dlink-def =
href=3D"http://www.w3.org/TR/xmldsig-core/#def-ValidationCore">core=20
validation</A> behavior associated with this approach because it =
requires every=20
<CODE>Reference</CODE> within <CODE>SignedInfo</CODE> to undergo <A=20
class=3Dlink-def=20
href=3D"http://www.w3.org/TR/xmldsig-core/#def-ValidationReference">refer=
ence=20
validation</A> -- the <CODE>DigestValue</CODE> elements are checked. =
These=20
applications may wish to reserve reference validation decision logic to=20
themselves. For example, an application might receive a <A =
class=3Dlink-def=20
href=3D"http://www.w3.org/TR/xmldsig-core/#def-ValidationSignature">signa=
ture=20
valid</A> <CODE>SignedInfo</CODE> element that includes three=20
<CODE>Reference</CODE> elements. If a single <CODE>Reference</CODE> =
fails (the=20
identified data object when digested does not yield the specified=20
<CODE>DigestValue</CODE>) the signature would fail <A class=3Dlink-def=20
href=3D"http://www.w3.org/TR/xmldsig-core/#def-ValidationCore">core=20
validation</A>. However, the application may wish to treat the signature =
over=20
the two valid <CODE>Reference</CODE> elements as valid or take different =
actions=20
depending on which fails.&nbsp; To accomplish this, =
<CODE>SignedInfo</CODE>=20
would reference a <CODE>Manifest</CODE> element that contains one or =
more=20
<CODE>Reference</CODE> elements (with the same structure as those in=20
<CODE>SignedInfo</CODE>). Then, reference validation of the=20
<CODE>Manifest</CODE> is under application control. </P>
<P>Second, consider an application where many signatures (using =
different keys)=20
are applied to a large number of documents. An inefficient solution is =
to have a=20
separate signature (per key) repeatedly applied to a large=20
<CODE>SignedInfo</CODE> element (with many <CODE>Reference</CODE>s); =
this is=20
wasteful and redundant. A more efficient solution is to include many =
references=20
in a single <CODE>Manifest</CODE> that is then referenced from multiple=20
<CODE>Signature</CODE> elements. </P>
<P>The example below includes a <CODE>Reference</CODE> that signs a=20
<CODE>Manifest</CODE> found within the <CODE>Object</CODE> element. =
</P><PRE class=3Dxml-example>   [   ] ...
   [m01]   &lt;Reference URI=3D"#MyFirstManifest"
   [m02]     Type=3D"http://www.w3.org/2000/09/xmldsig#Manifest"&gt;
   [m03]     &lt;DigestMethod =
Algorithm=3D"http://www.w3.org/2000/09/xmldsig#sha1"/&gt;=20
   [m04]     =
&lt;DigestValue&gt;345x3rvEPO0vKtMup4NbeVu8nk=3D&lt;/DigestValue&gt;=20
   [m05]   &lt;/Reference&gt; =20
   [   ] ...
   [m06] &lt;Object&gt;
   [m07]   &lt;Manifest Id=3D"MyFirstManifest"&gt;
   [m08]     &lt;Reference&gt;
   [m09]     ...
   [m10]     &lt;/Reference&gt;  =20
   [m11]     &lt;Reference&gt;
   [m12]     ...
   [m13]     &lt;/Reference&gt;
   [m14]   &lt;/Manifest&gt;
   [m15] &lt;/Object&gt;
</PRE>
<H2>3.0 <A id=3Dsec-Processing name=3Dsec-Processing>Processing</A> =
Rules </H2>
<P>The sections below describe the operations to be performed as part of =

signature generation and validation. </P>
<H3>3.1 Core <A id=3Dsec-CoreGeneration =
name=3Dsec-CoreGeneration>Generation</A>=20
</H3>
<P>The REQUIRED steps include the generation of <CODE>Reference</CODE> =
elements=20
and the <CODE>SignatureValue</CODE> over <CODE>SignedInfo</CODE>. </P>
<H4>3.1.1 <A id=3Dsec-ReferenceGeneration =
name=3Dsec-ReferenceGeneration>Reference=20
Generation</A> </H4>
<P>For each data object being signed: </P>
<OL>
  <LI>Apply the <CODE>Transforms</CODE>, as determined by the =
application, to=20
  the data object.=20
  <LI>Calculate the digest value over the resulting data object.=20
  <LI>Create a <CODE>Reference</CODE> element, including the (optional)=20
  identification of the data object, any (optional) transform elements, =
the=20
  digest algorithm and the <CODE>DigestValue</CODE>. (Note, it is the =
canonical=20
  form of these references that are signed in 3.1.2 and validated in =
3.2.1 .)=20
  </LI></OL>
<H4>3.1.2 <A id=3Dsec-SignatureGeneration =
name=3Dsec-SignatureGeneration>Signature=20
Generation</A> </H4>
<OL>
  <LI>Create <CODE>SignedInfo</CODE> element with =
<CODE>SignatureMethod</CODE>,=20
  <CODE>CanonicalizationMethod</CODE> and <CODE>Reference</CODE>(s).=20
  <LI>Canonicalize and then calculate the <CODE>SignatureValue</CODE> =
over=20
  <CODE>SignedInfo</CODE> based on algorithms specified in=20
  <CODE>SignedInfo</CODE>.=20
  <LI>Construct the <CODE>Signature</CODE> element that includes=20
  <CODE>SignedInfo</CODE>, <CODE>Object</CODE>(s) (if desired, encoding =
may be=20
  different than that used for signing), <CODE>KeyInfo</CODE> (if =
required), and=20
  <CODE>SignatureValue</CODE>.=20
  <P>Note, if the <CODE>Signature</CODE> includes same-document =
references, [<A=20
  href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XML">XML</A>] or [<A=20
  =
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XML-schema">XML-schema</A>=
]=20
  validation of the document might introduce changes that break the =
signature.=20
  Consequently, applications should be careful to consistently process =
the=20
  document or refrain from using external contributions (e.g., defaults =
and=20
  entities). </P></LI></OL>
<H3>3.2 Core <A id=3Dsec-CoreValidation =
name=3Dsec-CoreValidation>Validation</A>=20
</H3>
<P>The REQUIRED steps of <A class=3Dlink-def=20
href=3D"http://www.w3.org/TR/xmldsig-core/#def-ValidationCore">core =
validation</A>=20
include (1) <A class=3Dlink-def=20
href=3D"http://www.w3.org/TR/xmldsig-core/#def-ValidationReference">refer=
ence=20
validation</A>, the verification of the digest contained in each=20
<CODE>Reference</CODE> in <CODE>SignedInfo</CODE>, and (2) the =
cryptographic <A=20
class=3Dlink-def=20
href=3D"http://www.w3.org/TR/xmldsig-core/#def-ValidationSignature">signa=
ture=20
validation</A> of the signature calculated over <CODE>SignedInfo</CODE>. =
</P>
<P>Note, there may be valid signatures that some signature applications =
are=20
unable to validate. Reasons for this include failure to implement =
optional parts=20
of this specification, inability or unwillingness to execute specified=20
algorithms, or inability or unwillingness to dereference specified URIs =
(some=20
URI schemes may cause undesirable side effects), etc. </P>
<P>Comparison of values in reference and signature validation are over =
the=20
numeric (e.g., integer) or decoded octet sequence of the value. =
Different=20
implementations may produce different encoded digest and signature =
values when=20
processing the same resources because of variances in their encoding, =
such as=20
accidental white space. But if one uses numeric or octet comparison =
(choose one)=20
on both the stated and computed values these problems are eliminated. =
</P>
<H4>3.2.1 <A id=3Dsec-ReferenceValidation =
name=3Dsec-ReferenceValidation>Reference=20
Validation</A> </H4>
<OL>
  <LI>Canonicalize the <CODE>SignedInfo</CODE> element based on the=20
  <CODE>CanonicalizationMethod</CODE> in <CODE>SignedInfo</CODE>.=20
  <LI>For each <CODE>Reference</CODE> in <CODE>SignedInfo</CODE>:=20
  <OL>
    <LI>Obtain the data object to be digested. (For example, the =
signature=20
    application may dereference the <CODE>URI</CODE> and execute=20
    <CODE>Transforms</CODE> provided by the signer in the =
<CODE>Reference</CODE>=20
    element, or it may obtain the content through other means such as a =
local=20
    cache.)=20
    <LI>Digest the resulting data object using the =
<CODE>DigestMethod</CODE>=20
    specified in its <CODE>Reference</CODE> specification.=20
    <LI>Compare the generated digest value against =
<CODE>DigestValue</CODE> in=20
    the <CODE>SignedInfo</CODE> <CODE>Reference</CODE>; if there is any=20
    mismatch, validation fails. </LI></OL></LI></OL>
<P>Note, <CODE>SignedInfo</CODE> is canonicalized in step 1. The =
application=20
must ensure that the CanonicalizationMethod has no dangerous side =
affects, such=20
as rewriting URIs, (see <CODE><A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-CanonicalizationMethod-NOT=
E">CanonicalizationMethod</A></CODE>=20
(section 4.3)) and that it <A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-See">Sees What is =
Signed</A>, which=20
is the canonical form. </P>
<H4>3.2.2 <A id=3Dsec-SignatureValidation =
name=3Dsec-SignatureValidation>Signature=20
Validation</A> </H4>
<OL>
  <LI>Obtain the keying information from <CODE><A=20
  =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo">KeyInfo</A></CODE=
> or=20
  from an external source.=20
  <LI>Obtain the canonical form of the <CODE>SignatureMethod</CODE> =
using the=20
  <CODE>CanonicalizationMethod</CODE> and use the&nbsp;result (and =
previously=20
  obtained <CODE>KeyInfo</CODE>) to confirm the =
<CODE>SignatureValue</CODE> over=20
  the <CODE>SignedInfo</CODE> element. </LI></OL>
<P>Note, <CODE><A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo">KeyInfo</A></CODE=
> (or=20
some transformed version thereof) may be signed via a =
<CODE>Reference</CODE>=20
element. Transformation and validation of this reference (3.2.1) is =
orthogonal=20
to Signature Validation which uses the <CODE>KeyInfo</CODE> as parsed. =
</P>
<P>Additionally, the <CODE>SignatureMethod</CODE> URI may have been =
altered by=20
the canonicalization of <CODE>SignedInfo</CODE> (e.g., absolutization of =

relative URIs) and it is the canonical form that MUST be used. However, =
the=20
required canonicalization [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XML-C14N">XML-C14N</A>] =
of this=20
specification does not change URIs. </P>
<H2>4.0 <A id=3Dsec-CoreSyntax name=3Dsec-CoreSyntax>Core Signature =
Syntax</A> </H2>
<P>The general structure of an XML signature is described in <A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-Overview">Signature =
Overview</A>=20
(section 2). This section provides detailed syntax of the core signature =

features. Features described in this section are mandatory to implement =
unless=20
otherwise indicated. The syntax is defined via DTDs and [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XML-schema">XML-Schema</A>=
] with=20
the following XML preamble, declaration, and internal entity. </P><PRE =
class=3Dxml-dtd>   Schema Definition:

   &lt;?xml version=3D"1.0" encoding=3D"utf-8"?&gt;
   &lt;!DOCTYPE schema
     PUBLIC "-//W3C//DTD XMLSchema 200102//EN" =
"http://www.w3.org/2001/XMLSchema.dtd"
    [
      &lt;!ATTLIST schema=20
        xmlns:ds CDATA #FIXED "http://www.w3.org/2000/09/xmldsig#"&gt;
      &lt;!ENTITY dsig 'http://www.w3.org/2000/09/xmldsig#'&gt;=20
      &lt;!ENTITY % p ''&gt;
      &lt;!ENTITY % s ''&gt;
     ]&gt;

   &lt;schema xmlns=3D"http://www.w3.org/2001/XMLSchema"
           xmlns:ds=3D"http://www.w3.org/2000/09/xmldsig#"
           targetNamespace=3D"http://www.w3.org/2000/09/xmldsig#"
           version=3D"0.1" elementFormDefault=3D"qualified"&gt;
</PRE><PRE class=3Dxml-dtd>   DTD:

   &lt;!--

   The following entity declarations enable external/flexible content in
   the Signature content model.

   #PCDATA emulates schema:string; when combined with element types it
   emulates schema mixed=3D"true".

   %foo.ANY permits the user to include their own element types from
   other namespaces, for example:
     &lt;!ENTITY % KeyValue.ANY '| ecds:ECDSAKeyValue'&gt;
     ...
     &lt;!ELEMENT ecds:ECDSAKeyValue (#PCDATA)  &gt;

   --&gt;

   &lt;!ENTITY % Object.ANY ''&gt;
   &lt;!ENTITY % Method.ANY ''&gt;
   &lt;!ENTITY % Transform.ANY ''&gt;
   &lt;!ENTITY % SignatureProperty.ANY ''&gt;
   &lt;!ENTITY % KeyInfo.ANY ''&gt;
   &lt;!ENTITY % KeyValue.ANY ''&gt;
   &lt;!ENTITY % PGPData.ANY ''&gt;
   &lt;!ENTITY % X509Data.ANY ''&gt;
   &lt;!ENTITY % SPKIData.ANY ''&gt;
</PRE>
<H4>4.0.1 The ds:<A id=3Dsec-CryptoBinary =
name=3Dsec-CryptoBinary>CryptoBinary</A>=20
Simple Type </H4>
<P>This specification defines the <CODE>ds:CryptoBinary</CODE> simple =
type for=20
representing arbitrary-length integers (e.g. "bignums") in XML as octet =
strings.=20
The integer value is first converted to a "big endian" bitstring. The =
bitstring=20
is then padded with leading zero bits so that the total number of bits =
=3D=3D 0 mod=20
8 (so that there are an integral number of octets). If the bitstring =
contains=20
entire leading octets that are zero, these are removed (so the =
high-order octet=20
is always non-zero). This octet string is then base64 [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-MIME">MIME</A>] encoded. =
(The=20
conversion from integer to octet string is equivalent to IEEE 1363's =
I2OSP [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-1363">1363</A>] with =
minimal=20
length). </P>
<P>This type is used by "bignum" values such as <CODE>RSAKeyValue</CODE> =
and=20
<CODE>DSAKeyValue</CODE>. If a value can be of type =
<CODE>base64Binary</CODE> or=20
<CODE>ds:CryptoBinary</CODE> they are defined as <A=20
href=3D"http://www.w3.org/TR/xmlschema-2/#base64Binary"><CODE>base64Binar=
y</CODE></A>.=20
For example, if the signature algorithm is RSA or DSA then=20
<CODE>SignatureValue</CODE> represents a bignum and could be=20
<CODE>ds:CryptoBinary</CODE>. However, if HMAC-SHA1 is the signature =
algorithm=20
then <CODE>SignatureValue</CODE> could have leading zero octets that =
must be=20
preserved. Thus <CODE>SignatureValue</CODE> is generically defined as of =
type=20
<CODE>base64Binary</CODE>. </P><PRE class=3Dxml-dtd>   Schema =
Definition:

   &lt;simpleType name=3D"CryptoBinary"&gt;
     &lt;restriction base=3D"base64Binary"&gt;
     &lt;/restriction&gt;
   &lt;/simpleType&gt;
</PRE>
<H3>4.1 The <A id=3Dsec-Signature =
name=3Dsec-Signature><CODE>Signature</CODE></A>=20
element </H3>
<P>The <CODE>Signature</CODE> element is the root element of an XML =
Signature.=20
Implementation MUST generate <A=20
href=3D"http://www.w3.org/TR/2000/WD-xmlschema-1-20000407/#cvc-elt-lax">l=
axly=20
schema valid</A> [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XML-schema">XML-schema</A>=
]=20
<CODE>Signature</CODE> elements as specified by the following schema: =
</P><PRE class=3Dxml-dtd>   Schema Definition:

   &lt;element name=3D"Signature" type=3D"ds:SignatureType"/&gt;
   &lt;complexType name=3D"SignatureType"&gt;
     &lt;sequence&gt;=20
       &lt;element ref=3D"ds:SignedInfo"/&gt;=20
       &lt;element ref=3D"ds:SignatureValue"/&gt;=20
       &lt;element ref=3D"ds:KeyInfo" minOccurs=3D"0"/&gt;=20
       &lt;element ref=3D"ds:Object" minOccurs=3D"0" =
maxOccurs=3D"unbounded"/&gt;=20
     &lt;/sequence&gt; =20
     &lt;attribute name=3D"Id" type=3D"ID" use=3D"optional"/&gt;
   &lt;/complexType&gt;
</PRE><PRE class=3Dxml-dtd>   DTD:

   &lt;!ELEMENT Signature (SignedInfo, SignatureValue, KeyInfo?, =
Object*)  &gt;
   &lt;!ATTLIST Signature =20
    xmlns   CDATA   #FIXED 'http://www.w3.org/2000/09/xmldsig#'
    Id      ID  #IMPLIED &gt;
</PRE>
<H3>4.2 The <A id=3Dsec-SignatureValue=20
name=3Dsec-SignatureValue><CODE>SignatureValue</CODE></A> Element </H3>
<P>The <CODE>SignatureValue</CODE> element contains the actual value of =
the=20
digital signature; it is always encoded using base64 [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-MIME">MIME</A>]. While we =
identify=20
two <CODE>SignatureMethod</CODE> algorithms, one mandatory and one =
optional to=20
implement, user specified algorithms may be used as well. </P><PRE =
class=3Dxml-dtd>   Schema Definition:

   &lt;element name=3D"SignatureValue" =
type=3D"ds:SignatureValueType"/&gt;=20
   &lt;complexType name=3D"SignatureValueType"&gt;
     &lt;simpleContent&gt;
       &lt;extension base=3D"base64Binary"&gt;
         &lt;attribute name=3D"Id" type=3D"ID" use=3D"optional"/&gt;
       &lt;/extension&gt;
     &lt;/simpleContent&gt;
   &lt;/complexType&gt;
</PRE><PRE class=3Dxml-dtd>   DTD:

   &lt;!ELEMENT SignatureValue (#PCDATA) &gt;
   &lt;!ATTLIST SignatureValue =20
             Id  ID      #IMPLIED&gt;
</PRE>
<H3>4.3 The <A id=3Dsec-SignedInfo =
name=3Dsec-SignedInfo><CODE>SignedInfo</CODE></A>=20
Element </H3>
<P>The structure of <CODE>SignedInfo</CODE> includes the =
canonicalization=20
algorithm, a signature algorithm, and one or more references. The=20
<CODE>SignedInfo</CODE> element may contain an optional ID attribute =
that will=20
allow it to be referenced by other signatures and objects. </P>
<P><CODE>SignedInfo</CODE> does not include explicit signature or digest =

properties (such as calculation time, cryptographic device serial =
number, etc.).=20
If an application needs to associate properties with the signature or =
digest, it=20
may include such information in a <CODE>SignatureProperties</CODE> =
element=20
within an <CODE>Object</CODE> element. </P><PRE class=3Dxml-dtd>   =
Schema Definition:

   &lt;element name=3D"SignedInfo" type=3D"ds:SignedInfoType"/&gt;=20
   &lt;complexType name=3D"SignedInfoType"&gt;
     &lt;sequence&gt;=20
       &lt;element ref=3D"ds:CanonicalizationMethod"/&gt;
       &lt;element ref=3D"ds:SignatureMethod"/&gt;=20
       &lt;element ref=3D"ds:Reference" maxOccurs=3D"unbounded"/&gt;=20
     &lt;/sequence&gt; =20
     &lt;attribute name=3D"Id" type=3D"ID" use=3D"optional"/&gt;=20
   &lt;/complexType&gt;
</PRE><PRE class=3Dxml-dtd>   DTD:

   &lt;!ELEMENT SignedInfo (CanonicalizationMethod,=20
    SignatureMethod,  Reference+)  &gt;
   &lt;!ATTLIST SignedInfo =20
    Id   ID      #IMPLIED
</PRE>
<H4>4.3.1 The <A id=3Dsec-CanonicalizationMethod=20
name=3Dsec-CanonicalizationMethod><CODE>CanonicalizationMethod</CODE></A>=
 Element=20
</H4>
<P><CODE>CanonicalizationMethod</CODE> is a required element that =
specifies the=20
canonicalization algorithm applied to the <CODE>SignedInfo</CODE> =
element prior=20
to performing signature calculations. This element uses the general =
structure=20
for algorithms described in <A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-AlgID">Algorithm =
Identifiers and=20
Implementation Requirements</A> (section 6.1). Implementations MUST =
support the=20
REQUIRED <A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-c14nAlg">canonicalization =

algorithms</A>. </P>
<P>Alternatives to the REQUIRED <A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-c14nAlg">canonicalization =

algorithms</A> (section 6.5), such as <A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-Canonical">Canonical XML =
with=20
Comments</A> (section 6.5.1) or a minimal canonicalization (such as CRLF =
and=20
charset normalization), may be explicitly specified but are NOT =
REQUIRED.=20
Consequently, their use may not interoperate with other applications =
that do not=20
support the specified algorithm (see <A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-XML-Canonicalization">XML =

Canonicalization and Syntax Constraint Considerations</A>, section 7). =
Security=20
issues may also arise in the treatment of entity processing and comments =
if=20
non-XML aware canonicalization algorithms are not properly constrained =
(see=20
section 8.2: <A =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-Seen">Only What is=20
"Seen" Should be Signed</A>). </P>
<P>The way in which the <CODE>SignedInfo</CODE> element is presented to =
the=20
canonicalization method is dependent on that method. The following =
applies to=20
algorithms which process XML as nodes or characters: </P>
<UL>
  <LI>XML based canonicalization implementations MUST be provided with a =
[<A=20
  href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XPath">XPath</A>] =
node-set=20
  originally formed from the document containing the =
<CODE>SignedInfo</CODE> and=20
  currently indicating the <CODE>SignedInfo</CODE>, its descendants, and =
the=20
  attribute and namespace nodes of <CODE>SignedInfo</CODE> and its =
descendant=20
  elements.=20
  <LI>Text based canonicalization algorithms (such as CRLF and charset=20
  normalization) should be provided with the UTF-8 octets that represent =
the=20
  well-formed SignedInfo element, from the first character to the last =
character=20
  of the XML representation, inclusive. This includes the entire text of =
the=20
  start and end tags of the SignedInfo element as well as all descendant =
<A=20
  href=3D"http://www.w3.org/TR/1998/REC-xml-19980210#syntax">markup and =
character=20
  data</A> (i.e., the <A=20
  href=3D"http://www.w3.org/TR/1998/REC-xml-19980210#dt-text">text</A>) =
between=20
  those tags. Use of text based canonicalization of SignedInfo is NOT=20
  RECOMMENDED. </LI></UL>
<P>We recommend applications that implement a text-based instead of =
XML-based=20
canonicalization -- such as resource constrained apps -- generate =
canonicalized=20
XML as their output serialization so as to mitigate interoperability and =

security concerns. For instance, such an implementation SHOULD (at =
least)=20
generate <A href=3D"http://www.w3.org/TR/REC-xml#sec-rmd">standalone</A> =
XML=20
instances [<A =
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XML">XML</A>]. </P>
<P><A id=3Dsec-CanonicalizationMethod-NOTE=20
name=3Dsec-CanonicalizationMethod-NOTE>NOTE</A>: The signature =
application must=20
exercise great care in accepting and executing an arbitrary=20
<CODE>CanonicalizationMethod</CODE>. For example, the canonicalization =
method=20
could rewrite the URIs of the <CODE>Reference</CODE>s being validated. =
Or, the=20
method could massively transform <CODE>SignedInfo</CODE> so that =
validation=20
would always succeed (i.e., converting it to a trivial signature with a =
known=20
key over trivial data). Since <CODE>CanonicalizationMethod</CODE> is =
inside=20
<CODE>SignedInfo</CODE>, in the resulting canonical form it could erase =
itself=20
from <CODE>SignedInfo</CODE> or modify the <CODE>SignedInfo</CODE> =
element so=20
that it appears that a different canonicalization function was used! =
Thus a=20
<CODE>Signature</CODE> which appears to authenticate the desired data =
with the=20
desired key, <CODE>DigestMethod</CODE>, and =
<CODE>SignatureMethod</CODE>, can be=20
meaningless if a capricious <CODE>CanonicalizationMethod</CODE> is used. =
</P><PRE class=3Dxml-dtd>   Schema Definition:

   &lt;element name=3D"CanonicalizationMethod" =
type=3D"ds:CanonicalizationMethodType"/&gt;=20
   &lt;complexType name=3D"CanonicalizationMethodType" =
mixed=3D"true"&gt;
     &lt;sequence&gt;
       &lt;any namespace=3D"##any" minOccurs=3D"0" =
maxOccurs=3D"unbounded"/&gt;
       &lt;!-- (0,unbounded) elements from (1,1) namespace --&gt;
     &lt;/sequence&gt;
     &lt;attribute name=3D"Algorithm" type=3D"anyURI" =
use=3D"required"/&gt;=20
   &lt;/complexType&gt;
</PRE><PRE class=3Dxml-dtd>   DTD:

   &lt;!ELEMENT CanonicalizationMethod (#PCDATA %Method.ANY;)* &gt;=20
   &lt;!ATTLIST CanonicalizationMethod=20
    Algorithm CDATA #REQUIRED &gt;
</PRE>
<H4>4.3.2 The <A id=3Dsec-SignatureMethod=20
name=3Dsec-SignatureMethod><CODE>SignatureMethod</CODE></A> Element =
</H4>
<P><CODE>SignatureMethod</CODE> is a required element that specifies the =

algorithm used for signature generation and validation. This algorithm=20
identifies all cryptographic functions involved in the signature =
operation (e.g.=20
hashing, public key algorithms, MACs, padding, etc.). This element uses =
the=20
general structure here for algorithms described in section 6.1: <A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-AlgID">Algorithm =
Identifiers and=20
Implementation Requirements</A>. While there is a single identifier, =
that=20
identifier may specify a format containing multiple distinct signature =
values.=20
</P><PRE class=3Dxml-dtd>   Schema Definition:

   &lt;element name=3D"SignatureMethod" =
type=3D"ds:SignatureMethodType"/&gt;
   &lt;complexType name=3D"SignatureMethodType" mixed=3D"true"&gt;
     &lt;sequence&gt;
       &lt;element name=3D"HMACOutputLength" minOccurs=3D"0" =
type=3D"ds:HMACOutputLengthType"/&gt;
       &lt;any namespace=3D"##other" minOccurs=3D"0" =
maxOccurs=3D"unbounded"/&gt;
       &lt;!-- (0,unbounded) elements from (1,1) external namespace =
--&gt;
      &lt;/sequence&gt;
    &lt;attribute name=3D"Algorithm" type=3D"anyURI" =
use=3D"required"/&gt;=20
   &lt;/complexType&gt;
</PRE><PRE class=3Dxml-dtd>   DTD:

   &lt;!ELEMENT SignatureMethod (#PCDATA|HMACOutputLength %Method.ANY;)* =
&gt;
   &lt;!ATTLIST SignatureMethod=20
    Algorithm CDATA #REQUIRED &gt;
</PRE>
<H4>4.3.3 The <A id=3Dsec-Reference =
name=3Dsec-Reference><CODE>Reference</CODE></A>=20
Element </H4>
<P><CODE>Reference</CODE> is an element that may occur one or more =
times. It=20
specifies a digest algorithm and digest value, and optionally an =
identifier of=20
the object being signed, the type of the object, and/or a list of =
transforms to=20
be applied prior to digesting. The identification (URI) and transforms =
describe=20
how the digested content (i.e., the input to the digest method) was =
created. The=20
<CODE>Type</CODE> attribute facilitates the processing of referenced =
data. For=20
example, while this specification makes no requirements over external =
data, an=20
application may wish to signal that the referent is a =
<CODE>Manifest</CODE>. An=20
optional ID attribute permits a <CODE>Reference</CODE> to be referenced =
from=20
elsewhere. </P><PRE class=3Dxml-dtd>   Schema Definition:

   &lt;element name=3D"Reference" type=3D"ds:ReferenceType"/&gt;
   &lt;complexType name=3D"ReferenceType"&gt;
     &lt;sequence&gt;=20
       &lt;element ref=3D"ds:Transforms" minOccurs=3D"0"/&gt;=20
       &lt;element ref=3D"ds:DigestMethod"/&gt;=20
       &lt;element ref=3D"ds:DigestValue"/&gt;=20
     &lt;/sequence&gt;
     &lt;attribute name=3D"Id" type=3D"ID" use=3D"optional"/&gt;=20
     &lt;attribute name=3D"URI" type=3D"anyURI" use=3D"optional"/&gt;=20
     &lt;attribute name=3D"Type" type=3D"anyURI" use=3D"optional"/&gt;=20
   &lt;/complexType&gt;
</PRE><PRE class=3Dxml-dtd>   DTD:

   &lt;!ELEMENT Reference (Transforms?, DigestMethod, DigestValue)  &gt;
   &lt;!ATTLIST Reference =20
    Id  ID  #IMPLIED
    URI CDATA   #IMPLIED
    Type    CDATA   #IMPLIED&gt;
</PRE>
<H4>4.3.3.1 The <A id=3Dsec-URI name=3Dsec-URI><CODE>URI</CODE></A> =
Attribute </H4>
<P>The <CODE>URI</CODE> attribute identifies a data object using a=20
URI-Reference, as specified by RFC2396 [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-URI">URI</A>]. The set of =
allowed=20
characters for <CODE>URI</CODE> attributes is the same as for XML, =
namely <A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-Unicode">[Unicode]</A>. =
However,=20
some Unicode characters are disallowed from URI references including all =

non-ASCII characters and the excluded characters listed in RFC2396 [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-URI">URI</A>, section =
2.4].=20
However, the number sign (#), percent sign (%), and square bracket =
characters=20
re-allowed in RFC 2732 [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-URI-Literal">URI-Literal</=
A>] are=20
permitted. Disallowed characters must be escaped as follows: </P>
<OL>
  <LI>Each disallowed character is converted to [<A=20
  href=3D"http://www.w3.org/TR/xmldsig-core/#ref-UTF-8">UTF-8</A>] as =
one or more=20
  octets.=20
  <LI>Any octets corresponding to a disallowed character are escaped =
with the=20
  URI escaping mechanism (that is, converted to %HH, where HH is the =
hexadecimal=20
  notation of the octet value).=20
  <LI>The original character is replaced by the resulting character =
sequence.=20
  </LI></OL>
<P>XML signature applications MUST be able to parse URI syntax. We =
RECOMMEND=20
they be able to dereference URIs in the HTTP scheme. Dereferencing a URI =
in the=20
HTTP scheme MUST comply with the <A=20
href=3D"http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.4"=
>Status=20
Code Definitions</A> of [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-HTTP">HTTP</A>] (e.g., =
302, 305 and=20
307 redirects are followed to obtain the entity-body of a 200 status =
code=20
response). Applications should also be cognizant of the fact that =
protocol=20
parameter and state information, (such as HTTP cookies, HTML device =
profiles or=20
content negotiation), may affect the content yielded by dereferencing a =
URI.=20
</P>
<P>If a resource is identified by more than one URI, the most specific =
should be=20
used (e.g. http://www.w3.org/2000/06/interop-pressrelease.html.en =
instead of=20
http://www.w3.org/2000/06/interop-pressrelease). (See the <A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-CoreValidation">Reference =

Validation</A> (section 3.2.1) for a further information on reference=20
processing.) </P>
<P>If the <CODE>URI</CODE> attribute is omitted altogether, the =
receiving=20
application is expected to know the identity of the object. For example, =
a=20
lightweight data protocol might omit this attribute given the identity =
of the=20
object is part of the application context. This attribute may be omitted =
from at=20
most one <CODE>Reference</CODE> in any particular =
<CODE>SignedInfo</CODE>, or=20
<CODE>Manifest</CODE>. </P>
<P>The optional Type attribute contains information about the type of =
object=20
being signed. This is represented as a URI. For example: </P>
<P><CODE>Type=3D<A=20
href=3D"http://www.w3.org/2000/09/xmldsig#Object">"http://www.w3.org/2000=
/09/xmldsig#Object"</A><BR>Type=3D<A=20
href=3D"http://www.w3.org/2000/09/xmldsig#Manifest">"http://www.w3.org/20=
00/09/xmldsig#Manifest"</A></CODE>=20
</P>
<P>The Type attribute applies to the item being pointed at, not its =
contents.=20
For example, a reference that identifies an <CODE>Object</CODE> element=20
containing a <CODE>SignatureProperties</CODE> element is still of type=20
<CODE>#Object</CODE>. The type attribute is advisory. No validation of =
the type=20
information is required by this specification. </P>
<H4>4.3.3.2 The <A id=3Dsec-ReferenceProcessingModel=20
name=3Dsec-ReferenceProcessingModel>Reference Processing Model</A> </H4>
<P class=3Dcomment><A id=3DNote-Xpath name=3DNote-Xpath>Note</A>: XPath =
is=20
RECOMMENDED. Signature applications need not conform to [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XPath">XPath</A>] =
specification in=20
order to conform to this specification. However, the XPath data model,=20
definitions (e.g., <A =
href=3D"http://www.w3.org/TR/xpath#node-sets">node-sets</A>)=20
and syntax is used within this document in order to describe =
functionality for=20
those that want to process XML-as-XML (instead of octets) as part of =
signature=20
generation. For those that want to use these features, a conformant [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XPath">XPath</A>] =
implementation is=20
one way to implement these features, but it is not required. Such =
applications=20
could use a sufficiently functional replacement to a node-set and =
implement only=20
those XPath expression behaviors REQUIRED by this specification. =
However, for=20
simplicity we generally will use XPath terminology without including =
this=20
qualification on every point. Requirements over "XPath node-sets" can =
include a=20
node-set functional equivalent. Requirements over XPath processing can =
include=20
application behaviors that are equivalent to the corresponding XPath =
behavior.=20
</P>
<P>The data-type of the result of URI dereferencing or subsequent =
Transforms is=20
either an octet stream or an XPath node-set. </P>
<P>The <CODE>Transforms</CODE> specified in this document are defined =
with=20
respect to the input they require. The following is the default =
signature=20
application behavior: </P>
<UL>
  <LI>If the data object is an octet stream and the next transform =
requires a=20
  node-set, the signature application MUST attempt to parse the octets =
yielding=20
  the required node-set via [<A=20
  href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XML">XML</A>] =
well-formed=20
  processing.=20
  <LI>If the data object is a node-set and the next transform requires =
octets,=20
  the signature application MUST attempt to convert the node-set to an =
octet=20
  stream using Canonical XML [<A=20
  =
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XML-C14N">XML-C14N</A>]. =
</LI></UL>
<P>Users may specify alternative transforms that override these defaults =
in=20
transitions between transforms that expect different inputs. The final =
octet=20
stream contains the data octets being secured. The digest algorithm =
specified by=20
<CODE>DigestMethod</CODE> is then applied to these data octets, =
resulting in the=20
<CODE>DigestValue</CODE>. </P>
<P>Unless the URI-Reference is a 'same-document' reference as defined in =
[<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-URI">URI</A>, Section =
4.2], the=20
result of dereferencing the URI-Reference MUST be an octet stream. In=20
particular, an XML document identified by URI is not parsed by the =
signature=20
application unless the URI is a same-document reference or unless a =
transform=20
that requires XML parsing is applied. (See <A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-Transforms">Transforms</A>=
 (section=20
4.3.3.1).) </P>
<P>When a fragment is preceded by an absolute or relative URI in the=20
URI-Reference, the meaning of the fragment is defined by the resource's =
MIME=20
type. Even for XML documents, URI dereferencing (including the fragment=20
processing) might be done for the signature application by a proxy. =
Therefore,=20
reference validation might fail if fragment processing is not performed =
in a=20
standard way (as defined in the following section for same-document =
references).=20
Consequently, we RECOMMEND that the <CODE>URI</CODE>&nbsp; attribute not =
include=20
fragment identifiers and that such processing be specified as an =
additional <A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-XPath">XPath =
Transform</A>. </P>
<P>When a fragment is not preceded by a URI in the URI-Reference, XML =
signature=20
applications MUST support the null URI and barename XPointer. We =
RECOMMEND=20
support for the same-document XPointers '#xpointer(/)' and =
'#xpointer(id('ID'))'=20
if the application also intends to support any <A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-Canonical">canonicalizatio=
n</A>=20
that preserves comments. (Otherwise URI=3D"#foo" will automatically =
remove=20
comments before the canonicalization can even be invoked.) All other =
support for=20
XPointers is OPTIONAL, especially all support for barename and other =
XPointers=20
in external resources since the application may not have control over =
how the=20
fragment is generated (leading to interoperability problems and =
validation=20
failures). </P>
<P>The following examples demonstrate what the URI attribute identifies =
and how=20
it is dereferenced: </P>
<DL>
  <DT><CODE>URI=3D"http://example.com/bar.xml"</CODE>=20
  <DD>Identifies the octets that represent the external resource=20
  'http://example.com/bar.xml', that is probably an XML document given =
its file=20
  extension.=20
  <DT><CODE>URI=3D"http://example.com/bar.xml#chapter1"</CODE>=20
  <DD>Identifies the element with ID attribute value 'chapter1' of the =
external=20
  XML resource 'http://example.com/bar.xml', provided as an octet =
stream. Again,=20
  for the sake of interoperability, the element identified as 'chapter1' =
should=20
  be obtained using an XPath transform rather than a URI fragment =
(barename=20
  XPointer resolution in external resources is not REQUIRED in this=20
  specification).=20
  <DT><CODE>URI=3D""</CODE>=20
  <DD>Identifies the node-set (minus any comment nodes) of the XML =
resource=20
  containing the signature=20
  <DT><CODE>URI=3D"#chapter1"</CODE>=20
  <DD>Identifies a node-set containing the element with ID attribute =
value=20
  'chapter1' of the XML resource containing the signature. XML Signature =
(and=20
  its applications) modify this node-set to include the element plus all =

  descendents including namespaces and attributes -- but not comments. =
</DD></DL>
<H4>4.3.3.3 <A id=3Dsec-Same-Document =
name=3Dsec-Same-Document>Same-Document</A>=20
URI-References </H4>
<P>Dereferencing a same-document reference MUST result in an XPath =
node-set=20
suitable for use by Canonical XML [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XML-C14N">XML-C14N</A>].=20
Specifically, dereferencing a null URI (<CODE>URI=3D""</CODE>) MUST =
result in an=20
XPath node-set that includes every non-comment node of the XML document=20
containing the <CODE>URI</CODE> attribute. In a fragment URI, the =
characters=20
after the number sign ('#') character conform to the XPointer syntax [<A =

href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XPointer">Xptr</A>]. When =

processing an XPointer, the application MUST behave as if the root node =
of the=20
XML document containing the <CODE>URI</CODE> attribute were used to =
initialize=20
the XPointer evaluation context. The application MUST behave as if the =
result of=20
XPointer processing were a node-set derived from the resultant =
location-set as=20
follows: </P>
<OL>
  <LI>discard point nodes=20
  <LI>replace each range node with all XPath nodes having full or =
partial=20
  content within the range=20
  <LI>replace the root node with its children (if it is in the node-set) =

  <LI>replace any element node <STRONG>E</STRONG> with =
<STRONG>E</STRONG> plus=20
  all descendants of <STRONG>E</STRONG> (text, comment, PI, element) and =
all=20
  namespace and attribute nodes of <STRONG>E</STRONG> and its descendant =

  elements.=20
  <LI>if the URI is not a full XPointer, then delete all comment nodes =
</LI></OL>
<P>The second to last replacement is necessary because XPointer =
typically=20
indicates a subtree of an XML document's parse tree using just the =
element node=20
at the root of the subtree, whereas Canonical XML treats a node-set as a =
set of=20
nodes in which absence of descendant nodes results in absence of their=20
representative text from the canonical form. </P>
<P>The last step is performed for null URIs, barename XPointers and =
child=20
sequence XPointers. It's necessary because when [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XML-C14N">XML-C14N</A>] =
is passed a=20
node-set, it processes the node-set as is: with or without comments. =
Only when=20
it's called with an octet stream does it invoke its own XPath =
expressions=20
(default or without comments). Therefore to retain the default behavior =
of=20
stripping comments when passed a node-set, they are removed in the last =
step if=20
the URI is not a full XPointer. To retain comments while selecting an =
element by=20
an identifier <EM>ID</EM>, use the following full XPointer:=20
<CODE>URI=3D'#xpointer(id('ID'))'</CODE>. To retain comments while =
selecting the=20
entire document, use the following full XPointer:=20
<CODE>URI=3D'#xpointer(/)'</CODE>. This XPointer contains a simple XPath =

expression that includes the root node, which the second to last step =
above=20
replaces with all nodes of the parse tree (all descendants, plus all =
attributes,=20
plus all namespaces nodes). </P>
<H4>4.3.3.4 The <A id=3Dsec-Transforms=20
name=3Dsec-Transforms><CODE>Transforms</CODE></A> Element </H4>
<P>The optional <CODE>Transforms</CODE> element contains an ordered list =
of=20
<CODE>Transform</CODE> elements; these describe how the signer obtained =
the data=20
object that was digested. The output of each <CODE>Transform</CODE> =
serves as=20
input to the next <CODE>Transform</CODE>. The input to the first=20
<CODE>Transform</CODE> is the result of dereferencing the =
<CODE>URI</CODE>=20
attribute of the <CODE>Reference</CODE> element. The output from the =
last=20
<CODE>Transform</CODE> is the input for the <CODE>DigestMethod</CODE> =
algorithm.=20
When transforms are applied the signer is not signing the native =
(original)=20
document but the resulting (transformed) document. (See <A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-Secure">Only What is =
Signed is=20
Secure</A> (section 8.1).) </P>
<P>Each <CODE>Transform</CODE> consists of an <CODE>Algorithm</CODE> =
attribute=20
and content parameters, if any, appropriate for the given algorithm. The =

<CODE>Algorithm</CODE> attribute value specifies the name of the =
algorithm to be=20
performed, and the <CODE>Transform</CODE> content provides additional =
data to=20
govern the algorithm's processing of the transform input. (See <A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-AlgID">Algorithm =
Identifiers and=20
Implementation Requirements</A> (section 6).) </P>
<P>As described in <A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-ReferenceProcessingModel">=
The=20
Reference Processing Model</A> (section&nbsp; 4.3.3.2), some transforms =
take an=20
XPath node-set as input, while others require an octet stream. If the =
actual=20
input matches the input needs of the transform, then the transform =
operates on=20
the unaltered input. If the transform input requirement differs from the =
format=20
of the actual input, then the input must be converted. </P>
<P>Some <CODE>Transform</CODE>s may require explicit MIME type, charset =
(IANA=20
registered "character set"), or other such information concerning the =
data they=20
are receiving from an earlier <CODE>Transform</CODE> or the source data, =

although no <CODE>Transform</CODE> algorithm specified in this document =
needs=20
such explicit information. Such data characteristics are provided as =
parameters=20
to the <CODE>Transform</CODE> algorithm and should be described in the=20
specification for the algorithm. </P>
<P>Examples of transforms include but are not limited to base64 decoding =
[<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-MIME">MIME</A>], =
canonicalization=20
[<A =
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XML-C14N">XML-C14N</A>], =
XPath=20
filtering [<A =
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XPath">XPath</A>],=20
and XSLT [<A =
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XSLT">XSLT</A>]. The=20
generic definition of the <CODE>Transform</CODE> element also allows=20
application-specific transform algorithms. For example, the transform =
could be a=20
decompression routine given by a Java class appearing as a base64 =
encoded=20
parameter to a Java <CODE>Transform</CODE> algorithm. However, =
applications=20
should refrain from using application-specific transforms if they wish =
their=20
signatures to be verifiable outside of their application domain. <A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-Transforms">Transform=20
Algorithms</A> (section 6.6) defines the list of standard =
transformations. </P><PRE class=3Dxml-dtd>   Schema Definition:

   &lt;element name=3D"Transforms" type=3D"ds:TransformsType"/&gt;
   &lt;complexType name=3D"TransformsType"&gt;
     &lt;sequence&gt;
       &lt;element ref=3D"ds:Transform" maxOccurs=3D"unbounded"/&gt; =20
     &lt;/sequence&gt;
   &lt;/complexType&gt;

   &lt;element name=3D"Transform" type=3D"ds:TransformType"/&gt;
   &lt;complexType name=3D"TransformType" mixed=3D"true"&gt;
     &lt;choice minOccurs=3D"0" maxOccurs=3D"unbounded"&gt;=20
       &lt;any namespace=3D"##other" processContents=3D"lax"/&gt;
       &lt;!-- (1,1) elements from (0,unbounded) namespaces --&gt;
       &lt;element name=3D"XPath" type=3D"string"/&gt;=20
     &lt;/choice&gt;
     &lt;attribute name=3D"Algorithm" type=3D"anyURI" =
use=3D"required"/&gt;=20
   &lt;/complexType&gt;
</PRE><PRE class=3Dxml-dtd>   DTD:

   &lt;!ELEMENT Transforms (Transform+)&gt;

   &lt;!ELEMENT Transform (#PCDATA|XPath %Transform.ANY;)* &gt;
   &lt;!ATTLIST Transform=20
    Algorithm    CDATA    #REQUIRED &gt;

   &lt;!ELEMENT XPath (#PCDATA) &gt;
</PRE>
<H4>4.3.3.5 The <A id=3Dsec-DigestMethod=20
name=3Dsec-DigestMethod><CODE>DigestMethod</CODE></A> Element </H4>
<P><CODE>DigestMethod</CODE> is a required element that identifies the =
digest=20
algorithm to be applied to the signed object. This element uses the =
general=20
structure here for algorithms specified in <A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-AlgID">Algorithm =
Identifiers and=20
Implementation Requirements</A> (section 6.1). </P>
<P>If the result of the URI dereference and application of Transforms is =
an=20
XPath node-set (or sufficiently functional replacement implemented by =
the=20
application) then it must be converted as described in <A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-ReferenceProcessingModel">=
the=20
Reference Processing Model</A> (section&nbsp; 4.3.3.2). If the result of =
URI=20
dereference and application of transforms is an octet stream, then no =
conversion=20
occurs (comments might be present if the Canonical XML with Comments was =

specified in the Transforms). The digest algorithm is applied to the =
data octets=20
of the resulting octet stream. </P><PRE class=3Dxml-dtd>   Schema =
Definition:

   &lt;element name=3D"DigestMethod" type=3D"ds:DigestMethodType"/&gt;
   &lt;complexType name=3D"DigestMethodType" mixed=3D"true"&gt;=20
     &lt;sequence&gt;
       &lt;any namespace=3D"##other" processContents=3D"lax" =
minOccurs=3D"0" maxOccurs=3D"unbounded"/&gt;
     &lt;/sequence&gt;   =20
     &lt;attribute name=3D"Algorithm" type=3D"anyURI" =
use=3D"required"/&gt;=20
   &lt;/complexType&gt;
</PRE><PRE class=3Dxml-dtd>   DTD:

   &lt;!ELEMENT DigestMethod (#PCDATA %Method.ANY;)* &gt;
   &lt;!ATTLIST DigestMethod
    Algorithm       CDATA   #REQUIRED &gt;
</PRE>
<H4>4.3.3.6 The <A id=3Dsec-DigestValue=20
name=3Dsec-DigestValue><CODE>DigestValue</CODE></A> Element </H4>
<P>DigestValue is an element that contains the encoded value of the =
digest. The=20
digest is always encoded using base64 [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-MIME">MIME</A>]. </P><PRE =
class=3Dxml-dtd>   Schema Definition:

   &lt;element name=3D"DigestValue" type=3D"ds:DigestValueType"/&gt;
   &lt;simpleType name=3D"DigestValueType"&gt;
     &lt;restriction base=3D"base64Binary"/&gt;
   &lt;/simpleType&gt;
</PRE><PRE class=3Dxml-dtd>   DTD:

   &lt;!ELEMENT DigestValue  (#PCDATA)  &gt;
   <CODE>&lt;!-- base64 encoded digest value --&gt;</CODE>
</PRE>
<H3>4.4 The <A id=3Dsec-KeyInfo =
name=3Dsec-KeyInfo><CODE>KeyInfo</CODE></A> Element=20
</H3>
<P><CODE>KeyInfo</CODE> is an optional element that enables the =
recipient(s) to=20
obtain the key needed to validate the signature.&nbsp; =
<CODE>KeyInfo</CODE> may=20
contain keys, names, certificates and other public key management =
information,=20
such as in-band key distribution or key agreement data. This =
specification=20
defines a few simple types but applications may extend those types or =
all=20
together replace them with their own key identification and exchange =
semantics=20
using the XML namespace facility. [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XML-ns">XML-ns</A>] =
However,=20
questions of trust of such key information (e.g., its authenticity =
or&nbsp;=20
strength) are out of scope of this specification and left to the =
application.=20
</P>
<P>If <CODE>KeyInfo</CODE> is omitted, the recipient is expected to be =
able to=20
identify the key based on application context. Multiple declarations =
within=20
<CODE>KeyInfo</CODE> refer to the same key. While applications may =
define and=20
use any mechanism they choose through inclusion of elements from a =
different=20
namespace, compliant versions MUST implement <A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-KeyValue"><CODE>KeyValue</=
CODE></A>=20
(section 4.4.2) and SHOULD implement <CODE><A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-RetrievalMethod">Retrieval=
Method</A></CODE>=20
(section 4.4.3). </P>
<P>The schema/DTD specifications of many of <CODE>KeyInfo</CODE>'s =
children=20
(e.g., <CODE>PGPData</CODE>, <CODE>SPKIData</CODE>, =
<CODE>X509Data</CODE>)=20
permit their content to be extended/complemented with elements from =
another=20
namespace. This may be done only if it is safe to ignore these extension =

elements while claiming support for the types defined in this =
specification.=20
Otherwise, external elements, including <EM>alternative</EM> structures =
to those=20
defined by this specification, MUST be a child of <CODE>KeyInfo</CODE>. =
For=20
example, should a complete XML-PGP standard be defined, its root element =
MUST be=20
a child of <CODE>KeyInfo</CODE>. (Of course, new structures from =
external=20
namespaces can incorporate elements from the <CODE>&amp;dsig;</CODE> =
namespace=20
via features of the type definition language. For instance, they can =
create a=20
DTD that mixes their own and dsig qualified elements, or a schema that =
permits,=20
includes, imports, or derives new types based on <CODE>&amp;dsig;</CODE> =

elements.) </P>
<P>The following list summarizes the <CODE>KeyInfo</CODE> types that are =

allocated an identifier in the <CODE>&amp;dsig;</CODE> namespace; these =
can be=20
used within the <CODE>RetrievalMethod</CODE> <CODE>Type</CODE> attribute =
to=20
describe a remote <CODE>KeyInfo</CODE> structure. </P>
<UL>
  <LI><A=20
  =
href=3D"http://www.w3.org/2000/09/xmldsig#DSAKeyValue">http://www.w3.org/=
2000/09/xmldsig#DSAKeyValue</A>=20

  <LI><A=20
  =
href=3D"http://www.w3.org/2000/09/xmldsig#RSAKeyValue">http://www.w3.org/=
2000/09/xmldsig#RSAKeyValue</A>=20

  <LI><A=20
  =
href=3D"http://www.w3.org/2000/09/xmldsig#X509Data">http://www.w3.org/200=
0/09/xmldsig#X509Data</A>=20

  <LI><A=20
  =
href=3D"http://www.w3.org/2000/09/xmldsig#PGPData">http://www.w3.org/2000=
/09/xmldsig#PGPData</A>=20

  <LI><A=20
  =
href=3D"http://www.w3.org/2000/09/xmldsig#SPKIData">http://www.w3.org/200=
0/09/xmldsig#SPKIData</A>=20

  <LI><A=20
  =
href=3D"http://www.w3.org/2000/09/xmldsig#MgmtData">http://www.w3.org/200=
0/09/xmldsig#MgmtData</A>=20
  </LI></UL>
<P>In addition to the types above for which we define an XML structure, =
we=20
specify one additional type to indicate a <A id=3DrawX509Certificate=20
name=3DrawX509Certificate>binary (ASN.1 DER) X.509 Certificate</A>. </P>
<UL>
  <LI><A=20
  =
href=3D"http://www.w3.org/2000/09/xmldsig#rawX509Certificate">http://www.=
w3.org/2000/09/xmldsig#rawX509Certificate</A>=20
  </LI></UL><PRE class=3Dxml-dtd>   Schema Definition:

   &lt;element name=3D"KeyInfo" type=3D"ds:KeyInfoType"/&gt;=20
   &lt;complexType name=3D"KeyInfoType" mixed=3D"true"&gt;
     &lt;choice maxOccurs=3D"unbounded"&gt;    =20
       &lt;element ref=3D"ds:KeyName"/&gt;=20
       &lt;element ref=3D"ds:KeyValue"/&gt;=20
       &lt;element ref=3D"ds:RetrievalMethod"/&gt;=20
       &lt;element ref=3D"ds:X509Data"/&gt;=20
       &lt;element ref=3D"ds:PGPData"/&gt;=20
       &lt;element ref=3D"ds:SPKIData"/&gt;
       &lt;element ref=3D"ds:MgmtData"/&gt;
       &lt;any processContents=3D"lax" namespace=3D"##other"/&gt;
       &lt;!-- (1,1) elements from (0,unbounded) namespaces --&gt;
     &lt;/choice&gt;
     &lt;attribute name=3D"Id" type=3D"ID" use=3D"optional"/&gt;
   &lt;/complexType&gt;
</PRE><PRE class=3Dxml-dtd>   DTD:

   &lt;!ELEMENT KeyInfo (#PCDATA|KeyName|KeyValue|RetrievalMethod|
               X509Data|PGPData|SPKIData|MgmtData %KeyInfo.ANY;)* &gt;
   &lt;!ATTLIST KeyInfo =20
    Id  ID   #IMPLIED &gt;
</PRE>
<H4>4.4.1 The <A id=3Dsec-KeyName =
name=3Dsec-KeyName><CODE>KeyName</CODE></A>=20
Element </H4>
<P>The <CODE>KeyName</CODE> element contains a string value (in which =
white=20
space is significant) which may be used by the signer to communicate a =
key=20
identifier to the recipient. Typically, <CODE>KeyName</CODE> contains an =

identifier related to the key pair used to sign the message, but it may =
contain=20
other protocol-related information that indirectly identifies a key =
pair.=20
(Common uses of <CODE>KeyName</CODE> include simple string names for =
keys, a key=20
index, a distinguished name (DN), an email address, etc.) </P><PRE =
class=3Dxml-dtd>   Schema Definition:

   &lt;element name=3D"KeyName" type=3D"string"/&gt;
</PRE><PRE class=3Dxml-dtd>   DTD:

   &lt;!ELEMENT KeyName (#PCDATA) &gt;
</PRE>
<H4>4.4.2 The <A id=3Dsec-KeyValue =
name=3Dsec-KeyValue><CODE>KeyValue</CODE></A>=20
Element </H4>
<P>The <CODE>KeyValue</CODE> element contains a single public key that =
may be=20
useful in validating the signature. Structured formats for defining DSA=20
(REQUIRED) and RSA (RECOMMENDED) public keys are defined in <A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-SignatureAlg">Signature=20
Algorithms</A> (section 6.4). The <CODE>KeyValue</CODE> element may =
include=20
externally defined public keys values represented as PCDATA or element =
types=20
from an external namespace. </P><PRE class=3Dxml-dtd>   Schema =
Definition:

   &lt;element name=3D"KeyValue" type=3D"ds:KeyValueType"/&gt;=20
   &lt;complexType name=3D"KeyValueType" mixed=3D"true"&gt;
    &lt;choice&gt;
      &lt;element ref=3D"ds:DSAKeyValue"/&gt;
      &lt;element ref=3D"ds:RSAKeyValue"/&gt;
      &lt;any namespace=3D"##other" processContents=3D"lax"/&gt;
    &lt;/choice&gt;
   &lt;/complexType&gt;
</PRE><PRE class=3Dxml-dtd>   DTD:

   &lt;!ELEMENT KeyValue (#PCDATA|DSAKeyValue|RSAKeyValue =
%KeyValue.ANY;)* &gt;
</PRE>
<H4>4.4.2.1 The <A id=3Dsec-DSAKeyValue=20
name=3Dsec-DSAKeyValue><CODE>DSAKeyValue</CODE></A> Element </H4>
<DL>
  <DT>Identifier=20
  <DD><CODE>Type=3D"<A =
href=3D"http://www.w3.org/2000/09/xmldsig#DSAKeyValue"=20
  id=3DDSAKeyValue=20
  =
name=3DDSAKeyValue>http://www.w3.org/2000/09/xmldsig#DSAKeyValue</A>"<BR>=
</CODE>(this=20
  can be used within a <CODE>RetrievalMethod</CODE> or =
<CODE>Reference</CODE>=20
  element to identify the referent's type) </DD></DL>
<P>DSA keys and the DSA signature algorithm are specified in [DSS]. DSA =
public=20
key values can have the following fields: </P>
<DL>
  <DT><CODE>P</CODE>=20
  <DD>a prime modulus meeting the [DSS] requirements=20
  <DT><CODE>Q</CODE>=20
  <DD>an integer in the range 2**159 &lt; Q &lt; 2**160 which is a prime =
divisor=20
  of P-1=20
  <DT><CODE>G</CODE>=20
  <DD>an integer with certain properties with respect to P and Q=20
  <DT><CODE>Y</CODE>=20
  <DD>G**X mod P (where X is part of the private key and not made =
public)=20
  <DT><CODE>J</CODE>=20
  <DD>(P - 1) / Q=20
  <DT><CODE>seed</CODE>=20
  <DD>a DSA prime generation seed=20
  <DT><CODE>pgenCounter</CODE>=20
  <DD>a DSA prime generation counter </DD></DL>
<P>Parameter J is available for inclusion solely for efficiency as it is =

calculatable from P and Q. Parameters seed and pgenCounter are used in =
the DSA=20
prime number generation algorithm specified in [DSS]. As such, they are =
optional=20
but must either both be present or both be absent. This prime generation =

algorithm is designed to provide assurance that a weak prime is not =
being used=20
and it yields a P and Q value. Parameters P, Q, and G can be public and =
common=20
to a group of users. They might be known from application context. As =
such, they=20
are optional but P and Q must either both appear or both be absent. If =
all of=20
<CODE>P</CODE>, <CODE>Q</CODE>, <CODE>seed</CODE>, and =
<CODE>pgenCounter</CODE>=20
are present, implementations are not required to check if they are =
consistent=20
and are free to use either <CODE>P</CODE> and <CODE>Q</CODE> or=20
<CODE>seed</CODE> and <CODE>pgenCounter</CODE>. All parameters are =
encoded as=20
base64 [<A =
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-MIME">MIME</A>] values.=20
</P>
<P>Arbitrary-length integers (e.g. "bignums" such as RSA moduli) are =
represented=20
in XML as octet strings as defined by the <A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-CryptoBinary"><CODE>ds:Cry=
ptoBinary</CODE>=20
type</A>. </P><PRE class=3Dxml-dtd>   <CODE>Schema Definition:</CODE>

   &lt;element name=3D"DSAKeyValue" type=3D"ds:DSAKeyValueType"/&gt;=20
   &lt;complexType name=3D"DSAKeyValueType"&gt;=20
     &lt;sequence&gt;
       &lt;sequence minOccurs=3D"0"&gt;
         &lt;element name=3D"P" type=3D"ds:CryptoBinary"/&gt;=20
         &lt;element name=3D"Q" type=3D"ds:CryptoBinary"/&gt;
       &lt;/sequence&gt;
       &lt;element name=3D"G" type=3D"ds:CryptoBinary" =
minOccurs=3D"0"/&gt;=20
       &lt;element name=3D"Y" type=3D"ds:CryptoBinary"/&gt;=20
       &lt;element name=3D"J" type=3D"ds:CryptoBinary" =
minOccurs=3D"0"/&gt;
       &lt;sequence minOccurs=3D"0"&gt;
         &lt;element name=3D"Seed" type=3D"ds:CryptoBinary"/&gt;=20
         &lt;element name=3D"PgenCounter" type=3D"ds:CryptoBinary"/&gt;=20
       &lt;/sequence&gt;
     &lt;/sequence&gt;
   &lt;/complexType&gt;
</PRE><PRE class=3Dxml-dtd>   <CODE>DTD Definition:</CODE>

   &lt;!ELEMENT DSAKeyValue ((P, Q)?, G?, Y, J?, (Seed, PgenCounter)?) =
&gt;=20
   &lt;!ELEMENT P (#PCDATA) &gt;
   &lt;!ELEMENT Q (#PCDATA) &gt;
   &lt;!ELEMENT G (#PCDATA) &gt;
   &lt;!ELEMENT Y (#PCDATA) &gt;
   &lt;!ELEMENT J (#PCDATA) &gt;
   &lt;!ELEMENT Seed (#PCDATA) &gt;
   &lt;!ELEMENT PgenCounter (#PCDATA) &gt;
</PRE>
<H4>4.4.2.2 The <A id=3Dsec-RSAKeyValue=20
name=3Dsec-RSAKeyValue><CODE>RSAKeyValue</CODE></A> Element </H4>
<DL>
  <DT>Identifier=20
  <DD><CODE>Type=3D"<A =
href=3D"http://www.w3.org/2000/09/xmldsig#RSAKeyValue"=20
  id=3DRSAKeyValue=20
  =
name=3DRSAKeyValue>http://www.w3.org/2000/09/xmldsig#RSAKeyValue</A>"<BR>=
</CODE>(this=20
  can be used within a <CODE>RetrievalMethod</CODE> or =
<CODE>Reference</CODE>=20
  element to identify the referent's type) </DD></DL>
<P>RSA key values have two fields: Modulus and Exponent. </P><PRE =
class=3Dxml-example>   &lt;RSAKeyValue&gt;
     =
&lt;Modulus&gt;xA7SEU+e0yQH5rm9kbCDN9o3aPIo7HbP7tX6WOocLZAtNfyxSZDU16ksL6=
W
      jubafOqNEpcwR3RdFsT7bCqnXPBe5ELh5u4VEy19MzxkXRgrMvavzyBpVRgBUwUlV
      5foK5hhmbktQhyNdy/6LpQRhDUDsTvK+g9Ucj47es9AQJ3U=3D
     &lt;/Modulus&gt;
     &lt;Exponent&gt;AQAB&lt;/Exponent&gt;
   &lt;/RSAKeyValue&gt;
</PRE>
<P>Arbitrary-length integers (e.g. "bignums" such as RSA moduli) are =
represented=20
in XML as octet strings as defined by the <A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-CryptoBinary"><CODE>ds:Cry=
ptoBinary</CODE>=20
type</A>. </P><PRE class=3Dxml-dtd>   <CODE>Schema Definition:</CODE>

   &lt;element name=3D"RSAKeyValue" type=3D"ds:RSAKeyValueType"/&gt;
   &lt;complexType name=3D"RSAKeyValueType"&gt;
     &lt;sequence&gt;
       &lt;element name=3D"Modulus" type=3D"ds:CryptoBinary"/&gt;=20
       &lt;element name=3D"Exponent" type=3D"ds:CryptoBinary"/&gt;
     &lt;/sequence&gt;
   &lt;/complexType&gt;
</PRE><PRE class=3Dxml-dtd>   <CODE>DTD Definition:</CODE>

   &lt;!ELEMENT RSAKeyValue (Modulus, Exponent) &gt;=20
   &lt;!ELEMENT Modulus (#PCDATA) &gt;
   &lt;!ELEMENT Exponent (#PCDATA) &gt;
</PRE>
<H4>4.4.3 The <A id=3Dsec-RetrievalMethod=20
name=3Dsec-RetrievalMethod><CODE>RetrievalMethod</CODE></A> Element =
</H4>
<P>A <CODE>RetrievalMethod</CODE> element within <CODE>KeyInfo</CODE> is =
used to=20
convey a reference to <CODE>KeyInfo</CODE> information that is stored at =
another=20
location. For example, several signatures in a document might use a key =
verified=20
by an X.509v3 certificate chain appearing once in the document or =
remotely=20
outside the document; each signature's <CODE>KeyInfo</CODE> can =
reference this=20
chain using a single <CODE>RetrievalMethod</CODE> element instead of =
including=20
the entire chain with a sequence of <CODE>X509Certificate</CODE> =
elements. </P>
<P><CODE>RetrievalMethod</CODE> uses the same syntax and dereferencing =
behavior=20
as <A =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-URI"><CODE>Reference</CODE=
>'s=20
URI</A> (section 4.3.3.1) and <A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-ReferenceProcessingModel">=
The=20
Reference Processing Model</A> (section 4.3.3.2) except that there is no =

<CODE>DigestMethod</CODE> or <CODE>DigestValue</CODE> child elements and =

presence of the URI is mandatory. </P>
<P><CODE>Type</CODE> is an optional identifier for the type of data to =
be=20
retrieved. The result of dereferencing a <CODE>RetrievalMethod</CODE> =
<CODE><A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-URI">Reference</A></CODE> =
for all=20
<A =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo"><CODE>KeyInfo</CO=
DE>=20
types defined by this specification</A> (section 4.4) with a =
corresponding XML=20
structure is an XML element or document with that element as the root. =
The=20
<CODE>rawX509Certificate</CODE> <CODE>KeyInfo</CODE> (for which there is =
no XML=20
structure) returns a binary X509 certificate. </P><PRE class=3Dxml-dtd>  =
 Schema Definition

   &lt;element name=3D"RetrievalMethod" =
type=3D"ds:RetrievalMethodType"/&gt;=20
   &lt;complexType name=3D"RetrievalMethodType"&gt;
     &lt;sequence&gt;
       &lt;element ref=3D"ds:Transforms" minOccurs=3D"0"/&gt;=20
     &lt;/sequence&gt; =20
     &lt;attribute name=3D"URI" type=3D"anyURI"/&gt;
     &lt;attribute name=3D"Type" type=3D"anyURI" use=3D"optional"/&gt;
   &lt;/complexType&gt;
</PRE><PRE class=3Dxml-dtd>   DTD

   &lt;!ELEMENT RetrievalMethod (Transforms?) &gt;
   &lt;!ATTLIST RetrievalMethod
      URI   CDATA #REQUIRED=20
      Type  CDATA #IMPLIED &gt;
</PRE>
<H4>4.4.4 The <A id=3Dsec-X509Data =
name=3Dsec-X509Data><CODE>X509Data</CODE></A>=20
Element </H4>
<DL>
  <DT>Identifier=20
  <DD><CODE>Type=3D"<A =
href=3D"http://www.w3.org/2000/09/xmldsig#SPKIData"=20
  id=3DX509Data=20
  name=3DX509Data>http://www.w3.org/2000/09/xmldsig#SPKIData</A></CODE> =
"<BR>(this=20
  can be used within a <CODE>RetrievalMethod</CODE> or =
<CODE>Reference</CODE>=20
  element to identify the referent's type) </DD></DL>
<P>An <CODE>X509Data</CODE> element within <CODE>KeyInfo</CODE> contains =
one or=20
more identifiers of keys or X509 certificates (or certificates' =
identifiers or a=20
revocation list). The content of <CODE>X509Data</CODE> is: </P>
<OL>
  <LI>At least one element, from the following set of element types; any =
of=20
  these may appear together or more than once iff (if and only if) each =
instance=20
  describes or is related to the same certificate:=20
  <LI style=3D"LIST-STYLE: none">
  <UL>
    <LI>The <CODE>X509IssuerSerial</CODE> element, which contains an =
X.509=20
    issuer distinguished name/serial number pair that SHOULD be =
compliant with=20
    RFC2253 [<A=20
    =
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-LDAP-DN">LDAP-DN</A>],=20
    <LI>The <CODE>X509SubjectName</CODE> element, which contains an =
X.509=20
    subject distinguished name that SHOULD be compliant with RFC2253 [<A =

    =
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-LDAP-DN">LDAP-DN</A>],=20
    <LI>The <CODE>X509SKI</CODE> element, which contains the base64 =
encoded=20
    plain (i.e. non-DER-encoded) value of a X509 V.3 =
SubjectKeyIdentifier=20
    extension.=20
    <LI>The <CODE>X509Certificate</CODE> element, which contains a=20
    base64-encoded [<A=20
    href=3D"http://www.w3.org/TR/xmldsig-core/#ref-X509v3">X509v3</A>]=20
    certificate, and=20
    <LI>Elements from an external namespace which =
accompanies/complements any of=20
    the elements above.=20
    <LI>The <CODE>X509CRL</CODE> element, which contains a =
base64-encoded=20
    certificate revocation list (CRL) [<A=20
    href=3D"http://www.w3.org/TR/xmldsig-core/#ref-X509v3">X509v3</A>].=20
  </LI></UL></LI></OL>
<P>Any <CODE>X509IssuerSerial</CODE>, <CODE>X509SKI</CODE>, and=20
<CODE>X509SubjectName</CODE> elements that appear MUST refer to the =
certificate=20
or certificates containing the validation key. All such elements that =
refer to a=20
particular individual certificate MUST be grouped inside a single=20
<CODE>X509Data</CODE> element and if the certificate to which they refer =

appears, it MUST also be in that <CODE>X509Data</CODE> element. </P>
<P>Any <CODE>X509IssuerSerial</CODE>, <CODE>X509SKI</CODE>, and=20
<CODE>X509SubjectName</CODE> elements that relate to the same key but =
different=20
certificates MUST be grouped within a single <CODE>KeyInfo</CODE> but =
MAY occur=20
in multiple <CODE>X509Data</CODE> elements. </P>
<P>All certificates appearing in an <CODE>X509Data</CODE> element MUST =
relate to=20
the validation key by either containing it or being part of a =
certification=20
chain that terminates in a certificate containing the validation key. =
</P>
<P>No ordering is implied by the above constraints. The comments in the=20
following instance demonstrate these constraints: </P><PRE =
class=3Dxml-example>   &lt;KeyInfo&gt;
     &lt;X509Data&gt; &lt;!-- two pointers to certificate-A --&gt;
       &lt;X509IssuerSerial&gt;=20
         &lt;X509IssuerName&gt;<SPAN class=3Dtx>CN=3DTAMURA Kent, =
OU=3DTRL, O=3DIBM,=20
           L=3DYamato-shi, ST=3DKanagawa, =
C=3DJP</SPAN>&lt;/X509IssuerName&gt;
         &lt;X509SerialNumber&gt;12345678&lt;/X509SerialNumber&gt;
       &lt;/X509IssuerSerial&gt;
       &lt;X509SKI&gt;31d97bd7&lt;/X509SKI&gt;=20
     &lt;/X509Data&gt;
     &lt;X509Data&gt;&lt;!-- single pointer to certificate-B --&gt;
       &lt;X509SubjectName&gt;Subject of Certificate =
B&lt;/X509SubjectName&gt;
     &lt;/X509Data&gt;
     &lt;X509Data&gt; &lt;!-- certificate chain --&gt;
       &lt;!--Signer cert, issuer CN=3DarbolCA,OU=3DFVT,O=3DIBM,C=3DUS, =
serial 4--&gt;
       &lt;X509Certificate&gt;MIICXTCCA..&lt;/X509Certificate&gt;
       &lt;!-- Intermediate cert subject =
CN=3DarbolCA,OU=3DFVT,O=3DIBM,C=3DUS=20
            issuer CN=3DtootiseCA,OU=3DFVT,O=3DBridgepoint,C=3DUS --&gt;
       &lt;X509Certificate&gt;MIICPzCCA...&lt;/X509Certificate&gt;
       &lt;!-- Root cert subject =
CN=3DtootiseCA,OU=3DFVT,O=3DBridgepoint,C=3DUS --&gt;
       &lt;X509Certificate&gt;MIICSTCCA...&lt;/X509Certificate&gt;
     &lt;/X509Data&gt;
   &lt;/KeyInfo&gt;
</PRE>
<P>Note, there is no direct provision for a PKCS#7 encoded "bag" of =
certificates=20
or CRLs. However, a set of certificates and CRLs can occur within an=20
<CODE>X509Data</CODE> element and multiple <CODE>X509Data</CODE> =
elements can=20
occur in a <CODE>KeyInfo</CODE>. Whenever multiple certificates occur in =
an=20
<CODE>X509Data</CODE> element, at least one such certificate must =
contain the=20
public key which verifies the signature. </P>
<P>Also, strings in DNames=20
(<CODE>X509IssuerSerial</CODE>,<CODE>X509SubjectName</CODE>, and=20
<CODE>KeyName</CODE> if approriate) should be encoded as follows: </P>
<UL>
  <LI>Consider the string as consisting of Unicode characters.=20
  <LI>Escape occurrences of the following special characters by =
prefixing it=20
  with the "\" character:=20
  <UL>
    <LI>a "#" character occurring at the beginning of the string=20
    <LI>one of the characters ",", "+", """, "\", "&lt;", "&gt;" or ";" =
</LI></UL>
  <LI>Escape all occurrences of ASCII control characters (Unicode range =
\x00 -=20
  \x1f) by replacing them with "\" followed by a two digit hex number =
showing=20
  its Unicode number.=20
  <LI>Escape any trailing white space by replacing "\ " with "\20".=20
  <LI>Since a XML document logically consists of characters, not octets, =
the=20
  resulting Unicode string is finally encoded according to the character =

  encoding used for producing the physical representation of the XML =
document.=20
  </LI></UL><PRE class=3Dxml-dtd>   Schema Definition

   &lt;element name=3D"X509Data" type=3D"ds:X509DataType"/&gt;=20
   &lt;complexType name=3D"X509DataType"&gt;
     &lt;sequence maxOccurs=3D"unbounded"&gt;
       &lt;choice&gt;
         &lt;element name=3D"X509IssuerSerial" =
type=3D"ds:X509IssuerSerialType"/&gt;
         &lt;element name=3D"X509SKI" type=3D"base64Binary"/&gt;
         &lt;element name=3D"X509SubjectName" type=3D"string"/&gt;
         &lt;element name=3D"X509Certificate" type=3D"base64Binary"/&gt;
         &lt;element name=3D"X509CRL" type=3D"base64Binary"/&gt;
         &lt;any namespace=3D"##other" processContents=3D"lax"/&gt;
       &lt;/choice&gt;
     &lt;/sequence&gt;
   &lt;/complexType&gt;

   &lt;complexType name=3D"X509IssuerSerialType"&gt;=20
     &lt;sequence&gt;=20
       &lt;element name=3D"X509IssuerName" type=3D"string"/&gt;=20
       &lt;element name=3D"X509SerialNumber" type=3D"integer"/&gt;=20
     &lt;/sequence&gt;
   &lt;/complexType&gt;
</PRE><PRE class=3Dxml-dtd>   DTD

   &lt;!ELEMENT X509Data ((X509IssuerSerial | X509SKI | X509SubjectName =
|
                        X509Certificate | X509CRL)+ %X509.ANY;)&gt;
   &lt;!ELEMENT X509IssuerSerial (X509IssuerName, X509SerialNumber) &gt;
   &lt;!ELEMENT X509IssuerName (#PCDATA) &gt;
   &lt;!ELEMENT X509SubjectName (#PCDATA) &gt;
   &lt;!ELEMENT X509SerialNumber (#PCDATA) &gt;
   &lt;!ELEMENT X509SKI (#PCDATA) &gt;
   &lt;!ELEMENT X509Certificate (#PCDATA) &gt;
   &lt;!ELEMENT X509CRL (#PCDATA) &gt;

   &lt;!-- Note, this DTD and schema permit <CODE>X509Data</CODE> to be =
empty; this is=20
   precluded by the text in <A =
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo"><CODE>KeyInfo</CO=
DE> Element</A> (section 4.4) which states=20
   that at least one element from the dsig namespace should be present=20
   in the PGP, SPKI, and X509 structures. This is easily expressed for=20
   the other key types, but not for X509Data because of its rich=20
   structure. --&gt;
</PRE>
<H4>4.4.5 The <A id=3Dsec-PGPData =
name=3Dsec-PGPData><CODE>PGPData</CODE></A>=20
Element </H4>
<DL>
  <DT>Identifier=20
  <DD><CODE>Type=3D"<A =
href=3D"http://www.w3.org/2000/09/xmldsig#PGPData" id=3DPGPData=20
  name=3DPGPData>http://www.w3.org/2000/09/xmldsig#PGPData</A></CODE> =
"<BR>(this=20
  can be used within a <CODE>RetrievalMethod</CODE> or =
<CODE>Reference</CODE>=20
  element to identify the referent's type) </DD></DL>
<P>The <CODE>PGPData</CODE> element within <CODE>KeyInfo</CODE> is used =
to=20
convey information related to PGP public key pairs and signatures on =
such keys.=20
The <CODE>PGPKeyID</CODE>'s value is a base64Binary sequence containing =
a=20
standard PGP public key identifier as defined in [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-PGP">PGP</A>, section =
11.2]. The=20
<CODE>PGPKeyPacket</CODE> contains a base64-encoded Key Material Packet =
as=20
defined in [<A =
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-PGP">PGP</A>,=20
section 5.5]. These children element types can be complemented/extended =
by=20
siblings from an external namespace within <CODE>PGPData</CODE>, or=20
<CODE>PGPData</CODE> can be replaced all together with an alternative =
PGP XML=20
structure as a child of <CODE>KeyInfo</CODE>. <CODE>PGPData</CODE> must =
contain=20
one <CODE>PGPKeyID</CODE> and/or one <CODE>PGPKeyPacket</CODE> and 0 or =
more=20
elements from an external namespace. </P><PRE class=3Dxml-dtd>   Schema =
Definition:

   &lt;element name=3D"PGPData" type=3D"ds:PGPDataType"/&gt;=20
   &lt;complexType name=3D"PGPDataType"&gt;=20
     &lt;choice&gt;
       &lt;sequence&gt;
         &lt;element name=3D"PGPKeyID" type=3D"base64Binary"/&gt;=20
         &lt;element name=3D"PGPKeyPacket" type=3D"base64Binary" =
minOccurs=3D"0"/&gt;=20
         &lt;any namespace=3D"##other" processContents=3D"lax" =
minOccurs=3D"0"
          maxOccurs=3D"unbounded"/&gt;
       &lt;/sequence&gt;
       &lt;sequence&gt;
         &lt;element name=3D"PGPKeyPacket" type=3D"base64Binary"/&gt;=20
         &lt;any namespace=3D"##other" processContents=3D"lax" =
minOccurs=3D"0"
          maxOccurs=3D"unbounded"/&gt;
       &lt;/sequence&gt;
     &lt;/choice&gt;
   &lt;/complexType&gt;
</PRE><PRE class=3Dxml-dtd>   DTD:

 &lt;!ELEMENT PGPData ((PGPKeyID, PGPKeyPacket?) | (PGPKeyPacket) =
%PGPData.ANY;) &gt;
   &lt;!ELEMENT PGPKeyPacket  (#PCDATA)  &gt;
   &lt;!ELEMENT PGPKeyID  (#PCDATA)  &gt;
</PRE>
<H4>4.4.6 The <A id=3Dsec-SPKIData =
name=3Dsec-SPKIData><CODE>SPKIData</CODE></A>=20
Element </H4>
<DL>
  <DT>Identifier=20
  <DD><CODE>Type=3D"<A =
href=3D"http://www.w3.org/2000/09/xmldsig#SPKIData"=20
  id=3DSPKIData=20
  name=3DSPKIData>http://www.w3.org/2000/09/xmldsig#SPKIData</A></CODE> =
"<BR>(this=20
  can be used within a <CODE>RetrievalMethod</CODE> or =
<CODE>Reference</CODE>=20
  element to identify the referent's type) </DD></DL>
<P>The <CODE>SPKIData</CODE> element within <CODE>KeyInfo</CODE> is used =
to=20
convey information related to SPKI public key pairs, certificates and =
other SPKI=20
data. <CODE>SPKISexp</CODE> is the base64 encoding of a SPKI canonical=20
S-expression. <CODE>SPKIData</CODE> must have at least one=20
<CODE>SPKISexp</CODE>; <CODE>SPKISexp</CODE> can be =
complemented/extended by=20
siblings from an external namespace within <CODE>SPKIData</CODE>, or=20
<CODE>SPKIData</CODE> can be entirely replaced with an alternative SPKI =
XML=20
structure as a child of <CODE>KeyInfo</CODE>. </P><PRE class=3Dxml-dtd>  =
 Schema Definition:

   &lt;element name=3D"SPKIData" type=3D"ds:SPKIDataType"/&gt;=20
   &lt;complexType name=3D"SPKIDataType"&gt;
     &lt;sequence maxOccurs=3D"unbounded"&gt;
       &lt;element name=3D"SPKISexp" type=3D"base64Binary"/&gt;
       &lt;any namespace=3D"##other" processContents=3D"lax" =
minOccurs=3D"0"/&gt;
     &lt;/sequence&gt;
   &lt;/complexType&gt;
</PRE><PRE class=3Dxml-dtd>   DTD:

 &lt;!ELEMENT SPKIData (SPKISexp %SPKIData.ANY;)  &gt;
   &lt;!ELEMENT SPKISexp  (#PCDATA)  &gt;
</PRE>
<H4>4.4.7 The <A id=3Dsec-MgmtData =
name=3Dsec-MgmtData><CODE>MgmtData</CODE></A>=20
Element </H4>
<DL>
  <DT>Identifier=20
  <DD><CODE>Type=3D"<A =
href=3D"http://www.w3.org/2000/09/xmldsig#MgmtData"=20
  id=3DMgmtData=20
  name=3DMgmtData>http://www.w3.org/2000/09/xmldsig#MgmtData</A></CODE> =
"<BR>(this=20
  can be used within a <CODE>RetrievalMethod</CODE> or =
<CODE>Reference</CODE>=20
  element to identify the referent's type) </DD></DL>
<P>The <CODE>MgmtData</CODE> element within <CODE>KeyInfo</CODE> is a =
string=20
value used to convey in-band key distribution or agreement data. For =
example, DH=20
key exchange, RSA key encryption, etc. Use of this element is NOT =
RECOMMENDED.=20
It provides a syntactic hook where in-band key distribution or agreement =
data=20
can be placed. However, superior interoperable child elements of=20
<CODE>KeyInfo</CODE> for the transmission of encrypted keys and for key=20
agreement are being specified by the W3C XML Encryption Working Group =
and they=20
should be used instead of <CODE>MgmtData</CODE>. </P><PRE =
class=3Dxml-dtd>   Schema Definition:

   &lt;element name=3D"MgmtData" type=3D"string"/&gt;
</PRE><PRE class=3Dxml-dtd>   DTD:

   &lt;!ELEMENT MgmtData (#PCDATA)&gt;
</PRE>
<H3>4.5 The <A id=3Dsec-Object name=3Dsec-Object><CODE>Object</CODE></A> =
Element=20
</H3>
<DL>
  <DT>Identifier=20
  <DD><CODE>Type=3D<A href=3D"http://www.w3.org/2000/09/xmldsig#Object" =
id=3DObject=20
  =
name=3DObject>"http://www.w3.org/2000/09/xmldsig#Object"</A><BR></CODE>(t=
his can=20
  be used within a <CODE>Reference</CODE> element to identify the =
referent's=20
  type) </DD></DL>
<P><CODE>Object</CODE> is an optional element that may occur one or more =
times.=20
When present, this element may contain any data. The <CODE>Object</CODE> =
element=20
may include optional MIME type, ID, and encoding attributes. </P>
<P>The <CODE>Object</CODE>'s <CODE>Encoding</CODE> attributed may be =
used to=20
provide a URI that identifies the method by which the object is encoded =
(e.g., a=20
binary file). </P>
<P>The <CODE>MimeType</CODE> attribute is an optional attribute which =
describes=20
the data within the <CODE>Object</CODE> (independent of its encoding). =
This is a=20
string with values defined by [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-MIME">MIME</A>]. For =
example, if=20
the <CODE>Object</CODE> contains base64 encoded <A=20
href=3D"http://www.w3.org/Graphics/PNG/">PNG</A>, the =
<CODE>Encoding</CODE> may be=20
specified as 'base64' and the <CODE>MimeType</CODE> as 'image/png'. This =

attribute is purely advisory; no validation of the <CODE>MimeType</CODE> =

information is required by this specification. Applications which =
require=20
normative type and encoding information for signature validation should =
specify=20
<CODE><A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-Transforms">Transforms</A>=
</CODE>=20
with well defined resulting types and/or encodings. </P>
<P>The <CODE>Object</CODE>'s <CODE>Id</CODE> is commonly referenced from =
a=20
<CODE>Reference</CODE> in <CODE>SignedInfo</CODE>, or =
<CODE>Manifest</CODE>.=20
This element is typically used for <A class=3Dlink-def=20
href=3D"http://www.w3.org/TR/xmldsig-core/#def-SignatureEnveloping">envel=
oping=20
signatures</A> where the object being signed is to be included in the =
signature=20
element. The digest is calculated over the entire <CODE>Object</CODE> =
element=20
including start and end tags. </P>
<P>Note, if the application wishes to exclude the =
<CODE>&lt;Object&gt;</CODE>=20
tags from the digest calculation the <CODE>Reference</CODE> must =
identify the=20
actual data object (easy for XML documents) or a transform must be used =
to=20
remove the <CODE>Object</CODE> tags (likely where the data object is =
non-XML).=20
Exclusion of the object tags may be desired for cases where one wants =
the=20
signature to remain valid if the data object is moved from inside a =
signature to=20
outside the signature (or vice versa), or where the content of the=20
<CODE>Object</CODE> is an encoding of an original binary document and it =
is=20
desired to extract and decode so as to sign the original bitwise =
representation.=20
</P><PRE class=3Dxml-dtd>   Schema Definition:

   &lt;element name=3D"Object" type=3D"ds:ObjectType"/&gt;=20
   &lt;complexType name=3D"ObjectType" mixed=3D"true"&gt;
     &lt;sequence minOccurs=3D"0" maxOccurs=3D"unbounded"&gt;
       &lt;any namespace=3D"##any" processContents=3D"lax"/&gt;
     &lt;/sequence&gt;
     &lt;attribute name=3D"Id" type=3D"ID" use=3D"optional"/&gt;=20
     &lt;attribute name=3D"MimeType" type=3D"string" =
use=3D"optional"/&gt;
     &lt;attribute name=3D"Encoding" type=3D"anyURI" =
use=3D"optional"/&gt;=20
   &lt;/complexType&gt;
</PRE><PRE class=3Dxml-dtd>   DTD:

   &lt;!ELEMENT Object (#PCDATA|Signature|SignatureProperties|Manifest =
%Object.ANY;)* &gt;
   &lt;!ATTLIST Object =20
    Id  ID  #IMPLIED=20
    MimeType    CDATA   #IMPLIED=20
    Encoding    CDATA   #IMPLIED &gt;
</PRE>
<H2>5.0 <A id=3Dsec-AdditionalSyntax =
name=3Dsec-AdditionalSyntax>Additional=20
Signature Syntax</A> </H2>
<P>This section describes the optional to implement =
<CODE>Manifest</CODE> and=20
<CODE>SignatureProperties</CODE> elements and describes the handling of =
XML=20
processing instructions and comments. With respect to the elements=20
<CODE>Manifest</CODE> and <CODE>SignatureProperties</CODE> this section=20
specifies syntax and little behavior -- it is left to the application. =
These=20
elements can appear anywhere the parent's content model permits; the=20
<CODE>Signature</CODE> content model only permits them within=20
<CODE>Object</CODE>. </P>
<H3>5.1 The <A id=3Dsec-Manifest =
name=3Dsec-Manifest><CODE>Manifest</CODE></A>=20
Element </H3>
<DL>
  <DT>Identifier=20
  <DD><CODE>Type=3D<A =
href=3D"http://www.w3.org/2000/09/xmldsig#Manifest"=20
  id=3DManifest=20
  =
name=3DManifest>"http://www.w3.org/2000/09/xmldsig#Manifest"</A><BR></COD=
E>(this=20
  can be used within a <CODE>Reference</CODE> element to identify the =
referent's=20
  type) </DD></DL>
<P>The <CODE>Manifest</CODE> element provides a list of =
<CODE>Reference</CODE>s.=20
The difference from the list in <CODE>SignedInfo</CODE> is that it is=20
application defined which, if any, of the digests are actually checked =
against=20
the objects referenced and what to do if the object is inaccessible or =
the=20
digest compare fails. If a <CODE>Manifest</CODE> is pointed to from=20
<CODE>SignedInfo</CODE>, the digest over the <CODE>Manifest</CODE> =
itself will=20
be checked by the core signature validation behavior. The digests within =
such a=20
<CODE>Manifest</CODE> are checked at the application's discretion. If a=20
<CODE>Manifest</CODE> is referenced from another <CODE>Manifest</CODE>, =
even the=20
overall digest of this two level deep <CODE>Manifest</CODE> might not be =

checked. </P><PRE class=3Dxml-dtd>   Schema Definition:

   &lt;element name=3D"Manifest" type=3D"ds:ManifestType"/&gt;=20
   &lt;complexType name=3D"ManifestType"&gt;
     &lt;sequence&gt;
       &lt;element ref=3D"ds:Reference" maxOccurs=3D"unbounded"/&gt;=20
     &lt;/sequence&gt; =20
     &lt;attribute name=3D"Id" type=3D"ID" use=3D"optional"/&gt;=20
   &lt;/complexType&gt;
</PRE><PRE class=3Dxml-dtd>   DTD:

   &lt;!ELEMENT Manifest (Reference+)  &gt;
   &lt;!ATTLIST Manifest =20
             Id ID  #IMPLIED &gt;
</PRE>
<H3>5.2 The <A id=3Dsec-SignatureProperties=20
name=3Dsec-SignatureProperties><CODE>SignatureProperties</CODE></A> =
Element </H3>
<DL>
  <DT>=20
  <DT>Identifier=20
  <DD><CODE>Type=3D"<A=20
  href=3D"http://www.w3.org/2000/09/xmldsig#SignatureProperties"=20
  id=3DSignatureProperties=20
  =
name=3DSignatureProperties>http://www.w3.org/2000/09/xmldsig#SignaturePro=
perties</A>"<BR></CODE>(this=20
  can be used within a <CODE>Reference</CODE> element to identify the =
referent's=20
  type) </DD></DL>
<P>Additional information items concerning the generation of the =
signature(s)=20
can be placed in a <CODE>SignatureProperty</CODE> element (i.e., =
date/time stamp=20
or the serial number of cryptographic hardware used in signature =
generation).=20
</P><PRE class=3Dxml-dtd>   Schema Definition:

   &lt;element name=3D"SignatureProperties" =
type=3D"ds:SignaturePropertiesType"/&gt;=20
   &lt;complexType name=3D"SignaturePropertiesType"&gt;
     &lt;sequence&gt;
       &lt;element ref=3D"ds:SignatureProperty" =
maxOccurs=3D"unbounded"/&gt;=20
     &lt;/sequence&gt;
     &lt;attribute name=3D"Id" type=3D"ID" use=3D"optional"/&gt;=20
   &lt;/complexType&gt;

      &lt;element name=3D"SignatureProperty" =
type=3D"ds:SignaturePropertyType"/&gt;=20
      &lt;complexType name=3D"SignaturePropertyType" mixed=3D"true"&gt;
        &lt;choice maxOccurs=3D"unbounded"&gt;
          &lt;any namespace=3D"##other" processContents=3D"lax"/&gt;
          &lt;!-- (1,1) elements from (1,unbounded) namespaces --&gt;
        &lt;/choice&gt;
        &lt;attribute name=3D"Target" type=3D"anyURI" =
use=3D"required"/&gt;=20
        &lt;attribute name=3D"Id" type=3D"ID" use=3D"optional"/&gt;=20
      &lt;/complexType&gt;
</PRE><PRE class=3Dxml-dtd>   DTD:

   &lt;!ELEMENT SignatureProperties (SignatureProperty+)  &gt;
   &lt;!ATTLIST SignatureProperties =20
             Id ID   #IMPLIED  &gt;

   &lt;!ELEMENT SignatureProperty (#PCDATA %SignatureProperty.ANY;)* =
&gt;
   &lt;!ATTLIST SignatureProperty =20
    Target  CDATA    #REQUIRED
    Id  ID   #IMPLIED  &gt;
</PRE>
<H3>5.3 <A id=3Dsec-PI name=3Dsec-PI>Processing Instructions</A> in =
Signature=20
Elements </H3>
<P>No XML processing instructions (PIs) are used by this specification. =
</P>
<P>Note that PIs placed inside <CODE>SignedInfo</CODE> by an application =
will be=20
signed unless the <CODE>CanonicalizationMethod</CODE> algorithm discards =
them.=20
(This is true for any signed XML content.) All of the=20
<CODE>CanonicalizationMethod</CODE>s identified within this =
specification retain=20
PIs. When a PI is part of content that is signed (e.g., within=20
<CODE>SignedInfo</CODE> or referenced XML documents) any change to the =
PI will=20
obviously result in a signature failure. </P>
<H3>5.4 <A id=3Dsec-comments name=3Dsec-comments>Comments</A> in =
Signature Elements=20
</H3>
<P>XML comments are not used by this specification. </P>
<P>Note that unless <CODE>CanonicalizationMethod</CODE> removes comments =
within=20
<CODE>SignedInfo</CODE> or any other referenced XML (which [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XML-C14N">XML-C14N</A>] =
does), they=20
will be signed. Consequently, if they are retained, a change to the =
comment will=20
cause a signature failure. Similarly, the XML signature over any XML =
data will=20
be sensitive to comment changes unless a comment-ignoring=20
canonicalization/transform method, such as the Canonical XML [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XML-C14N">XML-C14N</A>], =
is=20
specified. </P>
<H2>6.0 <A id=3Dsec-Algorithms name=3Dsec-Algorithms>Algorithms</A> =
</H2>
<P>This section identifies algorithms used with the XML digital =
signature=20
specification. Entries contain the identifier to be used in=20
<CODE>Signature</CODE> elements, a reference to the formal =
specification, and=20
definitions, where applicable, for the representation of keys and the =
results of=20
cryptographic operations. </P>
<H3>6.1 <A id=3Dsec-AlgID name=3Dsec-AlgID>Algorithm</A> Identifiers and =

Implementation Requirements </H3>
<P>Algorithms are identified by URIs that appear as an attribute to the =
element=20
that identifies the algorithms' role (<CODE>DigestMethod</CODE>,=20
<CODE>Transform</CODE>, <CODE>SignatureMethod</CODE>, or=20
<CODE>CanonicalizationMethod</CODE>). All algorithms used herein take =
parameters=20
but in many cases the parameters are implicit. For example, a=20
<CODE>SignatureMethod</CODE> is implicitly given two parameters: the =
keying info=20
and the output of <CODE>CanonicalizationMethod</CODE>. Explicit =
additional=20
parameters to an algorithm appear as content elements within the =
algorithm role=20
element. Such parameter elements have a descriptive element name, which =
is=20
frequently algorithm specific, and MUST be in the XML Signature =
namespace or an=20
algorithm specific namespace. </P>
<P>This specification defines a set of algorithms, their URIs, and =
requirements=20
for implementation. Requirements are specified over implementation, not =
over=20
requirements for signature use. Furthermore, the mechanism is =
extensible;=20
alternative algorithms may be used by signature applications. </P>
<DL>
  <DT>Digest=20
  <DD>
  <OL>
    <LI>Required SHA1<BR><A=20
    =
href=3D"http://www.w3.org/2000/09/xmldsig#sha1">http://www.w3.org/2000/09=
/xmldsig#sha1</A>=20
    </LI></OL>
  <DT>Encoding=20
  <DD>
  <OL>
    <LI>Required base64<BR><A=20
    href=3D"http://www.w3.org/2000/09/xmldsig#base64"><SPAN=20
    style=3D"FONT-WEIGHT: =
normal">http://www.w3.org/2000/09/xmldsig#</SPAN>base64</A>=20
    </LI></OL>
  <DT>MAC=20
  <DD>
  <OL>
    <LI>Required HMAC-SHA1<BR><A=20
    =
href=3D"http://www.w3.org/2000/09/xmldsig#hmac-sha1">http://www.w3.org/20=
00/09/xmldsig#hmac-sha1</A>=20
    </LI></OL>
  <DT>Signature=20
  <DD>
  <OL>
    <LI>Required DSAwithSHA1 (DSS)<BR><A=20
    href=3D"http://www.w3.org/2000/09/xmldsig#dsa-sha1"><SPAN=20
    style=3D"FONT-WEIGHT: =
normal">http://www.w3.org/2000/09/xmldsig#</SPAN>dsa-sha1</A>=20

    <LI>Recommended RSAwithSHA1<BR><A=20
    href=3D"http://www.w3.org/2000/09/xmldsig#rsa-sha1"><SPAN=20
    style=3D"FONT-WEIGHT: =
normal">http://www.w3.org/2000/09/xmldsig#</SPAN>rsa-sha1</A>=20
    </LI></OL>
  <DT>Canonicalization=20
  <DD>
  <OL>
    <LI>Required Canonical XML (omits comments)<BR><A=20
    =
href=3D"http://www.w3.org/TR/2001/REC-xml-c14n-20010315">http://www.w3.or=
g/TR/2001/REC-xml-c14n-20010315</A>=20

    <LI>Recommended Canonical XML with Comments<BR><A=20
    =
href=3D"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments">htt=
p://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments</A>=20
    </LI></OL>
  <DT>Transform=20
  <DD>
  <OL>
    <LI>Optional XSLT<BR><A=20
    =
href=3D"http://www.w3.org/TR/1999/REC-xslt-19991116">http://www.w3.org/TR=
/1999/REC-xslt-19991116</A>=20

    <LI>Recommended XPath<BR><A=20
    =
href=3D"http://www.w3.org/TR/1999/REC-xpath-19991116">http://www.w3.org/T=
R/1999/REC-xpath-19991116</A>=20

    <LI>Required Enveloped Signature*<BR><A=20
    =
href=3D"http://www.w3.org/2000/09/xmldsig#enveloped-signature">http://www=
.w3.org/2000/09/xmldsig#enveloped-signature</A>=20
    </LI></OL></DD></DL>
<P>* The Enveloped Signature transform removes the =
<CODE>Signature</CODE>=20
element from the calculation of the signature when the signature is =
within the=20
content that it is being signed. This MAY be implemented via the =
RECOMMENDED=20
XPath specification specified in 6.6.4: <A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-EnvelopedSignature">Envelo=
ped=20
Signature Transform</A>; it MUST have the same effect as that specified =
by the=20
<A href=3D"http://www.w3.org/TR/xmldsig-core/#sec-XPath">XPath =
Transform</A>. </P>
<H3>6.2 <A id=3Dsec-MessageDigests name=3Dsec-MessageDigests>Message =
Digests</A>=20
</H3>
<P>Only one digest algorithm is defined herein. However, it is expected =
that one=20
or more additional strong digest algorithms will be developed in =
connection with=20
the US Advanced Encryption Standard effort. Use of <A=20
href=3D"http://www.ietf.org/rfc/rfc1321.txt">MD5</A> [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-MD5">MD5</A>] is NOT =
RECOMMENDED=20
because recent advances in cryptanalysis have cast doubt on its =
strength. </P>
<H4>6.2.1 <A id=3Dsec-SHA-1 name=3Dsec-SHA-1>SHA-1</A> </H4>
<DL>
  <DT>Identifier:=20
  <DD><A href=3D"http://www.w3.org/2000/09/xmldsig#sha1" id=3Dsha1=20
  name=3Dsha1>http://www.w3.org/2000/09/xmldsig#sha1</A> </DD></DL>
<P>The <A=20
href=3D"http://csrc.nist.gov/publications/fips/fips180-1/fip180-1.txt">SH=
A-1</A>=20
algorithm [<A =
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-SHA-1">SHA-1</A>]=20
takes no explicit parameters. An example of an SHA-1 DigestAlg element =
is: </P><PRE class=3Dxml-example><CODE>&lt;DigestMethod =
Algorithm=3D"</CODE><SPAN style=3D"FONT-WEIGHT: =
normal">http://www.w3.org/2000/09/xmldsig#</SPAN><CODE>sha1"/&gt;</CODE>
</PRE>
<P>A SHA-1 digest is a 160-bit string. The content of the DigestValue =
element=20
shall be the base64 encoding of this bit string viewed as a 20-octet =
octet=20
stream. For example, the DigestValue element for the message digest: =
</P><PRE class=3Dxml-example>   A9993E36 4706816A BA3E2571 7850C26C =
9CD0D89D
</PRE>
<P>from Appendix A of the SHA-1 standard would be: </P><PRE =
class=3Dxml-example>   =
&lt;DigestValue&gt;qZk+NkcGgWq6PiVxeFDCbJzQ2J0=3D&lt;/DigestValue&gt;
</PRE>
<H3>6.3 <A id=3Dsec-MACs name=3Dsec-MACs>Message Authentication =
Codes</A> </H3>
<P>MAC algorithms take two implicit parameters, their keying material =
determined=20
from <CODE>KeyInfo</CODE> and the octet stream output by=20
<CODE>CanonicalizationMethod</CODE>. MACs and signature algorithms are=20
syntactically identical but a MAC implies a shared secret key. </P>
<H4>6.3.1 <A id=3Dsec-HMAC name=3Dsec-HMAC>HMAC</A> </H4>
<DL>
  <DT>Identifier:=20
  <DD><A href=3D"http://www.w3.org/2000/09/xmldsig#hmac-sha1" =
id=3Dhmac-sha1=20
  name=3Dhmac-sha1>http://www.w3.org/2000/09/xmldsig#hmac-sha1</A> =
</DD></DL>
<P>The <A href=3D"http://www.ietf.org/rfc/rfc2104.txt">HMAC</A> =
algorithm (RFC2104=20
[<A href=3D"http://www.w3.org/TR/xmldsig-core/#ref-HMAC">HMAC</A>]) =
takes the=20
truncation length in bits as a parameter; if the parameter is not =
specified then=20
all the bits of the hash are output. An example of an HMAC=20
<CODE>SignatureMethod</CODE> element: </P><PRE class=3Dxml-example>   =
&lt;SignatureMethod =
Algorithm=3D"http://www.w3.org/2000/09/xmldsig#hmac-sha1"&gt;
      &lt;HMACOutputLength&gt;128&lt;/HMACOutputLength&gt;
   &lt;/SignatureMethod&gt;
</PRE>
<P>The output of the HMAC algorithm is ultimately the output (possibly=20
truncated) of the chosen digest algorithm. This value shall be base64 =
encoded in=20
the same straightforward fashion as the output of the digest algorithms. =

Example: the SignatureValue element for the HMAC-SHA1 digest </P><PRE =
class=3Dxml-example>   9294727A 3638BB1C 13F48EF8 158BFC9D
</PRE>
<P>from the test vectors in [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-HMAC">HMAC</A>] would be =
</P><PRE class=3Dxml-example>   =
&lt;SignatureValue&gt;kpRyejY4uxwT9I74FYv8nQ=3D=3D&lt;/SignatureValue&gt;=

</PRE><PRE class=3Dxml-dtd>   Schema Definition:

   &lt;simpleType name=3D"HMACOutputLengthType"&gt;
     &lt;restriction base=3D"integer"/&gt;
   &lt;/simpleType&gt;
</PRE><PRE class=3Dxml-dtd>   DTD:

   &lt;!ELEMENT HMACOutputLength (#PCDATA)&gt;
</PRE>
<H3>6.4 <A id=3Dsec-SignatureAlg name=3Dsec-SignatureAlg>Signature =
Algorithms</A>=20
</H3>
<P>Signature algorithms take two implicit parameters, their keying =
material=20
determined from <CODE>KeyInfo</CODE> and the octet stream output by=20
<CODE>CanonicalizationMethod</CODE>. Signature and MAC algorithms are=20
syntactically identical but a signature implies public key cryptography. =
</P>
<H4>6.4.1 <A id=3Dsec-DSA name=3Dsec-DSA>DSA</A> </H4>
<DL>
  <DT>Identifier:=20
  <DD><A href=3D"http://www.w3.org/2000/09/xmldsig#dsa-sha1" =
id=3Ddsa-sha1=20
  name=3Ddsa-sha1>http://www.w3.org/2000/09/xmldsig#dsa-sha1</A> =
</DD></DL>
<P>The DSA algorithm [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-DSS">DSS</A>] takes no =
explicit=20
parameters. An example of a DSA <CODE>SignatureMethod</CODE> element is: =
</P><PRE class=3Dxml-example>   <CODE>&lt;SignatureMethod =
Algorithm=3D"http://www.w3.org/2000/09/xmldsig#dsa-sha1"/&gt;</CODE>
</PRE>
<P>The output of the DSA algorithm consists of a pair of integers =
usually=20
referred by the pair (r, s). The signature value consists of the base64 =
encoding=20
of the concatenation of two octet-streams that respectively result from =
the=20
octet-encoding of the values r and s in that order. Integer to =
octet-stream=20
conversion must be done according to the I2OSP operation defined in the =
<A=20
href=3D"http://www.ietf.org/rfc/rfc2437.txt">RFC 2437</A> [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-PKCS1">PKCS1</A>] =
specification=20
with a <CODE>l</CODE> parameter equal to 20. For example, the =
SignatureValue=20
element for a DSA signature (<CODE>r</CODE>, <CODE>s</CODE>) with values =

specified in hexadecimal: </P><PRE class=3Dxml-example>   <CODE>r =3D =
8BAC1AB6 6410435C B7181F95 B16AB97C 92B341C0</CODE>=20
   <CODE>s =3D 41E2345F 1F56DF24 58F426D1 55B4BA2D B6DCD8C8</CODE>
</PRE>
<P>from the example in Appendix 5 of the DSS standard would be </P><PRE =
class=3Dxml-example>   <CODE>&lt;SignatureValue&gt;</CODE>
   =
<CODE>i6watmQQQ1y3GB+VsWq5fJKzQcBB4jRfH1bfJFj0JtFVtLotttzYyA=3D=3D&lt;/Si=
gnatureValue&gt;</CODE>
</PRE>
<H4>6.4.2 <A id=3Dsec-PKCS1 name=3Dsec-PKCS1>PKCS1</A> (RSA-SHA1) </H4>
<DL>
  <DT>Identifier:=20
  <DD><A href=3D"http://www.w3.org/2000/09/xmldsig#rsa-sha1" =
id=3Drsa-sha1=20
  name=3Drsa-sha1>http://www.w3.org/2000/09/xmldsig#rsa-sha1</A> =
</DD></DL>
<P>The expression "RSA algorithm" as used in this draft refers to the=20
RSASSA-PKCS1-v1_5 algorithm described in <A=20
href=3D"http://www.ietf.org/rfc/rfc2437.txt">RFC 2437</A> [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-PKCS1">PKCS1</A>]. The =
RSA=20
algorithm takes no explicit parameters. An example of an RSA =
SignatureMethod=20
element is: </P><PRE class=3Dxml-example>   <CODE>&lt;SignatureMethod =
Algorithm=3D"http://www.w3.org/2000/09/xmldsig#rsa-sha1"/&gt;</CODE>
</PRE>
<P>The <CODE>SignatureValue</CODE> content for an RSA signature is the =
base64=20
[<A href=3D"http://www.w3.org/TR/xmldsig-core/#ref-MIME">MIME</A>] =
encoding of the=20
octet string computed as per <A =
href=3D"http://www.ietf.org/rfc/rfc2437.txt">RFC=20
2437</A> [<A =
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-PKCS1">PKCS1</A>,=20
section 8.1.1: Signature generation for the RSASSA-PKCS1-v1_5 signature =
scheme].=20
As specified in the EMSA-PKCS1-V1_5-ENCODE function <A=20
href=3D"http://www.ietf.org/rfc/rfc2437.txt">RFC 2437</A> [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-PKCS1">PKCS1</A>, section =
9.2.1],=20
the value input to the signature function MUST contain a pre-pended =
algorithm=20
object identifier for the hash function, but the availability of an =
ASN.1 parser=20
and recognition of OIDs is not required of a signature verifier. The =
PKCS#1 v1.5=20
representation appears as: </P><PRE class=3Dxml-example>   CRYPT (PAD =
(ASN.1 (OID, DIGEST (data))))
</PRE>
<P>Note that the padded ASN.1 will be of the following form: </P><PRE =
class=3Dxml-example>   01 | FF* | 00 | prefix | hash
</PRE>
<P>where "|" is concatenation, "01", "FF", and "00" are fixed octets of =
the=20
corresponding hexadecimal value, "hash" is the SHA1 digest of the data, =
and=20
"prefix" is the ASN.1 BER SHA1 algorithm designator prefix required in =
PKCS1=20
[RFC 2437], that is, </P><PRE class=3Dxml-example>   hex 30 21 30 09 06 =
05 2B 0E 03 02 1A 05 00 04 14
</PRE>
<P>This prefix is included to make it easier to use standard =
cryptographic=20
libraries. The FF octet MUST be repeated the maximum number of times =
such that=20
the value of the quantity being CRYPTed is one octet shorter than the =
RSA=20
modulus. </P>
<P>The resulting base64 [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-MIME">MIME</A>] string is =
the value=20
of the child text node of the SignatureValue element, e.g. </P><PRE =
class=3Dxml-example>&lt;SignatureValue&gt;
IWijxQjUrcXBYoCei4QxjWo9Kg8D3p9tlWoT4t0/gyTE96639In0FZFY2/rvP+/bMJ01EArmK=
ZsR5VW3rwoPxw=3D
&lt;/SignatureValue&gt;
</PRE>
<H3>6.5 <A id=3Dsec-c14nAlg name=3Dsec-c14nAlg>Canonicalization =
Algorithms</A> </H3>
<P>If canonicalization is performed over octets, the canonicalization =
algorithms=20
take two implicit parameters: the content and its charset. The charset =
is=20
derived according to the rules of the transport protocols and media =
types (e.g,=20
RFC2376 [<A =
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XML-MT">XML-MT</A>]=20
defines the media types for XML). This information is necessary to =
correctly=20
sign and verify documents and often requires careful server side =
configuration.=20
</P>
<P>Various canonicalization algorithms require conversion to [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-UTF-8">UTF-8</A>].The two =

algorithms below understand at least [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-UTF-8">UTF-8</A>] and [<A =

href=3D"http://www.w3.org/TR/xmldsig-core/#ref-UTF-16">UTF-16</A>] as =
input=20
encodings. We RECOMMEND that externally specified algorithms do the =
same.=20
Knowledge of other encodings is OPTIONAL. </P>
<P>Various canonicalization algorithms transcode from a non-Unicode =
encoding to=20
Unicode. The two algorithms below perform text normalization during =
transcoding=20
[<A href=3D"http://www.w3.org/TR/xmldsig-core/#ref-NFC">NFC</A>, <A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-NFC-Corrigendum">NFC-Corri=
gendum</A>].=20
We RECOMMEND that externally specified canonicalization algorithms do =
the same.=20
(Note, there can be ambiguities in converting existing charsets to =
Unicode, for=20
an example see the XML Japanese Profile [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XML-Japanese">XML-Japanese=
</A>]=20
Note.) </P>
<H4>6.5.1 <A id=3Dsec-Canonical name=3Dsec-Canonical>Canonical</A> XML =
</H4>
<DL>
  <DT>Identifier for REQUIRED Canonical XML (omits comments):=20
  <DD><A=20
  =
href=3D"http://www.w3.org/TR/2001/REC-xml-c14n-20010315">http://www.w3.or=
g/TR/2001/REC-xml-c14n-20010315</A>=20
  </DD></DL>
<DL>
  <DT>Identifier for Canonical XML with Comments:=20
  <DD><A=20
  =
href=3D"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments">htt=
p://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments</A>=20
  </DD></DL>
<P>An example of an XML canonicalization element is: </P><PRE =
class=3Dxml-example>   <CODE>&lt;CanonicalizationMethod =
Algorithm=3D"</CODE>http://www.w3.org/TR/2001/REC-xml-c14n-20010315<CODE>=
"/&gt;</CODE>
</PRE>
<P>The normative specification of Canonical XML is [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XML-C14N">XML-C14N</A>]. =
The=20
algorithm is capable of taking as input either an octet stream or an =
XPath=20
node-set (or sufficiently functional alternative). The algorithm =
produces an=20
octet stream as output. Canonical XML is easily parameterized (via an =
additional=20
URI) to omit or retain comments. </P>
<H3>6.6 <A id=3Dsec-TransformAlg =
name=3Dsec-TransformAlg><CODE>Transform</CODE></A>=20
Algorithms </H3>
<P>A <CODE>Transform</CODE> algorithm has a single implicit parameter: =
an octet=20
stream from the <CODE>Reference</CODE> or the output of an earlier=20
<CODE>Transform</CODE>. </P>
<P>Application developers are strongly encouraged to support all =
transforms=20
listed in this section as RECOMMENDED unless the application environment =
has=20
resource constraints that would make such support impractical. =
Compliance with=20
this recommendation will maximize application interoperability and =
libraries=20
should be available to enable support of these transforms in =
applications=20
without extensive development. </P>
<H4>6.6.1 <A id=3Dsec-Canonicalization=20
name=3Dsec-Canonicalization>Canonicalization</A> </H4>
<P>Any canonicalization algorithm that can be used for=20
<CODE>CanonicalizationMethod</CODE> (such as those in&nbsp; <A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-c14nAlg">Canonicalization =

Algorithms</A> (section 6.5)) can be used as a <CODE>Transform</CODE>. =
</P>
<H4>6.6.2 <A id=3Dsec-Base-64 name=3Dsec-Base-64>Base64</A> </H4>
<DL>
  <DT>Identifiers:=20
  <DD><A href=3D"http://www.w3.org/2000/09/xmldsig#base64" id=3Dbase64=20
  name=3Dbase64>http://www.w3.org/2000/09/xmldsig#base64</A> </DD></DL>
<P>The normative specification for base64 decoding transforms is [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-MIME">MIME</A>]. The =
base64=20
<CODE>Transform</CODE> element has no content. The input is decoded by =
the=20
algorithms. This transform is useful if an application needs to sign the =
raw=20
data associated with the encoded content of an element. </P>
<P>This transform requires an octet stream for input. If an XPath =
node-set (or=20
sufficiently functional alternative) is given as input, then it is =
converted to=20
an octet stream by performing operations logically equivalent to 1) =
applying an=20
XPath transform with expression <CODE>self::text()</CODE>, then 2) =
taking the=20
string-value of the node-set. Thus, if an XML element is identified by a =

barename XPointer in the <CODE>Reference</CODE> URI, and its content =
consists=20
solely of base64 encoded character data, then this transform =
automatically=20
strips away the start and end tags of the identified element and any of =
its=20
descendant elements as well as any descendant comments and processing=20
instructions. The output of this transform is an octet stream. </P>
<H4>6.6.3 <A id=3Dsec-XPath name=3Dsec-XPath>XPath</A> Filtering </H4>
<DL>
  <DT>Identifier:=20
  <DD><A=20
  =
href=3D"http://www.w3.org/TR/1999/REC-xpath-19991116">http://www.w3.org/T=
R/1999/REC-xpath-19991116</A>=20
  </DD></DL>
<P>The normative specification for XPath expression evaluation is [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XPath">XPath</A>]. The =
XPath=20
expression to be evaluated appears as the character content of a =
transform=20
parameter child element named <CODE>XPath</CODE>. </P>
<P>The input required by this transform is an XPath node-set. Note that =
if the=20
actual input is an XPath node-set resulting from a null URI or barename =
XPointer=20
dereference, then comment nodes will have been omitted. If the actual =
input is=20
an octet stream, then the application MUST convert the octet stream to =
an XPath=20
node-set suitable for use by Canonical XML with Comments. (A subsequent=20
application of the REQUIRED Canonical XML algorithm would strip away =
these=20
comments.) In other words, the input node-set should be equivalent to =
the one=20
that would be created by the following process: </P>
<OL>
  <LI>Initialize an XPath evaluation context by setting the initial node =
equal=20
  to the input XML document's root node, and set the context position =
and size=20
  to 1.=20
  <LI>Evaluate the XPath expression <CODE>(//. | //@* | =
//namespace::*)</CODE>=20
  </LI></OL>
<P>The evaluation of this expression includes all of the document's =
nodes=20
(including comments) in the node-set representing the octet stream. </P>
<P>The transform output is also an XPath node-set. The XPath expression=20
appearing in the <CODE>XPath</CODE> parameter is evaluated once for each =
node in=20
the input node-set. The result is converted to a boolean. If the boolean =
is=20
true, then the node is included in the output node-set. If the boolean =
is false,=20
then the node is omitted from the output node-set. </P>
<P><STRONG>Note:</STRONG> Even if the input node-set has had comments =
removed,=20
the comment nodes still exist in the underlying parse tree and can =
separate text=20
nodes. For example, the markup <CODE>&lt;e&gt;Hello, &lt;!-- comment=20
--&gt;world!&lt;/e&gt;</CODE> contains two text nodes. Therefore, the =
expression=20
<CODE>self::text()[string()=3D"Hello, world!"]</CODE> would fail. Should =
this=20
problem arise in the application, it can be solved by either =
canonicalizing the=20
document before the XPath transform to physically remove the comments or =
by=20
matching the node based on the parent element's string value (e.g. by =
using the=20
expression <CODE>self::text()[string(parent::e)=3D"Hello, =
world!"]</CODE>). </P>
<P>The primary purpose of this transform is to ensure that only =
specifically=20
defined changes to the input XML document are permitted after the =
signature is=20
affixed. This is done by omitting precisely those nodes that are allowed =
to=20
change once the signature is affixed, and including all other input =
nodes in the=20
output. It is the responsibility of the XPath expression author to =
include all=20
nodes whose change could affect the interpretation of the transform =
output in=20
the application context. </P>
<P>An important scenario would be a document requiring two enveloped =
signatures.=20
Each signature must omit itself from its own digest calculations, but it =
is also=20
necessary to exclude the second signature element from the digest =
calculations=20
of the first signature so that adding the second signature does not =
break the=20
first signature. </P>
<P>The XPath transform establishes the following evaluation context for =
each=20
node of the input node-set: </P>
<UL>
  <LI>A <STRONG>context node</STRONG> equal to a node of the input =
node-set.=20
  <LI>A <STRONG>context position</STRONG>, initialized to 1.=20
  <LI>A <STRONG>context size</STRONG>, initialized to 1.=20
  <LI>A <STRONG>library of functions</STRONG> equal to the function set =
defined=20
  in [<A =
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XPath">XPath]</A> plus a=20
  function named <STRONG><A=20
  =
href=3D"http://www.w3.org/TR/xmldsig-core/#function-here">here</A></STRON=
G>.=20
  <LI>A set of variable bindings. No means for initializing these is =
defined.=20
  Thus, the set of variable bindings used when evaluating the XPath =
expression=20
  is empty, and use of a variable reference in the XPath expression =
results in=20
  an error.=20
  <LI>The set of namespace declarations in scope for the XPath =
expression.=20
</LI></UL>
<P>As a result of the context node setting, the XPath expressions =
appearing in=20
this transform will be quite similar to those used in used in [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XSLT">XSLT</A>], except =
that the=20
size and position are always 1 to reflect the fact that the transform is =

automatically visiting every node (in XSLT, one recursively calls the =
command=20
<CODE>apply-templates</CODE> to visit the nodes of the input tree). </P>
<P><STRONG>The function <CODE>here()</CODE> is defined as =
follows:</STRONG> </P>
<P><A id=3Dfunction-here name=3Dfunction-here><STRONG>Function:</STRONG> =

<EM>node-set</EM> <STRONG>here</STRONG>()</A> </P>
<P>The <STRONG><A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#function-here">here</A></STRON=
G>=20
function returns a node-set containing the attribute or processing =
instruction=20
node or the parent element of the text node that directly bears the =
XPath=20
expression.&nbsp; This expression results in an error if the containing =
XPath=20
expression does not appear in the same XML document against which the =
XPath=20
expression is being evaluated. </P>
<P>As an example, consider creating an enveloped signature (a=20
<CODE>Signature</CODE> element that is a descendant of an element being =
signed).=20
Although the signed content should not be changed after signing, the =
elements=20
within the <CODE>Signature</CODE> element are changing (e.g. the digest =
value=20
must be put inside the <CODE>DigestValue</CODE> and the=20
<CODE>SignatureValue</CODE> must be subsequently calculated). One way to =
prevent=20
these changes from invalidating the digest value in =
<CODE>DigestValue</CODE> is=20
to add an XPath <CODE>Transform</CODE> that omits all =
<CODE>Signature</CODE>=20
elements and their descendants. For example, </P><PRE =
class=3Dxml-example>   &lt;Document&gt;
   ...  =20
   &lt;Signature xmlns=3D"http://www.w3.org/2000/09/xmldsig#"&gt;
     &lt;SignedInfo&gt;
      ...
       &lt;Reference URI=3D""&gt;
         &lt;Transforms&gt;
           &lt;Transform =
Algorithm=3D"http://www.w3.org/TR/1999/REC-xpath-19991116"&gt;
             &lt;XPath xmlns:dsig=3D"&amp;dsig;"&gt;
             not(ancestor-or-self::dsig:Signature)
             &lt;/XPath&gt;
           &lt;/Transform&gt;
         &lt;/Transforms&gt;
         &lt;DigestMethod =
Algorithm=3D"http://www.w3.org/2000/09/xmldsig#sha1"/&gt;
         &lt;DigestValue&gt;&lt;/DigestValue&gt;
       &lt;/Reference&gt;
     &lt;/SignedInfo&gt;
     &lt;SignatureValue&gt;&lt;/SignatureValue&gt;
    &lt;/Signature&gt;
    ...
   &lt;/Document&gt;
</PRE>
<P>Due to the null <CODE>Reference</CODE> URI in this example, the XPath =

transform input node-set contains all nodes in the entire parse tree =
starting at=20
the root node (except the comment nodes). For each node in this =
node-set, the=20
node is included in the output node-set except if the node or one of its =

ancestors has a tag of <CODE>Signature</CODE> that is in the namespace =
given by=20
the replacement text for the entity <CODE>&amp;dsig;</CODE>. </P>
<P>A more elegant solution uses the <STRONG><A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#function-here">here</A></STRON=
G>=20
function to omit only the <CODE>Signature</CODE> containing the XPath =
Transform,=20
thus allowing enveloped signatures to sign other signatures. In the =
example=20
above, use the <CODE>XPath</CODE> element: </P><PRE class=3Dxml-example> =
  &lt;XPath xmlns:dsig=3D"&amp;dsig;"&gt;
   count(ancestor-or-self::dsig:Signature |
   here()/ancestor::dsig:Signature[1]) &gt;
   count(ancestor-or-self::dsig:Signature)&lt;/XPath&gt;
</PRE>
<P>Since the XPath equality operator converts node sets to string values =
before=20
comparison, we must instead use the XPath union operator (|). For each =
node of=20
the document, the predicate expression is true if and only if the =
node-set=20
containing the node and its <CODE>Signature</CODE> element ancestors =
does not=20
include the enveloped <CODE>Signature</CODE> element containing the =
XPath=20
expression (the union does not produce a larger set if the enveloped=20
<CODE>Signature</CODE> element is in the node-set given by=20
<CODE>ancestor-or-self::Signature</CODE>). </P>
<H4>6.6.4 <A id=3Dsec-EnvelopedSignature =
name=3Dsec-EnvelopedSignature>Enveloped=20
Signature</A> Transform </H4>
<DL>
  <DT>Identifier:=20
  <DD><A href=3D"http://www.w3.org/2000/09/xmldsig#enveloped-signature"=20
  id=3Denveloped-signature=20
  =
name=3Denveloped-signature>http://www.w3.org/2000/09/xmldsig#enveloped-si=
gnature</A>=20
  </DD></DL>
<P>An enveloped signature transform <STRONG><EM>T</EM></STRONG> removes =
the=20
whole <CODE>Signature</CODE> element containing =
<STRONG><EM>T</EM></STRONG> from=20
the digest calculation of the <CODE>Reference</CODE> element containing=20
<STRONG><EM>T</EM></STRONG>. The entire string of characters used by an =
XML=20
processor to match the <CODE>Signature</CODE> with the XML production=20
<CODE>element</CODE> is removed. The output of the transform is =
equivalent to=20
the output that would result from replacing <STRONG><EM>T</EM></STRONG> =
with an=20
XPath transform containing the following <CODE>XPath</CODE> parameter =
element:=20
</P><PRE class=3Dxml-example>   &lt;XPath xmlns:dsig=3D"&amp;dsig;"&gt;
   count(ancestor-or-self::dsig:Signature |
   here()/ancestor::dsig:Signature[1]) &gt;
   count(ancestor-or-self::dsig:Signature)&lt;/XPath&gt;
</PRE>
<P>The input and output requirements of this transform are identical to =
those of=20
the XPath transform, but may only be applied to a node-set from its =
parent XML=20
document. Note that it is not necessary to use an XPath expression =
evaluator to=20
create this transform. However, this transform MUST produce output in =
exactly=20
the same manner as the XPath transform parameterized by the XPath =
expression=20
above. </P>
<H4>6.6.5 <A id=3Dsec-XSLT name=3Dsec-XSLT>XSLT</A> Transform </H4>
<DL>
  <DT>Identifier:=20
  <DD><A=20
  =
href=3D"http://www.w3.org/TR/1999/REC-xslt-19991116">http://www.w3.org/TR=
/1999/REC-xslt-19991116</A>=20
  </DD></DL>
<P>The normative specification for XSL Transformations is [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XSLT">XSLT</A>]. =
Specification of a=20
namespace-qualified stylesheet element, which MUST be the sole child of =
the=20
<CODE>Transform</CODE> element, indicates that the specified style sheet =
should=20
be used. Whether this instantiates in-line processing of local XSLT =
declarations=20
within the resource is determined by the XSLT processing model; the =
ordered=20
application of multiple stylesheet may require multiple =
<CODE>Transforms</CODE>.=20
No special provision is made for the identification of a remote =
stylesheet at a=20
given URI because it can be communicated via an <A=20
href=3D"http://www.w3.org/TR/1999/REC-xslt-19991116#section-Combining-Sty=
lesheets"><CODE>xsl:include</CODE></A>=20
or <A=20
href=3D"http://www.w3.org/TR/1999/REC-xslt-19991116#section-Combining-Sty=
lesheets"><CODE>xsl:import</CODE></A>=20
within the <CODE>stylesheet</CODE> child of the <CODE>Transform</CODE>. =
</P>
<P>This transform requires an octet stream as input. If the actual input =
is an=20
XPath node-set, then the signature application should attempt to convert =
it to=20
octets (apply <A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-Canonical">Canonical =
XML</A>]) as=20
described in <A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-ReferenceProcessingModel">=
the=20
Reference Processing Model</A> (section 4.3.3.2). </P>
<P>The output of this transform is an octet stream. The processing rules =
for the=20
XSL style sheet or transform element are stated in the XSLT =
specification [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XSLT">XSLT</A>]. We =
RECOMMEND that=20
XSLT transform authors use an output method of <CODE>xml</CODE> for XML =
and=20
HTML. As XSLT implementations do not produce consistent serializations =
of their=20
output, we further RECOMMEND inserting a transform after the XSLT =
transform to=20
canonicalize the output. These steps will help to ensure =
interoperability of the=20
resulting signatures among applications that support the XSLT transform. =
Note=20
that if the output is actually HTML, then the result of these steps is =
logically=20
equivalent [<A =
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XHTML">XHTML</A>].=20
</P>
<H2>7.0 <A id=3Dsec-XML-Canonicalization =
name=3Dsec-XML-Canonicalization>XML=20
Canonicalization</A> and Syntax Constraint Considerations </H2>
<P>Digital signatures only work if the verification calculations are =
performed=20
on exactly the same bits as the signing calculations. If the surface=20
representation of the signed data can change between signing and =
verification,=20
then some way to standardize the changeable aspect must be used before =
signing=20
and verification. For example, even for simple ASCII text there are at =
least=20
three widely used line ending sequences. If it is possible for signed =
text to be=20
modified from one line ending convention to another between the time of =
signing=20
and signature verification, then the line endings need to be =
canonicalized to a=20
standard form before signing and verification or the signatures will =
break. </P>
<P>XML is subject to surface representation changes and to processing =
which=20
discards some surface information. For this reason, XML digital =
signatures have=20
a provision for indicating canonicalization methods in the signature so =
that a=20
verifier can use the same canonicalization as the signer. </P>
<P>Throughout this specification we distinguish between the =
canonicalization of=20
a <CODE>Signature</CODE> element and other signed XML data objects. It =
is=20
possible for an isolated XML document to be treated as if it were binary =
data so=20
that no changes can occur. In that case, the digest of the document will =
not=20
change and it need not be canonicalized if it is signed and verified as =
such.=20
However, XML that is read and processed using standard XML parsing and=20
processing techniques is frequently changed such that some of its =
surface=20
representation information is lost or modified. In particular, this will =
occur=20
in many cases for the <CODE>Signature</CODE> and enclosed=20
<CODE>SignedInfo</CODE> elements since they, and possibly an =
encompassing XML=20
document, will be processed as XML. </P>
<P>Similarly, these considerations apply to <CODE>Manifest</CODE>,=20
<CODE>Object</CODE>, and <CODE>SignatureProperties</CODE> elements if =
those=20
elements have been digested, their <CODE>DigestValue</CODE> is to be =
checked,=20
and they are being processed as XML. </P>
<P>The kinds of changes in XML that may need to be canonicalized can be =
divided=20
into four categories. There are those related to the basic [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XML">XML</A>], as =
described in 7.1=20
below. There are those related to [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-DOM">DOM</A>], [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-SAX">SAX</A>], or similar =

processing as described in 7.2 below. Third, there is the possibility of =
coded=20
character set conversion, such as between UTF-8 and UTF-16, both of =
which=20
all&nbsp; [<A =
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XML">XML</A>]=20
compliant processors are required to support, which is described in the=20
paragraph immediately below. And, fourth, there are changes that related =
to=20
namespace declaration and XML namespace attribute context as described =
in 7.3=20
below. </P>
<P>Any canonicalization algorithm should yield output in a specific =
fixed coded=20
character set. All canonicalization <A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-c14nAlg">algorithms</A> =
identified=20
in this document use UTF-8 (without a byte order mark (BOM)) and do not =
provide=20
character normalization. We RECOMMEND that signature applications create =
XML=20
content (<CODE>Signature</CODE> elements and their descendents/content) =
in=20
Normalization Form C [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-NFC">NFC</A>, <A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-NFC-Corrigendum">NFC-Corri=
gendum</A>]=20
and check that any XML being consumed is in that form as well; (if not,=20
signatures may consequently fail to validate). Additionally, none of =
these=20
algorithms provide data type normalization. Applications that normalize =
data=20
types in varying formats (e.g., (true, false) or (1,0)) may not be able =
to=20
validate each other's signatures. </P>
<H3>7.1 <A id=3Dsec-XML-1 name=3Dsec-XML-1>XML 1.0</A>, Syntax =
Constraints, and=20
Canonicalization </H3>
<P>XML 1.0 [<A =
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XML">XML</A>]=20
defines an interface where a conformant application reading XML is given =
certain=20
information from that XML and not other information. In particular, </P>
<OL>
  <LI>line endings are normalized to the single character #xA by =
dropping #xD=20
  characters if they are immediately followed by a #xA and replacing =
them with=20
  #xA in all other cases,=20
  <LI>missing attributes declared to have default values are provided to =
the=20
  application as if present with the default value,&nbsp;=20
  <LI>character references are replaced with the corresponding =
character,=20
  <LI>entity references are replaced with the corresponding declared =
entity,=20
  <LI>attribute values are normalized by=20
  <OL>
    <LI>replacing character and entity references as above,=20
    <LI>replacing occurrences of #x9, #xA, and #xD with #x20 (space) =
except that=20
    the sequence #xD#xA is replaced by a single space, and=20
    <LI>if the attribute is not declared to be CDATA, stripping all =
leading and=20
    trailing spaces and replacing all interior runs of spaces with a =
single=20
    space. </LI></OL></LI></OL>
<P>Note that items (2), (4), and (5.3) depend on the presence of a =
schema, DTD=20
or similar declarations. The <CODE>Signature</CODE> element type is <A=20
href=3D"http://www.w3.org/TR/2000/WD-xmlschema-1-20000407/#cvc-elt-lax">l=
axly=20
schema valid</A> [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XML-schema">XML-schema</A>=
],=20
consequently external XML or even XML within the same document as the =
signature=20
may be (only) well-formed or from another namespace (where permitted by =
the=20
signature schema); the noted items may not be present. Thus, a signature =
with=20
such content will only be verifiable by other signature applications if =
the=20
following syntax constraints are observed when generating any signed =
material=20
including the <CODE>SignedInfo</CODE> element: </P>
<OL>
  <LI>attributes having default values be explicitly present,=20
  <LI>all entity references (except "amp", "lt", "gt", "apos", "quot", =
and other=20
  character entities not representable in the encoding chosen) be =
expanded,=20
  <LI>attribute value white space be normalized </LI></OL>
<H3>7.2 <A id=3Dsec-DOM-SAX name=3Dsec-DOM-SAX>DOM/SAX</A> Processing =
and=20
Canonicalization </H3>
<P>In addition to the canonicalization and syntax constraints discussed =
above,=20
many XML applications use the Document Object Model [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-DOM">DOM</A>] or the =
Simple API for=20
XML&nbsp; [<A =
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-SAX">SAX</A>]. DOM=20
maps XML into a tree structure of nodes and typically assumes it will be =
used on=20
an entire document with subsequent processing being done on this tree. =
SAX=20
converts XML into a series of events such as a start tag, content, etc. =
In=20
either case, many surface characteristics such as the ordering of =
attributes and=20
insignificant white space within start/end tags is lost. In addition, =
namespace=20
declarations are mapped over the nodes to which they apply, losing the =
namespace=20
prefixes in the source text and, in most cases, losing where namespace=20
declarations appeared in the original instance. </P>
<P>If an XML Signature is to be produced or verified on a system using =
the DOM=20
or SAX processing, a canonical method is needed to serialize the =
relevant part=20
of a DOM tree or sequence of SAX events. XML canonicalization =
specifications,=20
such as [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XML-C14N">XML-C14N</A>], =
are based=20
only on information which is preserved by DOM and SAX. For an XML =
Signature to=20
be verifiable by an implementation using DOM or SAX, not only must the =
<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#sec-XML-1">XML 1.0 syntax =
constraints=20
given in the previous section</A> be followed but an appropriate XML=20
canonicalization MUST be specified so that the verifier can re-serialize =
DOM/SAX=20
mediated input into the same octet stream that was signed. </P>
<H3>7.3 <A id=3Dsec-NamespaceContext =
name=3Dsec-NamespaceContext>Namespace=20
Context</A> and Portable Signatures </H3>
<P>In [<A =
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XPath">XPath</A>] and=20
consequently the Canonical XML data model an element has namespace nodes =
that=20
correspond to those declarations within the element and its ancestors: =
</P>
<BLOCKQUOTE>
  <P>"<STRONG>Note:</STRONG> An element <STRONG><EM>E</EM></STRONG> has=20
  namespace nodes that represent its namespace declarations <EM>as well =
as</EM>=20
  any namespace declarations made by its ancestors that have not been =
overridden=20
  in <STRONG><EM>E</EM></STRONG>'s declarations, the default namespace =
if it is=20
  non-empty, and the declaration of the prefix <CODE>xml</CODE>." [<A=20
  href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XML-C14N">XML-C14N</A>] =

</P></BLOCKQUOTE>
<P>When serializing a <CODE>Signature</CODE> element or signed XML data =
that's=20
the child of other elements using these data models, that =
<CODE>Signature</CODE>=20
element and its children, may contain namespace declarations from its =
ancestor=20
context. In addition, the Canonical XML and Canonical XML with Comments=20
algorithms import all xml namespace attributes (such as =
<CODE>xml:lang</CODE>)=20
from the nearest ancestor in which they are declared to the apex node of =

canonicalized XML unless they are already declared at that node. This =
may=20
frustrate the intent of the signer to create a signature in one context =
which=20
remains valid in another. For example, given a signature which is a =
child of=20
<CODE>B</CODE> and a grandchild of <CODE>A</CODE>: </P><PRE =
class=3Dxml-example,>   &lt;A xmlns:n1=3D"&amp;foo;"&gt;
     &lt;B xmlns:n2=3D"&amp;bar;"&gt;
       &lt;Signature xmlns=3D"&amp;dsig;"&gt;   ...
         &lt;Reference URI=3D"#signme"/&gt; ...
       &lt;/Signature&gt;
       &lt;C ID=3D"signme" xmlns=3D"&amp;baz;"/&gt;
     &lt;/B&gt;
   &lt;/A&gt;
</PRE>
<P>when either the element <CODE>B</CODE> or the signed element =
<CODE>C</CODE>=20
is moved into a [<A =
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-SOAP">SOAP</A>]=20
envelope for transport: </P><PRE class=3Dxml-example,>   =
&lt;SOAP:Envelope =
xmlns:SOAP=3D"http://schemas.xmlsoap.org/soap/envelope/"&gt;
     ...
     &lt;SOAP:Body&gt;
       &lt;B xmlns:n2=3D"&amp;bar;"&gt;
         &lt;Signature xmlns=3D"&amp;dsig;"&gt;
           ...
         &lt;/Signature&gt;
         &lt;C ID=3D"signme" xmlns=3D"&amp;baz;"/&gt;
       &lt;/B&gt;
     &lt;/SOAP:Body&gt;
   &lt;/SOAP:Envelope&gt;
</PRE>
<P>The canonical form of the signature in this context will contain new=20
namespace declarations from the <CODE>SOAP:Envelope</CODE> context, =
invalidating=20
the signature. Also, the canonical form will lack namespace declarations =
it may=20
have originally had from element <CODE>A</CODE>'s context, also =
invalidating the=20
signature. To avoid these problems, the application may: </P>
<OL>
  <LI>Rely upon the enveloping application to properly divorce its body =
(the=20
  signature payload) from the context (the envelope) before the =
signature is=20
  validated. Or,=20
  <LI>Use a canonicalization method that "repels/excludes" instead of =
"attracts"=20
  ancestor context. [<A=20
  href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XML-C14N">XML-C14N</A>] =

  purposefully attracts such context. </LI></OL>
<H2>8.0 <A id=3Dsec-Security name=3Dsec-Security>Security =
Considerations</A> </H2>
<P>The XML Signature specification provides a very flexible digital =
signature=20
mechanism. Implementors must give consideration to their application =
threat=20
models and to the following factors. </P>
<H3>8.1 <A id=3Dsec-Security-Transofrms=20
name=3Dsec-Security-Transofrms>Transforms</A> </H3>
<P>A requirement of this specification is to permit signatures to "apply =

to&nbsp;a part or totality of a XML document." (See [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XML-Signature-RD">XML-Sign=
ature-RD</A>,=20
section 3.1.3].) The <CODE>Transforms</CODE> mechanism meets this =
requirement by=20
permitting one to sign data derived from processing the content of the=20
identified resource. For instance, applications that wish to sign a =
form, but=20
permit users to enter limited field data without invalidating a previous =

signature on the form might use [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XPath">XPath</A>] to =
exclude those=20
portions the user needs to change. <CODE>Transforms</CODE> may be =
arbitrarily=20
specified and may include encoding transforms, canonicalization =
instructions or=20
even XSLT transformations. Three cautions are raised with respect to =
this=20
feature in the following sections. </P>
<P>Note, <A class=3Dlink-def=20
href=3D"http://www.w3.org/TR/xmldsig-core/#def-ValidationCore">core =
validation</A>=20
behavior does not confirm that the signed data was obtained by applying =
each=20
step of the indicated transforms. (Though it does check that the digest =
of the=20
resulting content matches that specified in the signature.)&nbsp; For =
example,=20
some applications may be satisfied with verifying an XML signature over =
a cached=20
copy of already transformed data. Other applications might require that =
content=20
be freshly dereferenced and transformed. </P>
<H4>8.1.1 <STRONG><A id=3Dsec-Secure name=3Dsec-Secure>Only What is =
Signed is=20
Secure</A></STRONG> </H4>
<P>First, obviously, signatures over a transformed document do not =
secure any=20
information discarded by transforms: only what is signed is secure. </P>
<P>Note that the use of Canonical&nbsp; XML [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XML-C14N">XML-C14N</A>] =
ensures=20
that all internal entities and XML namespaces are expanded within the =
content=20
being signed. All entities are replaced with their definitions and the =
canonical=20
form explicitly represents the namespace that an element would otherwise =

inherit. Applications that do not canonicalize XML content (especially =
the=20
<CODE>SignedInfo</CODE> element) SHOULD NOT use internal entities and =
SHOULD=20
represent the namespace explicitly within the content being signed since =
they=20
can not rely upon canonicalization to do this for them. Also, users =
concerned=20
with the integrity of the element type definitions associated with the =
XML=20
instance being signed may wish to sign those definitions as well (i.e., =
the=20
schema, DTD, or natural language description associated with the=20
namespace/identifier). </P>
<P>Second, an envelope containing signed information is not secured by =
the=20
signature. For instance, when an encrypted envelope contains a =
signature, the=20
signature does not protect the authenticity or integrity of unsigned =
envelope=20
headers nor its ciphertext form, it only secures the plaintext actually =
signed.=20
</P>
<H4>8.1.2 <A id=3Dsec-Seen name=3Dsec-Seen>Only What is "Seen" Should be =
Signed</A>=20
</H4>
<P>Additionally, the signature secures any information introduced by the =

transform: only what is "seen" (that which is represented to the user =
via=20
visual, auditory or other media) should be signed. If signing is =
intended to=20
convey the judgment or consent of a user (an automated mechanism or =
person),=20
then it is normally necessary to secure as exactly as practical the =
information=20
that was presented to that user. Note that this can be accomplished by =
literally=20
signing what was presented, such as the screen images shown a user. =
However,=20
this may result in data which is difficult for subsequent software to=20
manipulate. Instead, one can sign the data along with whatever filters, =
style=20
sheets, client profile or other information that affects its =
presentation. </P>
<H4>8.1.3 <A id=3Dsec-See name=3Dsec-See>"See" What is Signed</A> </H4>
<P>Just as a user should only sign what he or she "sees," persons and =
automated=20
mechanism that trust the validity of a transformed document on the basis =
of a=20
valid signature should operate over the data that was transformed =
(including=20
canonicalization) and signed, not the original pre-transformed data. =
This=20
recommendation applies to transforms specified within the signature as =
well as=20
those included as part of the document itself. For instance, if an XML =
document=20
includes an <A=20
href=3D"http://www.w3.org/TR/xslt#section-Creating-Processing-Instruction=
s">embedded=20
style sheet</A> [<A =
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XSLT">XSLT</A>]=20
it is the transformed document that should be represented to the user =
and=20
signed. To meet this recommendation where a document references an =
external=20
style sheet, the content of that external resource should also be signed =
as via=20
a signature <CODE>Reference</CODE> otherwise the content of that =
external=20
content might change which alters the resulting document without =
invalidating=20
the signature. </P>
<P>Some applications might operate over the original or intermediary =
data but=20
should be extremely careful about potential weaknesses introduced =
between the=20
original and transformed data. This is a trust decision about the =
character and=20
meaning of the transforms that an application needs to make with =
caution.=20
Consider a canonicalization algorithm that normalizes character case =
(lower to=20
upper) or character composition ('e and accent' to 'accented-e'). An =
adversary=20
could introduce changes that are normalized and consequently =
inconsequential to=20
signature validity but material to a DOM processor. For instance, by =
changing=20
the case of a character one might influence the result of an XPath =
selection. A=20
serious risk is introduced if that change is normalized for signature =
validation=20
but the processor operates over the original data and returns a =
different result=20
than intended. </P>
<P>As a result: </P>
<UL>
  <LI>All documents operated upon and generated by signature =
applications MUST=20
  be in [<A href=3D"http://www.w3.org/TR/xmldsig-core/#ref-NFC">NFC</A>, =
<A=20
  =
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-NFC-Corrigendum">NFC-Corri=
gendum</A>]=20
  (otherwise intermediate processors might unintentionally break the =
signature)=20
  <LI>Encoding normalizations SHOULD NOT be done as part of a signature=20
  transform, or (to state it another way) if normalization does occur, =
the=20
  application SHOULD always "see" (operate over) the normalized form. =
</LI></UL>
<H3>8.2 <A id=3Dsec-Check name=3Dsec-Check>Check the Security Model</A> =
</H3>
<P>This specification uses public key signatures and keyed hash =
authentication=20
codes. These have substantially different security models. Furthermore, =
it=20
permits user specified algorithms which may have other models. </P>
<P>With public key signatures, any number of parties can hold the public =
key and=20
verify signatures while only the parties with the private key can create =

signatures. The number of holders of the private key should be minimized =
and=20
preferably be one. Confidence by verifiers in the public key they are =
using and=20
its binding to the entity or capabilities represented by the =
corresponding=20
private key is an important issue, usually addressed by certificate or =
online=20
authority systems. </P>
<P>Keyed hash authentication codes, based on secret keys, are typically =
much=20
more efficient in terms of the computational effort required but have =
the=20
characteristic that all verifiers need to have possession of the same =
key as the=20
signer. Thus any verifier can forge signatures. </P>
<P>This specification permits user provided signature algorithms and =
keying=20
information designators. Such user provided algorithms may have =
different=20
security models. For example, methods involving biometrics usually =
depend on a=20
physical characteristic of the authorized user that can not be changed =
the way=20
public or secret keys can be and may have other security model =
differences. </P>
<H3>8.3 Algorithms, <A id=3Dsec-KeyLength name=3Dsec-KeyLength>Key =
Lengths</A>,=20
Certificates, Etc. </H3>
<P>The strength of a particular signature depends on all links in the =
security=20
chain. This includes the signature and digest algorithms used, the =
strength of=20
the key generation [<A=20
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-RANDOM">RANDOM</A>] and =
the size of=20
the key, the security of key and certificate authentication and =
distribution=20
mechanisms, certificate chain validation policy, protection of =
cryptographic=20
processing from hostile observation and tampering, etc. </P>
<P>Care must be exercised by applications in executing the various =
algorithms=20
that may be specified in an XML signature and in the processing of any=20
"executable content" that might be provided to such algorithms as =
parameters,=20
such as XSLT transforms. The algorithms specified in this document will =
usually=20
be implemented via a trusted library but even there perverse parameters =
might=20
cause unacceptable processing or memory demand. Even more care may be =
warranted=20
with application defined algorithms. </P>
<P>The security of an overall system will also depend on the security =
and=20
integrity of its operating procedures, its personnel, and on the =
administrative=20
enforcement of those procedures. All the factors listed in this section =
are=20
important to the overall security of a system; however, most are beyond =
the=20
scope of this specification. </P>
<H2>9.0 <A id=3Dsec-Schema name=3Dsec-Schema>Schema</A>, DTD, Data =
Model, and Valid=20
Examples </H2>
<DL>
  <DT>XML Signature Schema Instance=20
  <DD><A=20
  =
href=3D"http://www.w3.org/TR/xmldsig-core/xmldsig-core-schema.xsd">xmldsi=
g-core-schema.xsd</A>=20

  <DD>Valid XML schema instance based on the 20001024 Schema/DTD [<A=20
  =
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XML-schema">XML-Schema</A>=
].=20
  <DT>XML Signature DTD=20
  <DD><A=20
  =
href=3D"http://www.w3.org/TR/xmldsig-core/xmldsig-core-schema.dtd">xmldsi=
g-core-schema.dtd</A>=20

  <DT>RDF Data Model=20
  <DD><A=20
  =
href=3D"http://www.w3.org/TR/xmldsig-core/xmldsig-datamodel-20000112.gif"=
>xmldsig-datamodel-20000112.gif</A>=20

  <DT>XML Signature Object Example=20
  <DD><A=20
  =
href=3D"http://www.w3.org/TR/xmldsig-core/signature-example.xml">signatur=
e-example.xml</A>=20

  <DD>A cryptographical fabricated XML example that includes foreign =
content and=20
  validates under the schema, it also uses <CODE>schemaLocation</CODE> =
to aid=20
  automated schema fetching and validation.=20
  <DT>RSA XML Signature Example=20
  <DD><A=20
  =
href=3D"http://www.w3.org/TR/xmldsig-core/signature-example-rsa.xml">sign=
ature-example-rsa.xml</A>=20

  <DD>An XML Signature example with generated cryptographic values by =
Merlin=20
  Hughes and validated by Gregor Karlinger.=20
  <DT>DSA XML Signature Example=20
  <DD><A=20
  =
href=3D"http://www.w3.org/TR/xmldsig-core/signature-example-dsa.xml">sign=
ature-example-dsa.xml</A>=20

  <DD>Similar to above but uses DSA. </DD></DL>
<H2>10.0 <A id=3Dsec-Definitions name=3Dsec-Definitions>Definitions</A> =
</H2>
<DL>
  <DT><A id=3Ddef-AuthenticationCode =
name=3Ddef-AuthenticationCode>Authentication=20
  Code</A> (<A id=3Ddef-ProtectedChecksum =
name=3Ddef-ProtectedChecksum>Protected=20
  Checksum</A>)=20
  <DD>A value generated from the application of a shared key to a =
message via a=20
  cryptographic algorithm such that it has the properties of <A =
class=3Dlink-def=20
  =
href=3D"http://www.w3.org/TR/xmldsig-core/#def-AuthenticationMessage">mes=
sage=20
  authentication</A> (and <A class=3Dlink-def=20
  =
href=3D"http://www.w3.org/TR/xmldsig-core/#def-Integrity">integrity</A>) =
but not=20
  <A class=3Dlink-def=20
  =
href=3D"http://www.w3.org/TR/xmldsig-core/#def-AuthenticationSigner">sign=
er=20
  authentication</A>. Equivalent to <EM>protected checksum</EM>, "A =
checksum=20
  that is computed for a data object by means that protect against =
active=20
  attacks that would attempt to change the checksum to make it match =
changes=20
  made to the data object."&nbsp; [<A=20
  href=3D"http://www.w3.org/TR/xmldsig-core/#ref-SEC">SEC</A>]=20
  <DT><A id=3Ddef-AuthenticationMessage=20
  name=3Ddef-AuthenticationMessage>Authentication, Message</A>=20
  <DD>The property, given an <A class=3Dlink-def=20
  =
href=3D"http://www.w3.org/TR/xmldsig-core/#def-AuthenticationCode">authen=
tication=20
  code</A>/<A class=3Dlink-def=20
  =
href=3D"http://www.w3.org/TR/xmldsig-core/#def-ProtectedChecksum">protect=
ed=20
  checksum</A>, that tampering with both the data and checksum, so as to =

  introduce changes while seemingly preserving <A class=3Dlink-def=20
  =
href=3D"http://www.w3.org/TR/xmldsig-core/#def-Integrity">integrity</A>, =
are=20
  still detected. "A signature should identify what is signed, making it =

  impracticable to falsify or alter either the signed matter or the =
signature=20
  without detection." [<A=20
  href=3D"http://www.abanet.org/scitech/ec/isc/dsgfree.html">Digital =
Signature=20
  Guidelines</A>, <A =
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-ABA">ABA</A>].=20

  <DT><A id=3Ddef-AuthenticationSigner=20
  name=3Ddef-AuthenticationSigner>Authentication, Signer</A>=20
  <DD>The property that the identity of the signer is as claimed. "A =
signature=20
  should indicate who signed a document, message or record, and should =
be=20
  difficult for another person to produce without authorization." [<A=20
  href=3D"http://www.abanet.org/scitech/ec/isc/dsgfree.html">Digital =
Signature=20
  Guidelines</A>, <A =
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-ABA">ABA</A>]=20
  Note, signer authentication is an application decision (e.g., does the =
signing=20
  key actually correspond to a specific identity) that is supported by, =
but out=20
  of scope, of this specification.=20
  <DT><A id=3Ddef-Checksum name=3Ddef-Checksum>Checksum</A>=20
  <DD>"A value that (a) is computed by a function that is dependent on =
the=20
  contents of a data object and (b) is stored or transmitted together =
with the=20
  object, for the purpose of detecting changes in the data."&nbsp; [<A=20
  href=3D"http://www.w3.org/TR/xmldsig-core/#ref-SEC">SEC</A>]=20
  <DT><A id=3Ddef-Core name=3Ddef-Core>Core</A>=20
  <DD>The syntax and processing defined by this specification, including =
<A=20
  class=3Dlink-def=20
  href=3D"http://www.w3.org/TR/xmldsig-core/#def-ValidationCore">core=20
  validation</A>. We use this term to distinguish other markup, =
processing, and=20
  applications semantics from our own.=20
  <DT><A id=3Ddef-DataObject name=3Ddef-DataObject>Data Object</A>=20
  (Content/Document)=20
  <DD>The actual binary/octet data being operated on (transformed, =
digested, or=20
  signed) by an application -- frequently an <A=20
  =
href=3D"http://www.w3.org/Protocols/rfc2616/rfc2616-sec7.html#sec7">HTTP =

  entity</A> [<A =
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-HTTP">HTTP</A>].=20
  Note that the proper noun <CODE>Object</CODE> designates a specific =
XML=20
  element. Occasionally we refer to a data object as a <EM>document</EM> =
or as a=20
  <EM><A class=3Dlink-def=20
  =
href=3D"http://www.w3.org/TR/xmldsig-core/#def-Resource">resource</A>'s=20
  content</EM>. The term <EM>element content</EM> is used to describe =
the data=20
  between XML start and end tags [<A=20
  href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XML">XML</A>]. The term =
<EM>XML=20
  document</EM> is used to describe data objects which conform to the =
XML=20
  specification [<A =
href=3D"http://www.w3.org/TR/xmldsig-core/#ref-XML">XML</A>].=20
  <DT><A id=3Ddef-Integrity name=3Ddef-Integrity>Integrity</A>=20
  <DD>"The property that data has not been changed, destroyed, or lost =
in an=20
  unauthorized or accidental manner." [<A=20
  href=3D"http://www.w3.org/TR/xmldsig-core/#ref-SEC">SEC</A>] A simple =
<A=20
  class=3Dlink-def=20
  href=3D"http://www.w3.org/TR/xmldsig-core/#def-Checksum">checksum</A> =
can=20
  provide integrity from incidental changes in the data; <A =
class=3Dlink-def=20
  =
href=3D"http://www.w3.org/TR/xmldsig-core/#def-AuthenticationMessage">mes=
sage=20
  authentication</A> is similar but also protects against an active =
attack to=20
  alter the data whereby a change in the checksum is introduced so as to =
match=20
  the change in the data.&nbsp;=20
  <DT><A id=3Ddef-Object name=3Ddef-Object>Object</A>=20
  <DD>An XML Signature element wherein arbitrary (non-<A =
class=3Dlink-def=20
  href=3D"http://www.w3.org/TR/xmldsig-core/#def-Core">core</A>) data =
may be=20
  placed. An <CODE>Object</CODE> element is merely one type of digital =
data (or=20
  document) that can be signed via a <CODE>Reference</CODE>.=20
  <DT><A id=3Ddef-Resource name=3Ddef-Resource>Resource</A>=20
  <DD>"A resource can be anything that has identity. Familiar examples =
include=20
  an electronic document, an image, a service (e.g., 'today's weather =
report for=20
  Los Angeles'), and a collection of other resources.... The resource is =
the=20
  conceptual mapping to an entity or set of entities, not necessarily =
the entity=20
  which corresponds to that mapping at any particular instance in time. =
Thus, a=20
  resource can remain constant even when its content---the entities to =
which it=20
  currently corresponds---changes over time, provided that the =
conceptual=20
  mapping is not changed in the process." [<A=20
  href=3D"http://www.w3.org/TR/xmldsig-core/#ref-URI">URI</A>] In order =
to avoid a=20
  collision of the term <EM>entity</EM> within the URI and XML =
specifications,=20
  we use the term <EM>data object</EM>, <EM>content</EM> or =
<EM>document</EM> to=20
  refer to the actual bits/octets being operated upon.=20
  <DT><A id=3Ddef-Signature name=3Ddef-Signature>Signature</A>=20
  <DD>Formally speaking, a value generated from the application of a =
private key=20
  to a message via a cryptographic algorithm such that it has the =
properties of=20
  <A class=3Dlink-def=20
  =
href=3D"http://www.w3.org/TR/xmldsig-core/#def-Integrity">integrity</A>, =
<A=20
  class=3Dlink-def=20
  =
href=3D"http://www.w3.org/TR/xmldsig-core/#def-AuthenticationMessage">mes=
sage=20
  authentication</A> and/or <A class=3Dlink-def=20
  =
href=3D"http://www.w3.org/TR/xmldsig-core/#def-AuthenticationSigner">sign=
er=20
  authentication</A>. (However, we sometimes use the term signature =
generically=20
  such that it encompasses <A class=3Dlink-def=20
  =
href=3D"http://www.w3.org/TR/xmldsig-core/#def-AuthenticationCode">Authen=
tication=20
  Code</A> values as well, but we are careful to make the distinction =
when the=20
  property of <A class=3Dlink-def=20
  =
href=3D"http://www.w3.org/TR/xmldsig-core/#def-AuthenticationSigner">sign=
er=20
  authentication</A> is relevant to the exposition.) A signature may be=20
  (non-exclusively) described as <A class=3Dlink-def=20
  =
href=3D"http://www.w3.org/TR/xmldsig-core/#def-SignatureDetached">detache=
d</A>,=20
  <A class=3Dlink-def=20
  =
href=3D"http://www.w3.org/TR/xmldsig-core/#def-SignatureEnveloping">envel=
oping</A>,=20
  or <A class=3Dlink-def=20
  =
href=3D"http://www.w3.org/TR/xmldsig-core/#def-SignatureEnveloped">envelo=
ped</A>.=20

  <DT><A id=3Ddef-SignatureApplication =
name=3Ddef-SignatureApplication>Signature,=20
  Application</A>=20
  <DD>An application that implements the MANDATORY (REQUIRED/MUST) =
portions of=20
  this specification; these conformance requirements are over =
application=20
  behavior, the structure of the <CODE>Signature</CODE> element type and =
its=20
  children (including <CODE>SignatureValue</CODE>) and the specified =
algorithms.=20

  <DT><A id=3Ddef-SignatureDetached =
name=3Ddef-SignatureDetached>Signature,=20
  Detached</A>=20
  <DD>The signature is over content external to the =
<CODE>Signature</CODE>=20
  element, and can be identified via a <CODE>URI</CODE> or transform.=20
  Consequently, the signature is "detached" from the content it signs. =
This=20
  definition typically applies to separate data objects, but it also =
includes=20
  the instance where the <CODE>Signature</CODE> and data object reside =
within=20
  the same XML document but are sibling elements.=20
  <DT><A id=3Ddef-SignatureEnveloping =
name=3Ddef-SignatureEnveloping>Signature,=20
  Enveloping</A>=20
  <DD>The signature is over content found within an <CODE>Object</CODE> =
element=20
  of the signature itself. The <CODE>Object</CODE> (or its content) is=20
  identified via a <CODE>Reference</CODE> (via a <CODE>URI</CODE> =
fragment=20
  identifier or transform).=20
  <DT><A id=3Ddef-SignatureEnveloped =
name=3Ddef-SignatureEnveloped>Signature,=20
  Enveloped</A>=20
  <DD>The signature is over the XML content that contains the signature =
as an=20
  element. The content provides the root XML document element. =
Obviously,=20
  enveloped signatures must take care not to include their own value in =
the=20
  calculation of the <CODE>SignatureValue</CODE>.=20
  <DT><A id=3Ddef-Transform name=3Ddef-Transform>Transform</A>=20
  <DD>The processing of a data from its source to its derived form. =
Typical=20
  transforms include XML Canonicalization, XPath, and XSLT.=20
  <DT><A id=3Ddef-ValidationCore name=3Ddef-ValidationCore>Validation, =
Core</A>=20
  <DD>The core processing requirements of this specification requiring =
<A=20
  class=3Dlink-def=20
  =
href=3D"http://www.w3.org/TR/xmldsig-core/#def-ValidationSignature">signa=
ture=20
  validation</A> and <CODE>SignedInfo</CODE> <A class=3Dlink-def=20
  =
href=3D"http://www.w3.org/TR/xmldsig-core/#def-ValidationReference">refer=
ence=20
  validation</A>.=20
  <DT><A id=3Ddef-ValidationReference =
name=3Ddef-ValidationReference>Validation,=20
  Reference</A>=20
  <DD>The hash value of the identified and transformed content, =
specified by=20
  <CODE>Reference</CODE>, matches its specified =
<CODE>DigestValue</CODE>.=20
  <DT><A id=3Ddef-ValidationSignature =
name=3Ddef-ValidationSignature>Validation,=20
  Signature</A>=20
  <DD>The <CODE>SignatureValue</CODE> matches the result of processing=20
  <CODE>SignedInfo</CODE> with&nbsp; <CODE>CanonicalizationMethod</CODE> =
and=20
  <CODE>SignatureMethod</CODE> as specified in <A=20
  href=3D"http://www.w3.org/TR/xmldsig-core/#sec-CoreValidation">Core=20
  Validation</A> (section 3.2).=20
  <DT><A id=3Ddef-ValidationTrustApplication=20
  name=3Ddef-ValidationTrustApplication>Validation, =
Trust/Application</A>=20
  <DD>The application determines that the semantics associated with a =
signature=20
  are valid. For example, an application may validate the time stamps or =
the=20
  integrity of the signer key -- though this behavior is external to =
this <A=20
  class=3Dlink-def=20
  =
href=3D"http://www.w3.org/TR/xmldsig-core/#def-ValidationCore">core</A>=20
  specification. </DD></DL>
<H2>11.0 <A id=3Dsec-References name=3Dsec-References>References</A> =
</H2>
<DL>
  <DT><A id=3Dref-ABA name=3Dref-ABA>ABA</A>=20
  <DD><A =
href=3D"http://www.abanet.org/scitech/ec/isc/dsgfree.html">Digital=20
  Signature Guidelines.</A><BR><A=20
  =
href=3D"http://www.abanet.org/scitech/ec/isc/dsgfree.html">http://www.aba=
net.org/scitech/ec/isc/dsgfree.html</A>=20

  <DT><A id=3Dref-DOM name=3Dref-DOM>DOM</A>=20
  <DD><A =
href=3D"http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/">Document=20
  Object Model (DOM) Level 1 Specification.</A> W3C Recommendation. V. =
Apparao,=20
  S. Byrne, M. Champion, S. Isaacs, I. Jacobs, A. Le Hors, G. Nicol, J. =
Robie,=20
  R. Sutor, C. Wilson, L. Wood. October 1998.<BR><A=20
  =
href=3D"http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/">http://www.w=
3.org/TR/1998/REC-DOM-Level-1-19981001/</A>=20

  <DT><A id=3Dref-DSS name=3Dref-DSS>DSS</A>=20
  <DD><A=20
  =
href=3D"http://csrc.nist.gov/publications/fips/fips186-2/fips186-2.pdf">F=
IPS PUB=20
  186-2</A> . <EM>Digital Signature Standard (DSS).</EM> U.S. Department =
of=20
  Commerce/National Institute of Standards and Technology.<BR><A=20
  =
href=3D"http://csrc.nist.gov/publications/fips/fips186-2/fips186-2.pdf">h=
ttp://csrc.nist.gov/publications/fips/fips186-2/fips186-2.pdf</A>=20

  <DT><A id=3Dref-HMAC name=3Dref-HMAC>HMAC</A>=20
  <DD><A href=3D"http://www.ietf.org/rfc/rfc2104.txt">RFC 2104</A>. =
<EM>HMAC:=20
  Keyed-Hashing for Message Authentication.</EM> H. Krawczyk, M. =
Bellare, R.=20
  Canetti. February 1997.<BR><A=20
  =
href=3D"http://www.ietf.org/rfc/rfc2104.txt">http://www.ietf.org/rfc/rfc2=
104.txt</A>=20

  <DT><A id=3Dref-HTTP name=3Dref-HTTP>HTTP</A>=20
  <DD><A href=3D"http://www.w3.org/Protocols/rfc2616/rfc2616.html">RFC =
2616</A>.=20
  <EM>Hypertext Transfer Protocol -- HTTP/1.1</EM>. J. Gettys, J. Mogul, =
H.=20
  Frystyk, L. Masinter, P. Leach, T. Berners-Lee. June 1999.<BR><A=20
  =
href=3D"http://www.ietf.org/rfc/rfc2616.txt">http://www.ietf.org/rfc/rfc2=
616.txt</A>=20

  <DT><A id=3Dref-KEYWORDS name=3Dref-KEYWORDS>KEYWORDS</A>=20
  <DD><A href=3D"http://www.ietf.org/rfc/rfc2119.txt">RFC 2119.</A> =
<EM>Key words=20
  for use in RFCs to Indicate Requirement Levels.</EM> S. Bradner. March =

  1997.<BR><A=20
  =
href=3D"http://www.ietf.org/rfc/rfc2119.txt">http://www.ietf.org/rfc/rfc2=
119.txt</A>=20

  <DT><A id=3Dref-LDAP-DN name=3Dref-LDAP-DN>LDAP-DN</A>=20
  <DD><A href=3D"http://www.ietf.org/rfc/rfc2253.txt">RFC 2253</A>.=20
  <EM>Lightweight Directory Access Protocol (v3): UTF-8 String =
Representation of=20
  Distinguished Names.</EM> M. Wahl, S. Kille, T. Howes. December =
1997.<BR><A=20
  =
href=3D"http://www.ietf.org/rfc/rfc2253.txt">http://www.ietf.org/rfc/rfc2=
253.txt</A>=20

  <DT><A id=3Dref-MD5 name=3Dref-MD5>MD5</A>=20
  <DD><A href=3D"http://www.ietf.org/rfc/rfc1321.txt">RFC 1321</A>. =
<EM>The MD5=20
  Message-Digest Algorithm.</EM> R. Rivest. April 1992.<BR><A=20
  =
href=3D"http://www.ietf.org/rfc/rfc1321.txt">http://www.ietf.org/rfc/rfc1=
321.txt</A>=20

  <DT><A id=3Dref-MIME name=3Dref-MIME>MIME</A>=20
  <DD><A href=3D"http://www.ietf.org/rfc/rfc2045.txt">RFC 2045</A>.=20
  <EM>Multipurpose Internet Mail Extensions (MIME) Part One: Format of =
Internet=20
  Message Bodies</EM>. N. Freed &amp; N. Borenstein. November =
1996.<BR><A=20
  =
href=3D"http://www.ietf.org/rfc/rfc2045.txt">http://www.ietf.org/rfc/rfc2=
045.txt</A>=20

  <DT><A id=3Dref-NFC name=3Dref-NFC>NFC</A>=20
  <DD><EM>TR15, Unicode Normalization Forms.</EM> M. Davis, M. D=FCrst. =
Revision=20
  18: November 1999. <A=20
  =
href=3D"http://www.unicode.org/unicode/reports/tr15/tr15-18.html">http://=
www.unicode.org/unicode/reports/tr15/tr15-18.html</A>.=20

  <DT><A id=3Dref-NFC-Corrigendum =
name=3Dref-NFC-Corrigendum>NFC-Corrigendum</A>=20
  <DD><EM>Normalization Corrigendum</EM>. The Unicode Consortium. <A=20
  =
href=3D"http://www.unicode.org/unicode/uni2errata/Normalization_Corrigend=
um.html">http://www.unicode.org/unicode/uni2errata/Normalization_Corrigen=
dum.html</A>.=20

  <DT><A id=3Dref-PGP name=3Dref-PGP>PGP</A>=20
  <DD><A href=3D"http://www.ietf.org/rfc/rfc2440.txt">RFC 2440</A>. =
<EM>OpenPGP=20
  Message Format.</EM> J. Callas, L. Donnerhacke, H. Finney, R. Thayer. =
November=20
  1998.<BR><A=20
  =
href=3D"http://www.ietf.org/rfc/rfc2440.txt">http://www.ietf.org/rfc/rfc2=
440.txt</A>=20

  <DT><A id=3Dref-RANDOM name=3Dref-RANDOM>RANDOM</A>=20
  <DD><A href=3D"http://www.ietf.org/rfc/rfc1750.txt">RFC 1750</A>. =
<EM>Randomness=20
  Recommendations for Security.</EM> D. Eastlake, S. Crocker, J. =
Schiller.=20
  December 1994.<BR><A=20
  =
href=3D"http://www.ietf.org/rfc/rfc1750.txt">http://www.ietf.org/rfc/rfc1=
750.txt</A>=20

  <DT><A id=3Dref-RDF name=3Dref-RDF>RDF</A>=20
  <DD><A =
href=3D"http://www.w3.org/TR/2000/CR-rdf-schema-20000327/">Resource=20
  Description Framework (RDF) Schema Specification 1.0.</A> W3C =
Candidate=20
  Recommendation. D. Brickley, R.V. Guha. March 2000.<BR><A=20
  =
href=3D"http://www.w3.org/TR/2000/CR-rdf-schema-20000327/">http://www.w3.=
org/TR/2000/CR-rdf-schema-20000327/</A>=20

  <DD><A =
href=3D"http://www.w3.org/TR/1999/REC-rdf-syntax-19990222/">Resource=20
  Description Framework (RDF) Model and Syntax Specification</A>. W3C=20
  Recommendation. O. Lassila, R. Swick. February 1999.<BR><A=20
  =
href=3D"http://www.w3.org/TR/1999/REC-rdf-syntax-19990222/">http://www.w3=
.org/TR/1999/REC-rdf-syntax-19990222/</A>=20

  <DT><A id=3Dref-1363 name=3Dref-1363>1363</A>=20
  <DD>IEEE 1363: Standard Specifications for Public Key Cryptography. =
August=20
  2000.=20
  <DT><A id=3Dref-PKCS1 name=3Dref-PKCS1>PKCS1</A>=20
  <DD><A href=3D"http://www.ietf.org/rfc/rfc2437.txt">RFC 2437</A>. =
<EM>PKCS #1:=20
  RSA Cryptography Specifications Version 2.0.</EM> B. Kaliski, J. =
Staddon.=20
  October 1998.<BR><A=20
  =
href=3D"http://www.ietf.org/rfc/rfc2437.txt">http://www.ietf.org/rfc/rfc2=
437.txt</A>=20

  <DT><A id=3Dref-SAX name=3Dref-SAX>SAX</A>=20
  <DD><A href=3D"http://www.megginson.com/SAX/index.html">SAX: The =
Simple API for=20
  XML</A>. D. Megginson, et al. May 1998.<BR><A=20
  =
href=3D"http://www.megginson.com/SAX/index.html">http://www.megginson.com=
/SAX/index.html</A>=20

  <DT><A id=3Dref-SEC name=3Dref-SEC>SEC</A>=20
  <DD><A href=3D"http://www.ietf.org/rfc/rfc2828.txt">RFC 2828</A>. =
<EM>Internet=20
  Security Glossary.</EM> R. Shirey. May 2000.<BR><A=20
  =
href=3D"http://www.faqs.org/rfcs/rfc2828.html">http://www.faqs.org/rfcs/r=
fc2828.html</A>=20

  <DT><A id=3Dref-SHA-1 name=3Dref-SHA-1>SHA-1</A>=20
  <DD><A=20
  =
href=3D"http://csrc.nist.gov/publications/fips/fips180-1/fip180-1.txt">FI=
PS PUB=20
  180-1</A>. <EM>Secure Hash Standard.</EM> U.S. Department of =
Commerce/National=20
  Institute of Standards and Technology.<BR><A=20
  =
href=3D"http://csrc.nist.gov/publications/fips/fips180-1/fip180-1.txt">ht=
tp://csrc.nist.gov/publications/fips/fips180-1/fip180-1.txt</A>=20

  <DT class=3Dlabel><A id=3Dref-SOAP name=3Dref-SOAP>SOAP</A>=20
  <DD><A href=3D"http://www.w3.org/TR/2000/NOTE-SOAP-20000508/">Simple =
Object=20
  Access Protocol (SOAP) Version 1.1</A>. W3C Note. D. Box, D. =
Ehnebuske, G.=20
  Kakivaya, A. Layman, N. Mendelsohn, H. Frystyk Nielsen, S. Thatte, D. =
Winer.=20
  May 2001.=20
  <DD><A=20
  =
href=3D"http://www.w3.org/TR/2000/NOTE-SOAP-20000508/">http://www.w3.org/=
TR/2000/NOTE-SOAP-20000508/</A>=20

  <DT class=3Dlabel><A id=3Dref-Unicode name=3Dref-Unicode>Unicode</A>=20
  <DD>The Unicode Consortium. <EM>The Unicode Standard.</EM><BR><A=20
  =
href=3D"http://www.unicode.org/unicode/standard/standard.html">http://www=
.unicode.org/unicode/standard/standard.html</A>=20

  <DT><A id=3Dref-UTF-16 name=3Dref-UTF-16>UTF-16</A>=20
  <DD><A href=3D"http://www.ietf.org/rfc/rfc2781.txt">RFC 2781</A>. =
<EM>UTF-16, an=20
  encoding of ISO 10646.</EM> P. Hoffman , F. Yergeau. February =
2000.<BR><A=20
  =
href=3D"http://www.ietf.org/rfc/rfc2781.txt">http://www.ietf.org/rfc/rfc2=
781.txt</A>=20

  <DT><A id=3Dref-UTF-8 name=3Dref-UTF-8>UTF-8</A>=20
  <DD><A href=3D"http://www.ietf.org/rfc/rfc2279.txt">RFC 2279</A>. =
<EM>UTF-8, a=20
  transformation format of ISO 10646</EM>. F. Yergeau. January =
1998.<BR><A=20
  =
href=3D"http://www.ietf.org/rfc/rfc2279.txt">http://www.ietf.org/rfc/rfc2=
279.txt</A>=20

  <DT><A id=3Dref-URI name=3Dref-URI>URI</A>=20
  <DD><A href=3D"http://www.ietf.org/rfc/rfc2396.txt">RFC 2396</A>. =
<EM>Uniform=20
  Resource Identifiers (URI): Generic Syntax.</EM> T. Berners-Lee, R. =
Fielding,=20
  L. Masinter. August 1998.<BR><A=20
  =
href=3D"http://www.ietf.org/rfc/rfc2396.txt">http://www.ietf.org/rfc/rfc2=
396.txt</A>=20

  <DT class=3Dlabel><A id=3Dref-URI-Literal =
name=3Dref-URI-Literal>URI-Literal</A>=20
  <DD><A href=3D"http://www.ietf.org/rfc/rfc2732.txt">RFC 2732</A>. =
<EM>Format for=20
  Literal IPv6 Addresses in URL's</EM>. R. Hinden, B. Carpenter, L. =
Masinter.=20
  December 1999.=20
  <DD><A=20
  =
href=3D"http://www.ietf.org/rfc/rfc2732.txt">http://www.ietf.org/rfc/rfc2=
732.txt</A>=20

  <DT><A id=3Dref-URL name=3Dref-URL>URL</A>=20
  <DD><A href=3D"http://www.ietf.org/rfc/rfc1738.txt">RFC 1738.</A> =
<EM>Uniform=20
  Resource Locators (URL).</EM> T. Berners-Lee, L. Masinter, and M. =
McCahill.=20
  December 1994.=20
  <DD><A=20
  =
href=3D"http://www.ietf.org/rfc/rfc1738.txt">http://www.ietf.org/rfc/rfc1=
738.txt</A>=20

  <DT><A id=3Dref-URN name=3Dref-URN>URN</A>=20
  <DD><A href=3D"http://www.ietf.org/rfc/rfc2141.txt">RFC 2141</A>. =
<EM>URN=20
  Syntax.</EM> R. Moats. May 1997.<BR><A=20
  =
href=3D"http://www.ietf.org/rfc/rfc2141.txt">http://www.ietf.org/rfc/rfc2=
141.txt</A>=20

  <DD><A href=3D"http://www.ietf.org/rfc/rfc2611.txt">RFC 2611</A>. =
<EM>URN=20
  Namespace Definition Mechanisms.</EM> L. Daigle, D. van Gulik, R. =
Iannella, P.=20
  Falstrom. June 1999.<BR><A=20
  =
href=3D"http://www.ietf.org/rfc/rfc2611.txt">http://www.ietf.org/rfc/rfc2=
611.txt</A>=20

  <DT><A id=3Dref-X509v3 name=3Dref-X509v3>X509v3</A>=20
  <DD>ITU-T Recommendation X.509 version 3 (1997). "Information =
Technology -=20
  Open Systems Interconnection - The Directory Authentication =
Framework"&nbsp;=20
  ISO/IEC 9594-8:1997.=20
  <DT><A id=3Dref-XHTML name=3Dref-XHTML>XHTML 1.0</A>=20
  <DD><A =
href=3D"http://www.w3.org/TR/2000/REC-xhtml1-20000126/">XHTML(tm) 1.0:=20
  The Extensible Hypertext Markup Language</A>. W3C Recommendation. S.=20
  Pemberton, D. Raggett, et al. January 2000.<BR><A=20
  =
href=3D"http://www.w3.org/TR/2000/REC-xhtml1-20000126/">http://www.w3.org=
/TR/2000/REC-xhtml1-20000126/</A>=20

  <DT><A id=3Dref-XLink name=3Dref-XLink>XLink</A>=20
  <DD><A href=3D"http://www.w3.org/TR/2001/REC-xlink-20010627/">XML =
Linking=20
  Language.</A> W3C Recommendation. S. DeRose, E. Maler, D. Orchard. =
June 2001.=20
  <DD><A=20
  =
href=3D"http://www.w3.org/TR/2001/REC-xlink-20010627/">http://www.w3.org/=
TR/2001/REC-xlink-20010627/</A>=20

  <DT><A id=3Dref-XML name=3Dref-XML>XML</A>=20
  <DD><A href=3D"http://www.w3.org/TR/2000/REC-xml-20001006">Extensible =
Markup=20
  Language (XML) 1.0 (Second Edition).</A> W3C Recommendation. T. Bray, =
E.=20
  Maler, J. Paoli, C. M. Sperberg-McQueen. October 2000.=20
  <DD><A=20
  =
href=3D"http://www.w3.org/TR/2000/REC-xml-20001006">http://www.w3.org/TR/=
2000/REC-xml-20001006</A>=20

  <DT><A id=3Dref-XML-C14N name=3Dref-XML-C14N>XML-C14N</A>=20
  <DD><A =
href=3D"http://www.w3.org/TR/2001/REC-xml-c14n-20010315">Canonical=20
  XML.</A> W3C Recommendation. J. Boyer. March 2001.=20
  <DD><A=20
  =
href=3D"http://www.w3.org/TR/2001/REC-xml-c14n-20010315">http://www.w3.or=
g/TR/2001/REC-xml-c14n-20010315</A><BR><A=20
  =
href=3D"http://www.ietf.org/rfc/rfc3076.txt">http://www.ietf.org/rfc/rfc3=
076.txt</A>=20

  <DT><A id=3Dref-XML-Japanese name=3Dref-XML-Japanese>XML-Japanese</A>=20
  <DD><A =
href=3D"http://www.w3.org/TR/2000/NOTE-japanese-xml-20000414/">XML=20
  Japanese Profile</A>. W3C Note. <SPAN class=3Dauthor>M. <SPAN=20
  class=3Dname>Murata</SPAN></SPAN> April 2000 <A class=3Dloc=20
  =
href=3D"http://www.w3.org/TR/2000/NOTE-japanese-xml-20000414/">http://www=
.w3.org/TR/2000/NOTE-japanese-xml-20000414/</A>=20

  <DT><A id=3Dref-XML-MT name=3Dref-XML-MT>XML-MT</A>=20
  <DD><A href=3D"http://www.ietf.org/rfc/rfc2376.txt">RFC 2376</A> . =
<EM>XML Media=20
  Types</EM>. E. Whitehead, M. Murata. July 1998.<BR><A=20
  =
href=3D"http://www.ietf.org/rfc/rfc2376.txt">http://www.ietf.org/rfc/rfc2=
376.txt</A>=20

  <DT><A id=3Dref-XML-ns name=3Dref-XML-ns>XML-ns</A>=20
  <DD><A =
href=3D"http://www.w3.org/TR/1999/REC-xml-names-19990114/">Namespaces in =

  XML</A>. W3C Recommendation. T. Bray, D. Hollander, A. Layman. January =
1999.=20
  <DD><A=20
  =
href=3D"http://www.w3.org/TR/1999/REC-xml-names-19990114/">http://www.w3.=
org/TR/1999/REC-xml-names-19990114/</A>=20

  <DT><A id=3Dref-XML-schema name=3Dref-XML-schema>XML-schema</A>=20
  <DD><A =
href=3D"http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/">XML Schema=20
  Part 1: Structures</A>. W3C Recommendation. D. Beech, M. Maloney, N.=20
  Mendelsohn, H. Thompson. May 2001.=20
  <DD><A=20
  =
href=3D"http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/">http://www.w=
3.org/TR/2001/REC-xmlschema-1-20010502/</A><BR><A=20
  href=3D"http://www.w3.org/TR/2001/REC-xmlschema-2-20010502/">XML =
Schema Part 2:=20
  Datatypes</A> W3C Recommendation. P. Biron, A. Malhotra. May 2001.=20
  <DD><A=20
  =
href=3D"http://www.w3.org/TR/2001/REC-xmlschema-2-20010502/">http://www.w=
3.org/TR/2001/REC-xmlschema-2-20010502/</A>=20

  <DT><A id=3Dref-XML-Signature-RD =
name=3Dref-XML-Signature-RD>XML-Signature-RD</A>=20
  <DD><A href=3D"http://www.ietf.org/rfc/rfc2807.txt">RFC 2807</A>. <A=20
  href=3D"http://www.w3.org/TR/xmldsig-requirements">XML Signature=20
  Requirements.</A> W3C Working Draft. J. Reagle, April 2000.<BR><A=20
  =
href=3D"http://www.w3.org/TR/1999/WD-xmldsig-requirements-19991014.html">=
http://www.w3.org/TR/1999/WD-xmldsig-requirements-19991014.html</A><BR><A=
=20
  =
href=3D"http://www.ietf.org/rfc/rfc2807.txt">http://www.ietf.org/rfc/rfc2=
807.txt</A>=20

  <DT><A id=3Dref-XPath name=3Dref-XPath>XPath</A>=20
  <DD><A href=3D"http://www.w3.org/TR/1999/REC-xpath-19991116">XML Path =
Language=20
  (XPath) Version 1.0</A>. W3C Recommendation. J. Clark, S. DeRose. =
October=20
  1999.<BR><A=20
  =
href=3D"http://www.w3.org/TR/1999/REC-xpath-19991116">http://www.w3.org/T=
R/1999/REC-xpath-19991116</A>=20

  <DT><A id=3Dref-XPointer name=3Dref-XPointer>XPointer</A>=20
  <DD><A href=3D"http://www.w3.org/TR/2001/CR-xptr-20010911/">XML =
Pointer Language=20
  (XPointer)</A>. W3C Candidate Recommendation. S. DeRose, R. Daniel, E. =
Maler.=20
  January 2001.=20
  <DD><A=20
  =
href=3D"http://www.w3.org/TR/2001/CR-xptr-20010911/">http://www.w3.org/TR=
/2001/CR-xptr-20010911/</A>=20

  <DT><A id=3Dref-XSL name=3Dref-XSL>XSL</A>=20
  <DD><A href=3D"http://www.w3.org/TR/2001/REC-xsl-20011015/">Extensible =

  Stylesheet Language (XSL)</A>. W3C Recommendation. S. Adler, A. =
Berglund, J.=20
  Caruso, S. Deach, T. Graham, P. Grosso, E. Gutentag, A. Milowski, S. =
Parnell,=20
  J. Richman, S. Zilles. October 2001.=20
  <DD><A=20
  =
href=3D"http://www.w3.org/TR/2001/REC-xsl-20011015/">http://www.w3.org/TR=
/2001/REC-xsl-20011015/</A>=20

  <DT><A id=3Dref-XSLT name=3Dref-XSLT>XSLT</A>=20
  <DD><A href=3D"http://www.w3.org/TR/1999/REC-xslt-19991116.html">XSL =
Transforms=20
  (XSLT) Version 1.0</A>. W3C Recommendation. J. Clark. November 1999.=20
  <DD><A=20
  =
href=3D"http://www.w3.org/TR/1999/REC-xslt-19991116.html">http://www.w3.o=
rg/TR/1999/REC-xslt-19991116.html</A>=20
  </DD></DL>
<H2>12. <A id=3Dsec-Authors name=3Dsec-Authors>Authors'</A> Address =
</H2>
<P>Donald E. Eastlake 3rd<BR>Motorola, 20 Forbes Boulevard<BR>Mansfield, =
MA=20
02048 USA<BR>Phone: 1-508-261-5434<BR>Email: <A=20
href=3D"mailto:Donald.Eastlake@motorola.com">Donald.Eastlake@motorola.com=
</A> </P>
<P>Joseph M. Reagle Jr., <A =
href=3D"http://www.w3.org/">W3C</A><BR>Massachusetts=20
Institute of Technology<BR>Laboratory for Computer Science<BR>NE43-350, =
545=20
Technology Square<BR>Cambridge, MA 02139<BR>Phone: + =
1.617.258.7621<BR>Email: <A=20
href=3D"mailto:reagle@w3.org">reagle@w3.org</A> </P>
<P>David Solo<BR>Citigroup<BR>909 Third Ave, 16th Floor<BR>NY, NY 10043=20
USA<BR>Phone +1-212-559-2900<BR>Email: <A=20
href=3D"mailto:dsolo@alum.mit.edu">dsolo@alum.mit.edu</A> =
</P></BODY></HTML>

------=_NextPart_000_0000_01C2FE80.25A38E60
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://ietf.org/images/ietflogo2e.gif

R0lGODlhGAGgANX/ACkpKTExMTk5OUJCQkpKSlJSUlpaWmNjY2tra3Nzc3t7e4SEhIyMjJSUlJyc
nKWlpa2trbW1tcDAwM7Ozv/eQnNzjHNzlGtrjGNjhFpae1pahFJSe0pKc0JCa0JCczk5azExYwAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEAABIALAAAAAAYAaAAQAb/QIlw
SCwaj8ikcslsOp/QqHRKrVqv2Kx2y+16v+CweEwum8/otHrrcDzc8Pj7wYbP22+7Fm/n69eAgWl8
eXlybYh+d25LhH6HiYpyRCFFjnGQkYWTlIKeUo5jihEPDQuIm5mQmwEDBgmREqQLhqmpknAhFLu8
IQ66vLu+q4/Ev8HCx8iVXbGfjX3RtYRTl6qPDQ0MsLd2rQUHxbaRbdkMCrhtwMG+t9O5yBQh3Q/r
vZnvb/bCTpfT7mlCCBw4MJ7BgwgNtsPlrhimPPvk4Us0bqK+eAsxpdtU8SLGaw2lSYqYsCRCgihP
dZkQwQGDBTAVJEDw7iGqm98QnIJABIKD/wURh3W8GfQmvGUbixWV9MYcOo0W+XwLtwgTA21PDd3U
yjUnrSMThPikZdTmozcBBBQwgCCBAgUwGTiIEHbNg1M4BxRAwIBOlbtB631MJ/JQ0aWHKjospY0b
qqlaxTGkaC7BtJx9t9yl6ACz32eghwA2UIAAgbNGFw1t04pAgQIhXss2+48pLlcJGtAdAqFmUmNv
cOuuG7q4cSSbQxbyPCW5Q0zMo2y2acvr5+PYszt5cM5tZjHcZSr4Dia89+va06tfz759mA/w48v/
0MFD6Pn48+f3pL+/f/gdfPJffx10wMGBaXwAwoIMNgjCB/c5KOGEDkIoiIIUZqihhRdq6P/hghya
gWGGIfL3YYb2ZTciiSqeyGKCHpbYoYsUyvhMBh/a+MyKNbrn449ABinkkEQWaeSRSCap5JJMNnmG
JMR9AWUYUzppZTXRoAYQKFlSdxaXVXn50JVkiqbRapPdwtMQXaJJTCEkZaQaYYodtUyZWFY1TR35
xOHUZKnhAZk/qPwJqCOIqVZUnZskKkdQVjhiSyAoEaSnZJyNqQRqZYVEiKFuCKBXOHQeukllbjhK
m22pfqRqn4nhAaklbT4Xa6UDeYGrQH3c4WuvwD6QlqgDEBBYmplOE9SigQIK50cPFLuWWROt6kZa
xdYTbbGncdUsVO+0ttYBpJXWbbDo/jr/x64hGLAABFGO4Ryn1+qlE3pJAAbtSPu+KWu/FDELLiSo
1lkvON5iWk5j1uYRnXSn1FSLdeuVssBVa3Khb79oDvUsx4cW5k422sBErXKl4kHySxjLa0rLeG4x
QVizaBJoRRTHK0RY8zbU0cNH3IUycEDHXOa8cFCshdCPiLrXV1kgfTBf+Bpt9dVYZ6311mLwKKGO
a3hNI4gmju1hijOa3SDYYIi9doRqk91ijHNv6J8abjPINox2y1egBx5woF3eetdNIoD0Fag43nSD
RviJewNSwYcBYvf4g1xnrvnmnHfu+eeghy766KSXbvrpqCOJyJNtmLF66kyK7ICUc8Lh/4XssBM5
9K9X7N6HFb7fkTt7DWca6xPFdxpKE8lzKvzwoXVjDLK/GyE9o6zesU4lsU7vrx8SbJ96667PLgFL
sNITMgE6+URE8gmPQxI7sp8J6Py9iGE+kBz90cU4TWmMm342Kmo5ACvASda/ltGowWDPMBhp4J2i
Zpb1dI8ctotUZAx4QASqIhVOIxVhMOEU7AkGKfFDhMDiJ7B0zAoKq+pfcfpnP9u84Qk0nJ63/mSL
EKpPh4gwlCGOJZLISJAdR+wFDcMEwQkiZzHGk6EZ2EXFKloxV8b7TVmAlQ1gxMYA3lPMBu/QRZA5
i1DqKImcmgXARyzrinC04vm4wC6T2P/xjmvkoLe0gj+J1HA1/wiKAARQK08BEgDbC4A1CmOtQwQg
AH28Y0LYdYB36awKEdhGaQbAyXR50leDXEtb3DITInqqLERUBv1qd0GPIJEQbpGJGMkhMR9GY5QI
AKICvTGqBTTgAcAsmUxyqa5P9uqRgySWaxLAgAiAYWZ1GQsGp4kIpSEHKA7cSAv5hZTfrHArcBDi
bxxWQKiURZzO44PT7oVDvFATg15xwJqgKYjp5GOdUIPCxla5wFf+MROOMuX3DoFOioSwhv8MpweT
ZU0q2DM1+KyacZLjGrbks3fYnGQYE2ing+Qxh+lT6DneYBoDHOBS8ONMAM/hhoqy0wv/FBXlRX00
M/BkVB5L/NYs44DIXiiyfjFMpy8f4MyWYDCkHH2DAhoAAWfOsQw1TZ1PGPCSBVgmnYxkhb3GQ7Ku
srRatTPiN5iZMd7IZY9nlMNYGVBW6HmCaRx9jL1mqoSHJhQOEd1OxNKah7y6VTt21Yhf/7JXszRU
CnDFxWD/2p7pOEBaL/2fOyFLVyw4h7ISZax7LikGzj5Ts6ANrWhHS9rSju5xkTvD5RoXiNXSCG2t
jVuDKqda1gpItoVLG25ne9vdppYLqIXbiwannxzpp7cbKk5wHYfb34YtR4ZTm3O3sNwd4VZw0Z3Q
dNHg2h7xbbjI9e6POABdy5WXuclF/29zsTM52yr3vNZN7zM6sFsQ0LY4FvgQdo9zue2a9r8ADrCA
B0zgAhv4wAhOsIIXzOAGO/jBEI6whCdM4QpbOFKDQMP+LqzhOJQBfKLwMIc/HCgqlVhKJx4xine5
4SzQ8hFceDEmVBzjob3uCmB1hgaxemMaU8FmP8wglsCJ0BsOGY2o8TGYiIxSrURBS9boBgzF1ORE
KJl5u+wfK40MDTZKaiJMsJm/ttziK7MppzbcoiGS0L0+oRTG4ZMHmxqpZTXfWBfMUDGQE/hAIQth
zx5LmSqF8cM2RiWN7PAxGg0d6Nzs5s+Lzh5D8JeRMwZ60E4UnZXJwIewQKABfI3rA/8EQIBK2o5n
Xm4zN9lhRkbjIigYAYOffWROKjVkpJYG1EF/5ZMGKACpYUU0P5dyaVsw64UujoZnjyNmEdfhgzyk
XnUKKLEOfvXSfEhlRwkt7WxHkDPI/rGYuawdKPMOC1+mDjrRjJZRBbsWoDK0sO/R5G8Whln5CDfy
DLhm7GQRXeQ78q++vNJfs0pQ7s4qFxFo6G82hNjWcDhq9L0pFtukOP88ZZkbkbBY9Q9UWRpUpNG1
7lahMIoicZQr6Y3yOVHcEjmFVcADMe4ogznMUM6xIdYtcnbTq+Af86fMw7TyZBQdpzwmOqblfARA
EzzJZWAXsDzeyI3/uc4xJ3IQGyP/EE6CI6h81khlWui71MD65OPE1AkTPefaUF0c7NLVriRJ95O7
vdoDVxYSi53OS0l8gBM/ydsfqPe6G14eu5rLsqNQx8Mb/qNpzpKv5rfGsktvm1W2PKYrLXkkDyWS
jmfHrhCgmy3E8fRWzObJ6Az6eYx8p4IcgKiY/HNnDQvPw7p77XOKrQGg/ve7che8tCD1dxo/Etiq
KGleFXntQYvsSG4iPx1gUgTkUueqZk2xwIiKcVEF+28W1qgSsIC3zIRcBTi++tWxq0oOnw1WJVe5
lFd7hINjPG54wznsPfhUHj2PUSFQiEBV2zB4nWd/IvQQ41F+kVdE9qcTc0EEEdAb/y7xFKv3c9jy
GgawgQdAflZnBTQDAb2hf1dVTCboAHkVJWHxExA3Pfgmffegc9AXCeI0dOqUcJ5Ug0DUbntBHkiw
gmRxgsUUQvgHTCLoTIsnMxLgHEIYKnOVWaJxU0qkTQCjdH83b0aXbiSEFbO0HAmHdTdRQvSnVU8D
hUFzVsY0anM1O0loBkgTLk+oT1KYhXEgcX/0gv9nP0bkByW3CFPhed0TbWF1WHJ4gYQIGkyjGofY
BPsUg0vnehc0Ecf2bXc1J0AnKX+Yd9lHRlwoDYsIMXn3idFDFm2wWA41h/JQhYv0eRihihm3SOJ0
UFMXbBdUGYZgipZFiigYh+7BHf/nx0xmCDGUpkuAN4wd0zwFhwAHYH1Jl2t84BTK2IE++D/boIzA
KCQT2FTlMYecx3dgtQ/d2G2pNmZ0Jo5yAExONQbZmI6joy8hIACK5GZYBSu3Jw/JFFIytyqvwFQ7
s4SelFSSsI9tZWHhYX0HQCrVllCbICoEwBYJMBOjNBPl6GWFQGoGgA5GcHCah4INiZE+RjMTWAro
oIlFJhVruCYRkJJi8RM2ZhGLyB2pBkiiqGI8E4TzqFb2Mo1GUJMDNQ4zuYSkCGwmWYZmtgQ9kxTi
R5Ry2Eb985NEAJMfpAhFU5T5UliW2Bm82BxWKRK4qFc2lzRZSZV6JTFTqZWc0pX/EDOLTimWQbNX
b4CWhNUHcGmWd7CWbFmVD7CBr6CTmkELekl+wehQcvGXfHmXU+ATbTCQX4CY8kQGjKmYhhmZkjmZ
lFmZlnmZmJmZmrmZVlBd4RU3/tUF3XUi9wUIozkh+yUi7qVboFk29cUgpflcvvVd4vWZ0uWar2lf
tmk2odmZqxlbs8ma9dWbwDWctKldwlUjA4Kbr0mc1GVcd8Ndv2maMRKd5jWdu1kh7yVf2Qk5gwNf
2ylbzkkFnsmcYxObyVmb4dmax/k16Tk2qWkc/ZVdYzOeU1Cewkkj8bme6vme9ck43Gme2gkk9IWd
Ajqg6tWfwHk4/4EdGwCe/omgb/EFXgdKI/b5BRcAoQmqoAvKobK5XsfRXgEaoW9DonIzoeKJHfnl
IeiJoh4aNssJGgcyoxywATVaoxuQoza6ozdqo/v5DBVQARYgpEM6pBdwARiAARqgIgNyoZz5pFAa
pVI6pVRapVZ6pViapdoRBAA7

------=_NextPart_000_0000_01C2FE80.25A38E60
Content-Type: application/octet-stream
Content-Transfer-Encoding: base64
Content-Location: http://www.w3.org/Icons/w3c_home

iVBORw0KGgoAAAANSUhEUgAAAEgAAAAwCAIAAAA9/qu8AAAABGdBTUEAALGPC/xhBQAAB6NJREFU
eJztWn1sU1UUPxoZMXuLdDOBYgftKBiwsG4JImE0aVjZ+GqyqTgMm7qKMUoTZ6C4OLYUUdgzdAYc
UZcVKGggBBr2oUOSFUsNEBNet+GIUoG5uUKy9U3bJm5D5x8Xbm/v+2hHWBCyX/rHue+d9975vXPu
ueeeV4BHFI+NjY09aBsmBI8/aAMmCo8ssScetAH3ByzLImFgYMBkMplMpkfBYyzLmkwmJG/YsIHj
OI7jYOzhR21t7djYWH5+figUys/PR0ceBY8hBAKB9evX22w2NLwzx/jwcNdvIay0cE66Im0qdeWN
YPj3WxE8NOiV8k86ff6Pq38MITntyRTNM4y8vuhDZcBxXE5ODgAMDAwAgFarZVnWZrNptVrA69iN
YHjhG8fxNfXv5ZUVzqNu1BEYzNt8Cg9bd6+S5zat8OA/8G/yhgpvyHFcdXV1S0sLwzBFRUV2u12j
0aBTPM8bDIauri4AOHPmDMdxyFc8z+/atauysvJOKKqVaTPTU/Edz3XcFD44W5uRmjIFD5t+7JGx
0usP3r49DlZCOJ3O3NzclpYWAIhEIocPH87KynI6nehsXV3d5cuXkYzSIMuyLMs2NDRUVlYqFIpY
5bGl/sKXzd1ITk2ZcrOpVPiwTbXeo54Akmemp/7yzStSZm2pv/CFu/uxpFeTpfOnf1+3Bg85jsvN
zRXVbG9v1+v1s2bNikQi7e3tRqNRVC2WPMzLZmM5OjLaERgUai/PnoHl/lD0RjAsZeg5f1CahQiq
XoujYTabpTTLyspqamoikQgAXL9+XUotRsygV5KRdvj0VaH2OoI8ADRLROONYLi7l8fDjSvmhdvK
yd/XVStI/RKjlpxdTqezr68PD3U63fbt261Wq0qlAoC+vr59+/YBAJp4iYlBvENEX7kiberS+dPx
0Nsh7haS8Ng/8MnbiymFrfsvYDk1ZQr7zhLy7IEDB7Dc2NjY1dW1Y8eOvXv3dnZ2lpbGJkhFRYVC
oRA1AChipEO6e3nRSJs9Iw3LbT/18uFhoQ5JeJH2aSqJ7zx4qT8UxcPNxc+RCjzP+3w+zKq8vByf
UigULpcLcWMYpqKiQoqVHDGQcAgVfqL5s+2nXgBAmWPDiizyFB8e/vzkz3g4Mz216vW42XX27Fkk
lJaWkqwwXC6XTqeTdxdQxBRpUxdkxrSFU6gjMBgdGSWPCHWafHFHqKXJtv8ieYdP33mBupzjOCTY
7XYpo10ul7y7QLht2VgwF8voxZNo9tE0hF4lqc5MT83WZsSU/UG8WgDA0vnTzXlxMQJ3ia1duxav
xULk5OTIuwuExKgXTL1+oX/6Q1FqYSCpUrG989AlcviVzSA0aGhoCABk0l2SoIllazPIEoS0kkri
GKQbOwKDZGIwZMdek6vt1/NXbuFhiVGrVsbyEIX7T4yyhnQRSZJc8eJ0/HE6ONL48PDHLo58ylFP
YGVFq2gZoFKpEkZaQogQI+OHjDSSwObi57Dc3cvjpH+EWNbJVfHI6aukJxHOX7mVt/mUq+1X6rha
rR4PBXGIEKMmNHYCmdk3FswtXJyJh4gzHx4mY5V8QX9GRqQsePczH8lNqvYbL8Q3mkKjm3w9OE0v
yFSolWnCiKVSC6lg0Cu3lejRj1xREGz7L2Kf3xd3gRQx8mWfv3KLDw+TE2y5XknpIGeSLkXk8dCg
V1a9not+FxuKWnevImdpdGS0/sSdVXtiPUa+bABo/rGH9EZpwVyI38JFR0a9/iCpQyV6+v565WnH
avIILkc0Gs194SZOTK1MIwOm/sTPeOqnpkzBay5p/db6C2RJsU6w8lLI1maUGLV4SG6UJpAY3I03
BKmUYI4vmrFMFRxSoEvTu1lqYomVErWVlDXUFi52PDtBnwdh9oy49o5M5rwHSBKjOhwY5OoEEnNJ
foKRj0hG7d4g11cU2le4OJPaXFE8ZQ4KQe33hoaGPB5PMhci8LxIfYcxPmLCGEuGvBTILiUATJs2
zeFwJHMhgtlsTqrnIYTwxQtpUM0CiCff5Ot5efuZJZvcovenGngGvdJoNFZXV8uYhOFwOHw+n9/v
l1KQ648ho3FJTq25GOuWzSbLdkx+ySY3TpVNvh6qUuPDw1SlsnBOeuZTRVlZWWq1WnTvjMFxXE1N
DRKk9gEJeveki5ZL9H1JHZL8IiI3vMV6qUL+YxdHlsUogDUajdVqtVgsuDEqBMdxBoMBtd9k6q9x
EDNL5DqyBCHJf1iWg+XoyGjB+9/uPHjJ6w92BAY31XpxcxbB+qIOCXa7nWEYi8UiOt8cDgdmpdPp
ZByb+Bv0s68e6w9FpXrDCLiLTPXfdx68VHtUchpgFC7OPP6RCQ/dbndxcTEAqFSqoqIitF57PB63
2437jQzDdHZ2yrQPEhNDRpcYtQ3bRHbyCF5/cM0H34mSX1nRSs5AIRZkKtocq6lE6nQ6LRaL1CUM
w3i9XvSpRQqJv4+hCJRfmlAJIrouH9uRT9aEFERZAUB5eXljYyPDiHx5UqlUCVkBQFJfNKevc4X+
+lte583dPxz67hepsz9w/S9Vfc8UNOLf82+elNFHuHbtmtVq1enuTL+8vLw9e/aEQqFkbJ78n8fD
hkliDxsmiU3if4L/AHbrqHBCg93dAAAAAElFTkSuQmCC

------=_NextPart_000_0000_01C2FE80.25A38E60
Content-Type: text/css;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.w3.org/StyleSheets/TR/W3C-REC.css

BODY {
	BACKGROUND: white fixed no-repeat left top; COLOR: black; FONT-FAMILY: =
sans-serif; MARGIN: 0px; PADDING-BOTTOM: 2em; PADDING-LEFT: 70px; =
PADDING-RIGHT: 1em; PADDING-TOP: 2em
}
:link {
	BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: #00c
}
:visited {
	BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: #609
}
A:active {
	BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: #c00
}
TH {
	FONT-FAMILY: sans-serif
}
TD {
	FONT-FAMILY: sans-serif
}
H1 {
	TEXT-ALIGN: left
}
H2 {
	TEXT-ALIGN: left
}
H3 {
	TEXT-ALIGN: left
}
H4 {
	TEXT-ALIGN: left
}
H5 {
	TEXT-ALIGN: left
}
H6 {
	TEXT-ALIGN: left
}
H1 {
	BACKGROUND: white; COLOR: #005a9c
}
H2 {
	BACKGROUND: white; COLOR: #005a9c
}
H3 {
	BACKGROUND: white; COLOR: #005a9c
}
H1 {
	FONT: 170% sans-serif
}
H2 {
	FONT: 140% sans-serif
}
H3 {
	FONT: 120% sans-serif
}
H4 {
	FONT: bold 100% sans-serif
}
H5 {
	FONT: italic 100% sans-serif
}
H6 {
	FONT: small-caps 100% sans-serif
}
.hide {
	DISPLAY: none
}
DIV.head {
	MARGIN-BOTTOM: 1em
}
DIV.head H1 {
	CLEAR: both; MARGIN-TOP: 2em
}
DIV.head TABLE {
	MARGIN-LEFT: 2em; MARGIN-TOP: 2em
}
DIV.head IMG {
	BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; BORDER-RIGHT: =
medium none; BORDER-TOP: medium none; COLOR: white
}
P.copyright {
	FONT-SIZE: small
}
P.copyright SMALL {
	FONT-SIZE: small
}

@media Screen   =20
{
ahref:hover {
	BACKGROUND: #ffa
}
    }
PRE {
	MARGIN-LEFT: 2em
}
DT {
	MARGIN-BOTTOM: 0px; MARGIN-TOP: 0px
}
DD {
	MARGIN-BOTTOM: 0px; MARGIN-TOP: 0px
}
DT {
	FONT-WEIGHT: bold
}
PRE {
	FONT-FAMILY: monospace
}
CODE {
	FONT-FAMILY: monospace
}
UL.toc {
	LIST-STYLE: none
}

@media Aural   =20
{
H1 {
	stress: 20; richness: 90
}
H2 {
	stress: 20; richness: 90
}
H3 {
	stress: 20; richness: 90
}
.hide {
	speak: none
}
P.copyright {
	volume: x-soft; speech-rate: x-fast
}
DT {
	pause-before: 20%
}
PRE {
	speak-punctuation: code
}
    }
BODY {
	BACKGROUND-IMAGE: url(http://www.w3.org/StyleSheets/TR/logo-REC)
}

------=_NextPart_000_0000_01C2FE80.25A38E60--
